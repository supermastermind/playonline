// ***************************************************
// ********** Main Super Master Mind script **********
// ***************************************************

"use strict";

console.log("Running SuperMasterMind.js...");

// **********************************
// Check compatibility with game.html
// **********************************

debug_game_state = 68;

let smm_compatibility_version = "v30.07"; // !WARNING! -> value to be aligned with version in game.html => search "v30" for all occurrences in this script and game.html
try { // try/catch for backward compatibility
  current_smm_compatibility_version = smm_compatibility_version;
}
catch (exc) {}

let loadTime = (new Date()).getTime(); // time in milliseconds

function currentDateAndTime() {
  let today = new Date();
  let day = today.getDate().toString().padStart(2, '0');
  let month = (today.getMonth() + 1).toString().padStart(2, '0');
  let year = today.getFullYear().toString().slice(-2);
  let hours = today.getHours().toString().padStart(2, '0');
  let minutes = today.getMinutes().toString().padStart(2, '0');
  return `${day}${month}${year}${hours}${minutes}`;
}

function reloadAllContentsDistantly() {
  console.log("distant reload");
  if (android_appli) { // specific webview reload in android app / cache should not increase too much on the UE
    // Ensure cache clearing
    console.log("webview clear cache request"); // !WARNING! -> this console text will be read by the android app so shall not be modified
    // Close the android app (to avoid reload failure cases)
    setTimeout("console.log('appli close request');", 3000); // !WARNING! -> this console text will be read by the android app so shall not be modified
  }
  else {
    let href = String(window.location.href);
    let params_idx = href.indexOf("?");
    if (params_idx != -1) {
      if (href.indexOf("android_appli") != -1) {
        submitForm("reloadAllContentsDistantly called for " + href, 200);
      }
      href = href.substring(0, params_idx);
    }
    // Trick the browser into thinking that the URL is different from the cached one, and force it to request the latest version of the HTML file from the server
    // => game.html will be reloaded distantly, and javascript scripts will also be reloaded distantly because AJAX cache is disabled
    window.location.href = href + "?tmp=" + currentDateAndTime();
  }
}

// Check if current script version is different from game.html version:
// script version could only be more recent as AJAX cache is disabled
if ((!localStorage.reloadForCompatibility_v3007) && (html_compatibility_game_version != smm_compatibility_version)) {
    if (android_appli) {
      alert("Game update detected.\nRestart the app...");
    }
    localStorage.reloadForCompatibility_v3007 = "distant reload request done on " + currentDateAndTime();
    reloadAllContentsDistantly();
}

function reloadAllContentsDistantlyIfNeeded() {
  if ((new Date()).getTime() - loadTime >= (mobileMode ? 2.5 : 1)*24*3600*1000) { // 1 to 2.5 days (reload the page/webview distantly to allow application of changes)
    loadTime = (new Date()).getTime(); // time in milliseconds - defense against potential repetitive reloads
    if (android_appli) {
      alert("Game has been running for a long time.\nRestart the app...");
    }
    reloadAllContentsDistantly();
  }
}

debug_smm_state = 20;

// *************************************************************************
// *************************************************************************
// Variables
// *************************************************************************
// *************************************************************************

// Main game variables
// *******************

let nominalGameNbColumns = 5; // classical Super Master Mind game
let nominalGameNbColors = 8; // classical Super Master Mind game
let nominalGameNbMaxAttempts = 12; // classical Super Master Mind game

let defaultNbColumns = 5;

let nbColumns = -1; // N.A.
let nbColors = -1; // N.A.
let nbMaxAttempts = -1; // N.A.

let smmCodeHandler = null;

let showPossibleCodesMode = false;
let showPossibleCodesOffsetMode = false;
let nbMinPossibleCodesShown = -1; // N.A.
let nbMaxPossibleCodesShown = -1; // N.A.
let nbPossibleCodesShown = -1; // N.A. (only valid if showPossibleCodesMode is true)
let currentPossibleCodeShown = -1; // N.A. (only valid if showPossibleCodesMode is true)
let disableMouseMoveEffects = false;
let atLeastOneAttemptSelection = false;
let currentPossibleCodeShownBeforeMouseMove = -1; // N.A. (only valid if showPossibleCodesMode is true)
let lastidxBeforeMouseMove = -1;
let last_mouse_button_event_time = -1;
let last_touch_button_event_time = -1;
let last_touch_event_time = -1;

let currentCode = -1;
let codesPlayed;
let marks;
let nbOfPossibleCodes;
let colorsFoundCodes;
let minNbColorsTables;
let maxNbColorsTables;
let obviouslyImpossibleColors;
let relative_performances_of_codes_played;
let global_best_performances;
let relativePerformancesEvaluationDone;
let classicalUselessCode;
let performancesDisplayed;
let possibleCodesLists;
let possibleCodesListsSizes;
let possibleCodesListsSubdivisions;
let equivalentPossibleCodes;
let globalPerformancesList; // (same size as possibleCodesLists)
let nbOfStatsFilled_NbPossibleCodes = 0;
let nbOfStatsFilled_ListsOfPossibleCodes = 0;
let nbOfStatsFilled_Perfs = 0;
let currentAttemptNumber = 1;

let gameWon = false;
let timeStr = ""; // (only valid if game over)
let wasGameShort = false; // (only valid if game over)
let score = -1.0;  // (only valid if game over)
let sumPerfs = 0.00;  // (only valid if game over and all performances filled)
let nbUnknownPerfs = 0;  // (only valid if game over and all performances filled)

let sCode = -1;
let sCodeRevealed = -1;
let startTime = -1; // N.A.
let stopTime = -1; // N.A.
let newGameEvent = true;
let nbOnGoingGamesAborted = 0;
let nbGamesAbortedWithOnGoingWorker = 0;
let lastGameWasAbortedWithOnGoingWorker = false;
let nbNewGameEvents = 1;
let nbNewGameEventsCancelled = 0;
let dsCode = false;

let revealSecretColorButtonAlreadyBlinked = false;
let showPossibleCodesButtonAlreadyBlinked = false;

let gameErrorStr = "";
let gameErrorCnt = 0;
let globalErrorCnt = 0;

let nb_random_codes_played = 0;
let at_least_one_useless_code_played = false;

let game_cnt = 0;
let last_dialog_gamesok = -1;
let worst_mark_alert_already_displayed = false;
let nb_worst_mark_alert_displayed = 0;

let gameSolver = undefined;
let gameSolverDbg = -1; // (debug value)

let gameSolverInitMsgContents = null;
let gameSolverConfigDbg = null;
let game_id_for_gameSolverConfig = -1;
let game_id_for_initGameSolver = -1;
let gamesolver_buffered_msg_status = 0;
let gamesolver_buffered_msg_action_str = "";

let next_code1 = 0; // (empty code)
let next_code2 = 0; // (empty code)
let next_code3 = 0; // (empty code)
let next_scode = 0; // (empty code)
let next_scoderevealed = 0; // (empty code)
let next_gameinvid = 0;

let isWorkerAlive = -2; // (debug value)
let workerCreationTime = -1; // (debug value)
let workerTerminationTime = -1; // (debug value)

// GUI variables
// *************

var htmlObjectsAlreadySet = false;

let randomCodesHintToBeDisplayed = true;

let CompressedDisplayMode = false;

// Widths and heights
// ******************

let left_border_margin_x = -1.0;   // N.A. - Left border margin for x axis in %
let right_border_margin_x = -1.0;  // N.A. - Right border margin for x axis in %
let bottom_border_margin_y = -1.0; // N.A. - Bottom border margin for y axis in %
let top_border_margin_y = -1.0;    // N.A. - Top border margin for y axis in %

let current_innerWidth = -1;
let current_innerHeight = -1;

let current_width = -1; // N.A.
let width_shift;
let reduced_width;
let current_height = -1; // N.A.
let height_shift;
let reduced_height;
let x_axis_height;

let x_min = 0.0;
let x_max = 100.0;
let y_min = 0.0;
let y_max = 100.0;

let x_step = 1.0; // N.A.
let y_step = 1.0; // N.A.

let color_being_selected = -1;
let column_of_color_being_selected = -1;
let highlight_selected_text = false;

let attempt_nb_width = 2;
let nb_possible_codes_width = 5;
let optimal_width = 4;
let tick_width = 3;
let transition_height = 1;
let scode_height = 1;
let nb_attempts_not_displayed = 0;
let skip_last_attempt_display = false;

let refLineWidth = 1;

function getLineWidth(inner_window_height, min_value) {
  // window.innerHeight = 300 => limit for lineWidth = 1
  // window.innerHeight = 1800 => limit for lineWidth = 3 (valid use case: 1969 <-> 3 for Samsung Galaxy S20FE 5G)
  return Math.max(Math.floor(inner_window_height / 750 + 0.6), min_value);
}

function getGridLineWidth(inner_window_height) {
  return Math.max(Math.round(getLineWidth(inner_window_height, 1) / 2), 1);
}

// Colors
// ******

let blueColor = "#0000A8"; // Blue
let greenColor = "#008200"; // Green
let orangeColor = "#FF7700"; // Orange
let redColor = "#F00000"; // Red
let purpleColor = "#C900A1"; // purple
let cyanColor = "#2DB7E5"; // Cyan
let backgroundColorTable = // all values shall be written #RGB (not like "red", "white", ...)
  [
    blueColor,   // Blue
    greenColor,  // Green
    redColor,    // Red
    orangeColor, // Orange
    "#954400",   // Brown
    "#000000",   // Black
    "#F0F0F0",   // White (gray)
    "#EAEA00",   // Yellow
    purpleColor, // Purple
    cyanColor    // Cyan
  ];
let foregroundColorTable =
  [
    "#FFFFFF",   // White
    "#FFFFFF",
    "#FFFFFF",
    "#FFFFFF",
    "#FFFFFF",
    "#FFFFFF",
    "#000000",   // Black
    "#000000",
    "#FFFFFF",
    "#FFFFFF"
  ];

let specialStrTable =
  [
    "\u2B50", // star
    "\u23F0", // alarm clock
    "\u231B"  // hourglass
  ];

let specialColorTable =
  [
    "orange",
    "#300000", // dark red
    "#4DD826"  // light green
  ];

if (localStorage.modernDisplayApplied) {
  modernDisplay = (localStorage.modernDisplayApplied == "true");
}
if (localStorage.legacyDisplayVariant) {
  legacyDisplayVariant = ((localStorage.legacyDisplayVariant == "1") ? 1 : 0);
}
let legacy_backgroundColor_base_color = "#5F340E"; // "#7F4613";// "#894B0F";// "#694927";
let modernBaseColor = "#000000";
let modernBaseColor2 = legacy_backgroundColor_base_color;
let highlightColor;
let lightGray;
let darkGray;

function setLightGray() {
  lightGray = (modernDisplay ? "#909090" : "#9B7B5B");
  if (!gameOnGoing() && (!modernDisplay)) {
    lightGray = darkGray; // clearer stats
  }
}

let lastHoverColor = "";
function updateHoverBackgroundColor(newColor) {
  if ((!android_appli) && (!mobileMode)) {
    if (newColor != lastHoverColor) {
      // Create a new style element
      const style = document.createElement('style');
      style.type = 'text/css';

      // Insert CSS rule for the new hover background color
      style.innerHTML = `.button:hover { background-color: ${newColor}; color: white; }`;

      // Append the new style element to the head of the document
      document.head.appendChild(style);
      lastHoverColor = newColor;
    }
  }
}

function updateThemeAttributes() {
  myTableObject.style.backgroundColor = (modernDisplay ? "#E3E3E3" : legacy_backgroundColor_base_color);
  canvas_cell.style.border = canvas_cell.style.border.replace((modernDisplay ? " black" : " " + modernBaseColor), (modernDisplay ? " " + modernBaseColor : " black"));
  for (let i = 0; i < allButtons.length; i++) {
    allButtons[i].style.border = allButtons[i].style.border.replace((modernDisplay ? " black" : " " + modernBaseColor), (modernDisplay ? " " + modernBaseColor: " black"));
  }
  highlightColor = "#FFFF00";
  setLightGray();
  darkGray = "#000000";
  updateHoverBackgroundColor(modernDisplay ? modernBaseColor2 : "orange");
}
updateThemeAttributes(); // (allows early graphical setting)

let currentCodeColorMode = -1;

// Fonts
// *****

let fontFamily = "Verdana";
let defaultFont = "10px " + fontFamily;
let min_font_size = 7; // (font size below 7 may not be easily readable in canvas)
let max_font_size = 700;
let font_array__str_height = new Array(0);
let font_array__empty_space_before_str = new Array(0);
let basic_bold_font = defaultFont;
let small_bold_font = defaultFont;
let medium_bold_font = defaultFont;
let stats_bold_font = defaultFont;
let font_size = min_font_size;
let star_font_size = min_font_size;

// Other variables
// ****************

let main_graph_update_needed = true;
let color_selection_code = 0;
let color_cnt = 1;

let tickChar = "\u2714"; /* (check mark/tick) */
let crossChar = "\u2716"; /* (cross) */

let android_app_url = "https://play.google.com/store/apps/details?id=supermastermind.github.io";

// Precalculated table for 5 columns
// *********************************

let precalculated_games_5columns_1st_level = new Array(nbMaxColumns+1);
for (let i = 0; i < nbMaxColumns+1; i++) {
  precalculated_games_5columns_1st_level[i] = new Array(nbMaxColumns+1);
}
precalculated_games_5columns_1st_level[3][0] =
  "1|11111:3B0W|N:490|11122:75C,11123:6C6,11112:7C0,11222:75D,11223:692,11234:637,12222:793,12223:6BF,12233:69A,12234:640,12345:62C,22222:7EE,22223:71E,22233:6EE,22234:690,22334:67B,22345:669,23456:68E." +
  "1|11112:3B0W|N:438|11133:637,11134:5B9,11222:66D,11232:5C9,11332:61F,11342:5B0,11111:750,11113:6B5,11121:6FF,11122:6BE,11123:659,11131:665,11132:689,11221:699,11223:5C5,11231:647,11233:5F7,11234:587,11331:619,11333:640,11334:59A,11341:598,11343:59B,11345:54C,12221:68C,12222:68C,12223:5D6,12231:5DB,12232:5C4,12233:5B6,12234:55C,12331:60E,12332:5B4,12333:60F,12334:57B,12341:5A6,12342:560,12343:577,12345:53C,13331:656,13332:63A,13333:65C,13334:5B6,13341:5B5,13342:594,13343:5B3,13344:58F,13345:548,13451:569,13452:558,13453:548,13456:531,22221:6CD,22222:6CD,22223:623,22231:60B,22232:60E,22233:5E6,22234:58F,22331:5F1,22332:5E3,22333:5F4,22334:57A,22341:59E,22342:587,22343:57A,22345:54B,23331:652,23332:5FC,23333:658,23334:5BB,23341:5B8,23342:579,23343:5AE,23344:594,23345:55D,23451:586,23452:559,23453:560,23456:550,33331:6A6,33332:689,33333:6AC,33334:5F7,33341:5ED,33342:5D4,33343:5ED,33344:5CA,33345:577,33441:5CF,33442:5B3,33443:5CD,33445:568,33451:585,33452:568,33453:580,33454:569,33456:54D,34561:578,34562:558,34563:562,34567:572." +
  "1|11122:3B0W|N:412|11111:683,11113:5E2,11133:5D6,11134:565,11323:58B,11324:522,12222:629,12322:581,13322:59C,13422:53A,11112:680,11123:5E9,11211:651,11212:659,11213:5B2,11222:654,11223:5B9,11233:587,11234:51F,11311:5AD,11312:5B2,11313:590,11314:522,11322:5F1,11333:5A8,11334:513,11344:513,11345:4CE,12211:658,12212:62C,12213:5B0,12223:567,12233:571,12234:519,12311:59E,12312:5AE,12313:57A,12314:519,12323:56C,12324:50A,12333:5A3,12334:518,12344:51C,12345:4D9,13311:583,13312:57F,13313:597,13314:50D,13323:5A3,13324:517,13333:5DD,13334:540,13344:52F,13345:4E5,13411:51F,13412:517,13413:50C,13415:4CE,13423:517,13425:4D4,13433:543,13434:52C,13435:4E4,13455:4E6,13456:4D5,22211:659,22212:63D,22213:5A2,22222:65A,22223:59C,22233:58D,22234:535,22311:5CC,22312:588,22313:586,22314:538,22322:5A5,22323:56D,22324:50A,22333:59B,22334:523,22344:523,22345:4F0,23311:59E,23312:58E,23313:5BC,23314:542,23322:588,23323:599,23324:511,23333:5D4,23334:543,23344:52C,23345:4F9,23411:540,23412:52E,23413:539,23415:508,23422:522,23423:50D,23425:4CF,23433:53B,23434:52A,23435:4F4,23455:4F4,23456:4E8,33311:5C6,33312:5BC,33313:5F3,33314:566,33322:5D3,33323:5CB,33324:537,33333:60F,33334:56F,33344:55C,33345:513,33411:534,33412:52D,33413:55E,33414:542,33415:50C,33422:533,33423:52F,33424:512,33425:4D1,33433:56B,33434:551,33435:50B,33444:551,33445:4FE,33455:4FF,33456:4EF,34511:508,34512:4EE,34513:508,34516:4FA,34522:4FA,34523:4D2,34526:4CA,34533:50A,34534:4FD,34536:4EF,34566:4F2,34567:511." +
  "1|11123:3B0W|N:399|11111:638,11114:5A2,11144:58E,11145:527,11222:599,11224:519,11422:51C,11424:557,11425:4F8,12223:595,12323:546,12423:518,14423:557,14523:505,11112:61E,11113:642,11122:5F3,11124:5BF,11132:623,11134:594,11211:5ED,11212:5A3,11213:616,11214:553,11221:5B0,11223:5E2,11231:60F,11232:5B4,11233:5AA,11234:56F,11241:550,11242:504,11243:576,11244:52C,11245:4DA,11411:569,11412:55D,11413:581,11414:54C,11415:4EB,11423:5BB,11432:56D,11434:539,11435:4DC,11444:565,11445:4DB,11455:4DC,11456:4A9,12211:59F,12212:59A,12213:5BD,12214:516,12221:593,12222:5AB,12224:50B,12231:5B9,12232:583,12233:535,12234:506,12241:511,12242:510,12243:507,12244:4FE,12245:4B4,12311:60D,12312:5AA,12313:59E,12314:569,12322:571,12324:4F1,12332:53F,12334:4F3,12344:519,12345:4D6,12411:54D,12412:516,12413:56D,12414:537,12415:4E6,12421:50F,12422:508,12424:4FA,12425:4B1,12431:571,12432:503,12433:4EF,12434:521,12435:4D8,12441:534,12442:4FC,12443:525,12444:540,12445:4CE,12451:4E1,12452:4B4,12453:4CC,12454:4D1,12455:4CD,12456:4A2,14411:542,14412:53F,14413:54F,14414:55B,14415:4DF,14422:4FE,14424:55F,14425:4DE,14432:53B,14434:54D,14435:4D9,14444:5A6,14445:50A,14455:4F4,14456:4B8,14511:4F2,14512:4EA,14513:4F0,14514:4E1,14516:4A8,14522:4B0,14524:4DD,14526:4AB,14532:4F6,14534:4D8,14536:4AF,14544:514,14545:4F3,14546:4B8,14566:4BB,14567:4B0,22211:5CB,22212:5D9,22213:5BE,22214:543,22221:5D3,22222:5E0,22223:5CF,22224:543,22231:5B1,22232:5BF,22233:561,22234:52A,22241:540,22242:54E,22243:52D,22244:528,22245:4E2,22311:5D4,22312:59D,22313:558,22314:51F,22321:58E,22322:59A,22323:55E,22324:506,22331:563,22332:55B,22333:54A,22334:4F2,22341:51F,22342:515,22343:4D9,22344:506,22345:4C8,22411:53C,22412:53F,22413:523,22414:52B,22415:4E4,22421:535,22422:53D,22423:52D,22424:51B,22425:4C6,22431:52D,22432:51F,22433:4D8,22434:50E,22435:4D3,22441:522,22442:51E,22443:509,22444:52A,22445:4CA,22451:4E0,22452:4DB,22453:4BA,22454:4CD,22455:4CC,22456:4A9,23411:592,23412:520,23413:517,23414:531,23415:4F4,23422:502,23423:4F3,23424:4F3,23425:4AF,23432:4FA,23434:502,23435:4C9,23444:544,23445:4DD,23455:4E3,23456:4B8,24411:55E,24412:52D,24413:549,24414:571,24415:504,24421:52A,24422:51D,24423:51F,24424:530,24425:4BE,24431:54C,24432:514,24433:4FA,24434:545,24435:4EB,24441:565,24442:529,24443:550,24444:570,24445:4FA,24451:4F7,24452:4CC,24453:4D3,24454:4FE,24455:4E8,24456:4BC,24511:511,24512:4E8,24513:4F2,24514:501,24516:4D5,24521:4D9,24522:4C9,24523:4D0,24524:4BE,24526:49F,24531:509,24532:4D9,24533:4B4,24534:4E4,24536:4BE,24541:4F6,24542:4CC,24543:4CF,24544:4F6,24545:4E3,24546:4B8,24561:4CC,24562:4A9,24563:49C,24564:4B7,24566:4BA,24567:4B3,44411:58C,44412:584,44413:58F,44414:5C8,44415:535,44422:539,44423:58B,44424:59D,44425:511,44432:56A,44434:581,44435:509,44444:5E3,44445:53B,44455:528,44456:4E6,44511:50B,44512:50C,44513:505,44514:534,44515:518,44516:4E1,44522:4C2,44523:4FA,44524:50B,44525:4EE,44526:4B0,44532:4FC,44534:4FF,44535:4E8,44536:4BD,44544:545,44545:51E,44546:4DE,44555:52B,44556:4D1,44566:4DA,44567:4CB,45611:4E4,45612:4EA,45613:4CA,45614:4E7,45617:4DC,45622:4A1,45623:4C1,45624:4B2,45627:49F,45632:4DA,45634:4C4,45637:4B8,45644:4ED,45645:4DA,45647:4C9,45677:4D3,45678:4E7." +
  "1|11223:3B0W|N:386|11113:5B8,11121:59D,11124:50C,11133:55D,11143:52D,11241:50E,11244:518,11245:4C0,11333:576,11343:4FE,11443:539,11453:4D5,13233:55A,13243:4DA,14243:513,14253:4C3,11111:5C0,11112:5A4,11114:528,11122:598,11123:5C3,11131:586,11132:58D,11134:4FC,11141:522,11142:517,11144:50A,11145:4AB,11221:5DE,11224:588,11231:591,11232:5C8,11233:591,11234:525,11242:535,11243:560,11331:542,11332:574,11334:4DE,11341:4FA,11342:525,11344:501,11345:4A7,11441:50D,11442:522,11444:541,11445:4BC,11451:4AB,11452:4B9,11454:4BB,11456:47E,12111:598,12112:586,12113:597,12114:500,12121:58F,12123:5DD,12124:519,12131:57E,12132:5BF,12133:554,12134:50C,12141:4FF,12142:507,12143:522,12144:4FF,12145:4AF,12231:5C7,12232:588,12233:561,12234:511,12241:51A,12242:4F2,12243:52E,12244:4EF,12245:4A2,12331:558,12332:564,12333:546,12334:4CE,12341:513,12342:51A,12343:4CB,12344:4EB,12345:499,12441:503,12442:4F0,12443:4FB,12444:519,12445:4A0,12451:4AC,12452:4B0,12453:4AB,12454:4A2,12456:46F,13111:581,13112:584,13113:539,13114:4ED,13131:533,13132:556,13133:540,13134:4C3,13141:4EC,13142:514,13143:4D0,13144:4E4,13145:4A0,13231:55C,13234:4D4,13241:514,13242:517,13244:4F2,13245:4A1,13331:54A,13332:552,13333:566,13334:4D2,13341:4CE,13342:4D0,13343:4CC,13344:4BC,13345:47D,13441:4F5,13442:4F7,13443:4BE,13444:4FF,13445:497,13451:4B4,13452:4A7,13453:479,13454:494,13456:46D,14111:50E,14112:502,14113:503,14114:4EB,14115:49E,14131:4EB,14132:50F,14133:4CE,14134:4E7,14135:49B,14141:4EB,14142:4FE,14143:4FD,14144:50B,14145:49F,14151:49B,14152:4A5,14153:4A6,14154:49E,14155:49D,14156:471,14241:4F6,14244:527,14245:4A6,14251:4A4,14254:4A6,14256:47A,14331:4D1,14332:4D2,14333:4D1,14334:4BC,14335:47C,14341:4E9,14342:4F0,14343:4C2,14344:4FB,14345:490,14351:4A4,14352:4A3,14353:47E,14354:48E,14355:48E,14356:467,14441:510,14442:51C,14443:51E,14444:54B,14445:4C2,14451:4A3,14452:4A4,14453:4A6,14454:4C3,14455:4AA,14456:476,14551:4A4,14552:4A2,14553:4A5,14554:4A8,14555:4BE,14556:475,14561:476,14562:470,14563:471,14564:477,14565:475,14567:478,22111:5B0,22113:5CC,22114:52F,22131:5E3,22132:59E,22133:54B,22134:522,22141:529,22142:516,22143:517,22144:50A,22145:4C8,22331:56F,22332:54F,22333:53D,22334:4E7,22341:523,22342:50C,22343:4CF,22344:501,22345:4BA,22441:50D,22442:506,22443:4FB,22444:519,22445:4B6,22451:4C8,22452:4C1,22453:4A9,22454:4B4,22456:48C,23131:567,23133:551,23134:4F2,23141:52E,23142:528,23143:4E1,23144:50B,23145:4BC,23331:570,23332:556,23333:56E,23334:4EB,23341:4EF,23342:4EA,23343:4E0,23344:4DA,23345:497,23441:510,23442:502,23443:4D3,23444:51A,23445:4AE,23451:4C1,23452:4BF,23453:489,23454:4AE,23456:48F,24141:50A,24143:50E,24144:538,24145:4B9,24151:4C5,24153:4B8,24154:4BF,24156:49D,24331:4F5,24332:4EC,24333:4DF,24334:4D9,24335:496,24341:510,24342:504,24343:4D2,24344:513,24345:4AD,24351:4C3,24352:4BF,24353:488,24354:4AA,24355:4AB,24356:48A,24441:535,24442:51A,24443:52A,24444:563,24445:4D1,24451:4BB,24452:4BB,24453:4AB,24454:4D9,24455:4BE,24456:491,24551:4BB,24552:4BA,24553:4AE,24554:4BD,24555:4D2,24556:48F,24561:498,24562:490,24563:475,24564:498,24565:494,24567:493,33331:580,33333:5A6,33334:51C,33341:4ED,33342:4F3,33343:50C,33344:4EE,33345:4A6,33441:4E8,33442:4E6,33443:4F5,33444:500,33445:49A,33451:49F,33452:4A6,33453:49B,33454:498,33456:484,34341:4E1,34343:4F2,34344:4FD,34345:49A,34351:4A0,34353:49B,34354:499,34356:485,34441:51F,34442:51D,34443:4FF,34444:53D,34445:4C5,34451:4BA,34452:4B6,34453:48D,34454:4C3,34455:4AD,34456:48D,34551:4BD,34552:4B8,34553:493,34554:4AF,34555:4C6,34556:48D,34561:497,34562:497,34563:478,34564:48E,34565:48B,34567:486,44441:564,44443:565,44444:5A2,44445:4FF,44451:4D3,44452:4DA,44453:4D6,44454:503,44455:4E5,44456:4A7,44551:4C3,44553:4C9,44554:4E5,44556:4A3,44561:495,44562:49C,44563:482,44564:4AD,44565:49F,44567:4A1,45451:4C4,45453:4C6,45454:4EB,45456:4A2,45461:497,45463:482,45464:4AB,45465:49F,45467:49E,45671:493,45673:477,45674:4A0,45678:4CA." +
  "1|11234:3B0W|N:373|11114:574,11133:526,11135:4F4,11222:535,11225:4C5,11255:4FD,11256:4A0,12224:51F,12233:4DB,12235:4AE,15224:4AF,15235:4E4,15236:49C,22234:540,23234:4FD,25234:4D1,55234:50E,56234:4B6,11111:590,11112:541,11115:4F7,11122:503,11123:53C,11124:556,11125:4C4,11134:59E,11143:537,11145:4C3,11155:4DF,11156:48B,11223:522,11224:56E,11235:54C,11243:587,11245:4F6,11322:511,11325:4D4,11342:585,11345:4D3,11353:4A0,11355:4C2,11356:475,11555:514,11556:493,11567:460,12111:545,12112:4FF,12113:545,12114:547,12115:4B9,12122:50E,12123:518,12124:51C,12125:4A1,12133:50A,12134:59A,12135:4D9,12143:591,12145:4D2,12155:4C1,12156:489,12211:505,12212:50B,12213:510,12214:538,12215:49E,12222:532,12223:4FD,12225:49F,12234:56D,12243:509,12245:48A,12255:495,12256:45E,12311:540,12312:514,12313:512,12314:584,12315:4DF,12321:511,12322:50B,12323:4D6,12324:515,12325:49B,12331:50A,12332:4C4,12333:4F7,12334:51E,12335:48C,12341:591,12342:52A,12343:52D,12344:50B,12345:4ED,12351:4D0,12352:4A5,12353:499,12354:4D5,12355:4B5,12356:47F,12511:4C1,12512:49D,12513:4D2,12514:4D8,12515:4B6,12516:47B,12522:4B0,12523:49A,12524:494,12525:496,12526:45E,12533:48B,12534:4F0,12535:4AD,12536:46E,12543:4EF,12545:4B3,12546:47B,12555:4CF,12556:470,12566:477,12567:451,15111:4F6,15112:4BC,15114:4D1,15115:4CF,15116:485,15122:4A9,15123:4D7,15124:4DB,15125:4BA,15126:47C,15133:4A1,15134:510,15135:4C9,15136:47D,15143:4D4,15145:4B9,15146:476,15155:4EA,15156:483,15166:489,15167:45F,15222:4A3,15223:490,15225:492,15226:45B,15234:54E,15243:4D6,15245:4B5,15246:46D,15255:4E8,15256:477,15266:479,15267:452,15322:49C,15325:4C4,15326:490,15342:4FE,15345:4B6,15346:47F,15353:49A,15355:4CD,15356:473,15363:460,15365:473,15366:473,15367:451,15555:530,15556:4A5,15566:48B,15567:466,15666:4AA,15667:466,15678:478,22111:518,22112:51B,22113:529,22114:513,22115:4B9,22122:544,22123:522,22124:51A,22125:4B7,22133:4CC,22134:529,22135:4A0,22143:52D,22145:4AB,22155:4B0,22156:474,22211:4FD,22212:535,22213:501,22214:520,22215:4AA,22222:569,22223:512,22224:53F,22225:4D2,22233:4E7,22235:4BA,22243:4F7,22245:498,22255:4BB,22256:46F,22311:52D,22312:51E,22313:4F0,22314:513,22315:4B7,22321:522,22322:52D,22323:4E3,22324:502,22325:4AC,22331:4CE,22332:4D7,22333:4C9,22334:4CD,22335:46E,22341:52A,22342:510,22343:4E5,22344:4C0,22345:4AA,22351:4AF,22352:4B3,22353:489,22354:495,22355:49F,22356:469,22511:4B7,22512:4B4,22513:4AC,22514:49E,22515:4A5,22516:46D,22522:4E7,22523:4AA,22524:4A9,22525:4B7,22526:47A,22533:46C,22534:49E,22535:490,22536:452,22543:4B0,22545:4A0,22546:46B,22555:4C6,22556:46F,22566:472,22567:45D,23111:55B,23112:523,23114:57E,23115:4F0,23121:525,23122:517,23123:4EB,23124:50C,23125:4AB,23131:4FF,23132:4CC,23133:4F9,23134:511,23135:498,23141:59D,23142:523,23143:524,23144:4FF,23145:4E7,23151:4E5,23152:4A8,23153:4A6,23154:4CD,23155:4C5,23156:48A,23221:4FA,23222:508,23223:4C8,23224:4FB,23225:491,23231:4E4,23232:4E5,23235:47D,23241:500,23242:4E7,23243:4BA,23244:4BF,23245:488,23251:491,23252:48E,23253:46C,23254:490,23255:483,23256:44E,23321:4F2,23322:4E1,23324:4CE,23325:48A,23341:528,23342:4E3,23343:50B,23344:4B6,23345:4A6,23351:4A6,23352:489,23353:4A1,23354:487,23355:496,23356:466,23441:52C,23442:4DB,23444:4E3,23445:4A6,23451:4E8,23452:4A4,23453:4A7,23454:488,23455:4BB,23456:483,23551:4CB,23552:497,23554:4A4,23555:4CD,23556:47B,23561:48C,23562:466,23564:466,23565:477,23567:461,25111:4D8,25112:4B7,25113:4E0,25114:4CB,25115:4D0,25116:494,25122:4BF,25123:4AE,25124:4A1,25125:4AC,25126:473,25133:496,25134:4E0,25135:4C0,25136:479,25143:4F4,25145:4BE,25146:489,25155:4EA,25156:48B,25166:491,25167:470,25211:49B,25212:4AC,25213:495,25214:4AE,25215:49F,25216:45A,25222:4D9,25223:495,25224:4B4,25225:4BA,25226:46B,25233:47B,25235:4A9,25236:45E,25243:49C,25245:488,25246:452,25255:4CC,25256:464,25266:468,25267:453,25311:4E6,25312:4B1,25313:4B0,25314:4D2,25315:4D2,25316:496,25321:4B0,25322:4AB,25323:48A,25324:490,25325:4A1,25326:46D,25331:494,25332:46D,25333:48F,25334:492,25335:488,25336:451,25341:4EF,25342:4B4,25343:4AB,25344:48A,25345:4C2,25346:48F,25351:4C2,25352:49E,25353:496,25354:4A4,25355:4C7,25356:47D,25361:487,25362:469,25363:467,25364:466,25365:47B,25366:47E,25367:45D,25511:4CF,25512:4A5,25513:4C3,25514:4BB,25515:4DA,25516:47D,25522:4BD,25523:49F,25524:490,25525:4C6,25526:470,25533:483,25534:4B9,25535:4C6,25536:464,25543:4C5,25545:4CC,25546:47D,25555:509,25556:493,25566:484,25567:464,25611:490,25612:46D,25613:489,25614:46C,25615:481,25616:485,25617:464,25622:47B,25623:46C,25624:451,25625:470,25626:470,25627:45C,25633:44C,25634:46C,25635:463,25636:463,25637:442,25643:48F,25645:47D,25646:47F,25647:466,25655:49E,25656:484,25657:463,25666:499,25667:463,25677:463,25678:468,55111:4E3,55112:4CC,55114:4BF,55115:4EB,55116:48F,55122:4B0,55123:4D5,55124:4C5,55125:4E8,55126:489,55133:49F,55134:4E2,55135:4F1,55136:47A,55143:4D5,55145:4E0,55146:485,55155:534,55156:4A1,55166:496,55167:46D,55222:4BB,55223:48E,55224:4AB,55225:4C6,55226:467,55235:506,55236:485,55243:4BA,55245:4CD,55246:46B,55255:52D,55256:49F,55266:48D,55267:457,55322:4A4,55325:4E2,55326:48D,55342:4E0,55345:4D1,55346:487,55353:4C7,55355:504,55356:496,55363:46F,55365:498,55366:483,55367:45F,55555:57B,55556:4D7,55566:4C0,55567:489,55666:4C6,55667:47F,55678:489,56111:4A3,56112:495,56114:47E,56115:48F,56117:46D,56122:47B,56123:496,56124:478,56125:487,56127:46C,56133:460,56134:484,56135:47C,56137:44C,56143:49D,56145:485,56147:467,56155:4AA,56156:494,56157:470,56177:478,56178:478,56222:474,56223:459,56224:460,56225:466,56227:452,56235:484,56237:455,56243:481,56245:46A,56247:445,56255:4A6,56256:48E,56257:452,56277:457,56278:455,56322:470,56325:48D,56327:471,56342:4AD,56345:480,56347:468,56353:470,56355:495,56356:482,56357:45F,56373:463,56375:460,56377:463,56378:46B,56555:4E2,56556:4BE,56557:488,56567:47E,56577:486,56578:484,56777:497,56778:48A." +
  "1|12345:3B0W|N:360|11145:509,11335:4C9,11346:4A2,12366:4DF,12367:48C,11111:555,11112:4E2,11115:519,11116:4BF,11122:4A5,11123:4B6,11124:4B1,11125:4C5,11126:474,11144:4C2,11146:493,11154:4B9,11156:476,11166:4A5,11167:466,11222:4BB,11223:48B,11225:49D,11226:451,11233:493,11234:4C4,11235:4CA,11236:465,11244:492,11245:4F6,11246:46A,11254:4C5,11256:460,11266:46C,11267:43A,11336:464,11345:553,11354:4CB,11356:46A,11366:486,11367:44B,11433:485,11436:46F,11453:4CF,11456:45F,11464:454,11466:469,11467:43A,11666:4B6,11667:45F,11678:464,12346:537,12354:558,12356:4D5,12433:4D6,12436:4A3,12453:546,12456:49D,12464:478,12466:48B,12467:44F,12666:4E2,12667:468,12678:445,13222:4C7,13223:49E,13224:4D0,13226:467,13254:54F,13256:494,13266:48A,13267:459,13422:4CF,13426:4A5,13452:54F,13456:494,13463:472,13464:466,13466:47A,13467:448,13633:494,13636:474,13637:43C,13656:47E,13657:448,13666:4A5,13667:44A,13677:451,13678:430,16666:51B,16667:491,16677:47B,16678:44F,21111:506,21112:4BD,21113:4D6,21116:486,21123:4B2,21126:46E,21133:4B7,21134:4EF,21136:486,21154:4EF,21156:47C,21166:481,21167:457,21436:4D0,21453:568,21456:4BC,21464:488,21466:49D,21467:46F,21666:4C7,21667:46E,21678:469,23111:4D9,23112:4B6,23114:4EE,23116:48D,23156:4C0,23166:4B7,23167:48B,23411:4EE,23416:4D1,23451:569,23456:4BB,23462:486,23463:47E,23464:47E,23466:49B,23467:46E,23622:498,23623:469,23626:47F,23627:453,23633:482,23634:481,23636:47A,23637:453,23656:499,23657:469,23666:4A3,23667:460,23677:461,23678:456,26222:4DC,26226:4A8,26227:474,26256:47A,26257:455,26266:4B0,26267:467,26277:46C,26278:45F,26466:4A5,26467:462,26476:462,26478:459,26666:4EE,26667:480,26677:472,26678:45E,26777:491,26778:463,66666:570,66667:4CE,66677:4B1,66678:48B,66778:47D.";
precalculated_games_5columns_1st_level[2][2] =
  "1|11223:2B2W|N:282|11132:3C7,11332:3C4,11342:364,12113:3C7,12121:3C1,12124:361,12133:3AE,12143:35A,12232:3C1,12234:34D,12241:35C,13231:3A9,13241:354,13242:350,11111:41E,11112:3EE,11113:3EC,11114:370,11121:3E8,11122:3D5,11123:3E7,11124:351,11131:3E5,11133:3A6,11134:34C,11141:372,11142:34D,11143:361,11144:360,11145:319,11221:3F0,11224:39D,11231:3D2,11232:413,11233:3D1,11234:361,11241:350,11242:36B,11243:387,11244:371,11245:31C,11331:3A1,11333:3CE,11334:345,11341:352,11343:351,11344:379,11345:31B,11441:36C,11442:37E,11443:391,11444:38E,11445:338,11451:321,11452:321,11453:33E,11454:338,11456:319,12111:3DE,12112:3C8,12114:341,12123:413,12131:3BC,12132:3F5,12134:34D,12141:342,12142:351,12144:359,12145:304,12231:406,12233:3B7,12242:33F,12243:35C,12244:35D,12245:2FF,12331:3AB,12332:3A4,12333:3C5,12334:334,12341:346,12342:347,12343:338,12344:35F,12345:306,12441:35E,12442:357,12443:368,12444:390,12445:32B,12451:2FF,12452:301,12453:310,12454:32B,12456:305,13111:3D7,13112:3C4,13113:393,13114:344,13131:391,13132:3A6,13133:3B6,13134:330,13141:339,13142:345,13143:333,13144:357,13145:2FD,13233:3BE,13234:32E,13243:339,13244:35E,13245:301,13331:3B6,13332:3C0,13333:3D2,13334:33C,13341:329,13342:332,13343:342,13344:33B,13345:2FA,13441:361,13442:35F,13443:341,13444:36F,13445:313,13451:2FF,13452:301,13453:302,13454:310,13456:2F4,14111:365,14112:347,14113:346,14114:351,14115:308,14131:343,14132:34D,14133:337,14134:361,14135:303,14141:350,14142:35D,14143:36E,14144:366,14145:314,14151:307,14152:303,14153:30F,14154:315,14155:313,14156:2F5,14241:35D,14243:36A,14244:391,14245:32E,14251:303,14253:313,14254:32D,14256:306,14331:333,14332:332,14333:346,14334:33C,14335:2F7,14341:356,14342:361,14343:344,14344:367,14345:311,14351:2FB,14352:306,14353:302,14354:311,14355:312,14356:2F3,14441:36A,14442:38A,14443:375,14444:3AA,14445:348,14451:311,14452:32A,14453:320,14454:349,14455:348,14456:320,14551:312,14552:32A,14553:321,14554:349,14555:348,14556:323,14561:2F1,14562:302,14563:2FF,14564:323,14565:320,14567:32D,22111:3E4,22113:40B,22114:378,22131:3F6,22132:3CC,22133:3A4,22134:350,22141:35A,22142:353,22143:363,22144:367,22145:30D,22331:3C9,22332:3AA,22333:3C1,22334:34A,22341:360,22342:350,22343:331,22344:365,22345:30E,22441:377,22442:371,22443:373,22444:384,22445:329,22451:31E,22452:324,22453:313,22454:327,22456:308,23131:3A8,23133:3B5,23134:33A,23141:34E,23142:350,23143:32C,23144:35A,23145:308,23331:3BA,23332:3B8,23333:3D9,23334:346,23341:330,23342:334,23343:340,23344:344,23345:305,23441:35C,23442:361,23443:340,23444:36B,23445:317,23451:308,23452:30D,23453:300,23454:318,23456:301,24141:35E,24143:36D,24144:38C,24145:332,24151:309,24153:313,24154:332,24156:30F,24331:339,24332:333,24333:342,24334:345,24335:305,24341:35C,24342:357,24343:341,24344:36E,24345:319,24351:30B,24352:303,24353:2FF,24354:318,24355:31A,24356:301,24441:38A,24442:374,24443:380,24444:3AE,24445:34F,24451:32E,24452:31E,24453:325,24454:34E,24455:34E,24456:32A,24551:32E,24552:31D,24553:324,24554:34D,24555:34F,24556:32A,24561:30B,24562:2FC,24563:306,24564:32A,24565:32A,24567:331,33331:3D3,33333:409,33334:368,33341:33F,33342:342,33343:369,33344:352,33345:315,33441:350,33442:349,33443:35D,33444:35D,33445:31B,33451:302,33452:304,33453:317,33454:31A,33456:308,34341:340,34343:35B,34344:35B,34345:31B,34351:2FF,34353:31A,34354:31B,34356:308,34441:374,34442:372,34443:352,34444:38D,34445:337,34451:31D,34452:31C,34453:319,34454:338,34455:336,34456:31C,34551:31D,34552:31B,34553:319,34554:338,34555:338,34556:31D,34561:2FD,34562:2FE,34563:30C,34564:31D,34565:31C,34567:327,44441:3A5,44443:39C,44444:3E3,44445:37F,44451:347,44452:349,44453:340,44454:37F,44455:379,44456:358,44551:349,44553:341,44554:37D,44556:35B,44561:326,44562:324,44563:321,44564:359,44565:357,44567:357,45451:346,45453:341,45454:37D,45456:357,45461:322,45463:322,45464:359,45465:357,45467:356,45671:330,45673:32D,45674:355,45678:38E." +
  "1|11234:2B2W|N:396|11123:53E,11143:549,11322:522,11325:4D7,11345:4D0,12114:545,12124:51C,12133:519,12135:4CD,12213:510,12243:50B,12324:503,12331:512,12344:501,12354:4AC,12514:4C5,15124:4C5,15243:4BD,22134:527,23134:514,25134:4CC,11111:5D8,11112:558,11114:56D,11115:504,11122:4FA,11124:556,11125:4B4,11133:501,11134:57C,11135:4BD,11145:4AD,11155:4ED,11156:49E,11222:543,11223:52F,11224:55E,11225:4A8,11235:517,11243:5B1,11245:4E0,11255:4F5,11256:494,11342:5A5,11353:4A1,11355:4DC,11356:482,11555:520,11556:4BD,11567:49B,12111:558,12112:4E6,12113:530,12115:49E,12122:516,12123:50B,12125:47F,12134:5BA,12143:58A,12145:4B7,12155:4CB,12156:46D,12211:4ED,12212:50F,12214:52D,12215:487,12222:557,12223:50A,12224:524,12225:4AC,12233:4D1,12234:55A,12235:48E,12245:477,12255:4AD,12256:468,12311:535,12312:513,12313:510,12314:597,12315:4C0,12321:505,12322:508,12323:4C1,12325:473,12332:4BB,12333:50E,12334:51D,12335:483,12341:58B,12342:4FC,12343:500,12345:4B1,12351:4B4,12352:47C,12353:47E,12355:4BA,12356:45C,12511:4A3,12512:485,12513:4B7,12515:4BB,12516:467,12522:4AC,12523:476,12524:47D,12525:4A2,12526:45E,12533:47C,12534:4D2,12535:4C4,12536:45B,12543:4B6,12545:4BC,12546:45E,12555:4EC,12556:489,12566:489,12567:466,15111:4EF,15112:4A2,15114:4AA,15115:4CF,15116:47F,15122:489,15123:4BA,15125:4BB,15126:46A,15133:48B,15134:4E2,15135:4CE,15136:464,15143:4B3,15145:4C1,15146:467,15155:4ED,15156:492,15166:492,15167:469,15222:4B5,15223:47F,15224:491,15225:4AB,15226:46A,15234:522,15235:4DC,15236:475,15245:4C2,15246:459,15255:4FB,15256:48F,15266:490,15267:46A,15322:474,15325:4C0,15326:464,15342:4B8,15345:4B6,15346:45D,15353:4A3,15355:4E5,15356:485,15363:460,15365:485,15366:484,15367:45E,15555:55A,15556:4E1,15566:4DD,15567:4B6,15666:4E6,15667:4B5,15678:4CB,22111:506,22112:519,22113:50D,22114:51A,22115:48C,22122:542,22123:50F,22124:522,22125:4A8,22133:4BC,22135:489,22143:51A,22145:483,22155:4B6,22156:479,22211:51B,22212:551,22213:50B,22214:52E,22215:4A6,22222:5AA,22223:538,22224:548,22225:4E8,22233:4DC,22234:54D,22235:4A8,22243:51E,22245:494,22255:4D5,22256:48E,22311:518,22312:511,22313:4D2,22314:50D,22315:48E,22321:512,22322:537,22323:4DC,22324:522,22325:49D,22331:4BF,22332:4D1,22333:4D9,22334:4CC,22335:464,22341:50A,22342:51C,22343:4D6,22344:4CE,22345:49A,22351:48D,22352:49C,22353:475,22354:490,22355:4A3,22356:46B,22511:4A3,22512:4AF,22513:490,22514:48A,22515:4B5,22516:474,22522:4D8,22523:49A,22524:49B,22525:4C9,22526:487,22533:467,22534:49D,22535:49B,22536:458,22543:49F,22545:49F,22546:467,22555:4DE,22556:49D,22566:49A,22567:492,23111:547,23112:511,23114:593,23115:4CC,23121:515,23122:4FE,23123:4C8,23124:512,23125:48C,23131:501,23132:4B6,23133:50D,23135:47D,23141:58F,23142:502,23143:501,23144:4FC,23145:4BA,23151:4C3,23152:478,23153:487,23154:4BB,23155:4C5,23156:472,23221:505,23222:53D,23223:4D3,23224:526,23225:496,23231:4C9,23232:4DE,23234:4F2,23235:477,23241:4F8,23242:511,23243:4BD,23244:4CF,23245:485,23251:47A,23252:49B,23253:461,23254:495,23255:493,23256:457,23321:4D0,23322:4DE,23324:4E6,23325:479,23341:508,23342:4DA,23343:516,23344:4C6,23345:496,23351:490,23352:47C,23353:499,23354:494,23355:4A4,23356:46D,23441:50A,23442:4D8,23444:517,23445:49C,23451:4BA,23452:48F,23453:498,23454:489,23455:4D6,23456:482,23551:4C6,23552:49D,23554:4D7,23555:4EA,23556:499,23561:475,23562:469,23564:477,23565:497,23567:47C,25111:4BA,25112:493,25113:4C6,25114:4BC,25115:4C0,25116:471,25122:4A4,25123:481,25124:489,25125:4A8,25126:46A,25133:478,25135:4C1,25136:45C,25143:4BD,25145:4BD,25146:46E,25155:4FE,25156:4A0,25166:49E,25167:484,25211:488,25212:4A8,25213:478,25214:48E,25215:4A0,25216:45D,25222:4F2,25223:492,25224:4A3,25225:4D3,25226:48C,25233:46F,25234:4BF,25235:4A9,25236:467,25243:487,25245:491,25246:453,25255:4CC,25256:489,25266:489,25267:484,25311:4C5,25312:487,25313:485,25314:4B3,25315:4BD,25316:467,25321:487,25322:498,25323:472,25324:48C,25325:49D,25326:461,25331:47B,25332:45F,25333:49D,25334:48C,25335:490,25336:457,25341:4BD,25342:498,25343:493,25344:47F,25345:4D0,25346:47C,25351:4BE,25352:49E,25353:49D,25354:4CD,25355:4E3,25356:489,25361:46E,25362:464,25363:465,25364:46C,25365:489,25366:48A,25367:473,25511:4CF,25512:4B0,25513:4C1,25514:4C0,25515:4F3,25516:499,25522:4CC,25523:49B,25524:49A,25525:4D3,25526:494,25533:495,25534:4E4,25535:4D6,25536:474,25543:4D3,25545:4DE,25546:489,25555:52A,25556:4CA,25566:4CA,25567:4AD,25611:482,25612:471,25613:46A,25614:45E,25615:499,25616:498,25617:479,25622:489,25623:465,25624:459,25625:492,25626:493,25627:48A,25633:457,25634:47C,25635:473,25636:473,25637:460,25643:47C,25645:489,25646:48A,25647:475,25655:4CB,25656:4C7,25657:4AB,25666:4CA,25667:4AB,25677:4AD,25678:4C3,55111:4F7,55112:4CA,55114:4CA,55115:505,55116:4AD,55122:4AB,55123:4BD,55124:4C2,55125:4F2,55126:492,55133:4A0,55134:4DC,55135:4F2,55136:484,55143:4C6,55145:4EE,55146:493,55155:54C,55156:4DF,55166:4DF,55167:4BB,55222:4DE,55223:48D,55224:4A5,55225:4C9,55226:48A,55234:51B,55235:4F5,55236:48E,55243:4D6,55245:4D7,55246:479,55255:51D,55256:4AD,55266:4AD,55267:48A,55322:49D,55325:4F4,55326:498,55342:4DC,55345:4DB,55346:488,55353:4D5,55355:522,55356:4BF,55363:494,55365:4C4,55366:4BF,55367:4A5,55555:5A4,55556:52A,55566:51E,55567:4FD,55666:528,55667:4FD,55678:503,56111:4A9,56112:47A,56114:46E,56115:4AC,56117:484,56122:46C,56123:46B,56124:462,56125:492,56127:477,56133:45F,56134:475,56135:484,56137:464,56143:46E,56145:494,56147:474,56155:4E3,56156:4E0,56157:4BC,56177:4BB,56178:4C9,56222:498,56223:454,56224:464,56225:48A,56227:482,56234:4BE,56235:490,56237:46B,56243:472,56245:476,56247:462,56255:4B0,56256:4AD,56257:48A,56277:48F,56278:4A2,56322:45F,56325:498,56327:47B,56342:490,56345:486,56347:473,56353:491,56355:4C1,56356:4BE,56357:4A1,56373:48B,56375:4A4,56377:4A5,56378:4B9,56555:532,56556:520,56557:4FE,56567:4FD,56577:4FC,56578:502,56777:502,56778:500." +
  "1|12345:2B2W|N:510|11235:694,11354:69E,12433:6A2,12436:655,12456:64D,11111:786,11112:6D2,11115:6EE,11116:6A9,11122:64D,11123:689,11124:686,11125:693,11126:61D,11144:66C,11145:6C4,11146:636,11154:6A2,11156:623,11166:682,11167:642,11222:654,11223:626,11225:63D,11226:5E2,11233:62A,11234:682,11236:5F7,11244:633,11245:6C3,11246:604,11254:688,11256:5F7,11266:619,11267:5E6,11335:657,11336:602,11345:714,11346:61F,11356:5F9,11366:632,11367:5EF,11433:625,11436:604,11453:696,11456:5F4,11464:5E4,11466:616,11467:5E4,11666:67A,11667:637,11678:638,12346:6DC,12354:77A,12356:684,12366:691,12367:624,12453:74D,12464:606,12466:651,12467:5E4,12666:696,12667:620,12678:5FC,13222:693,13223:642,13224:696,13226:5F1,13254:74C,13256:64B,13266:648,13267:5ED,13422:699,13426:654,13452:74B,13456:64A,13463:600,13464:5FC,13466:637,13467:5E6,13633:626,13636:619,13637:5D5,13656:643,13657:5ED,13666:669,13667:604,13677:607,13678:5EC,16666:6E6,16667:66D,16677:66A,16678:646,21111:6DC,21112:66C,21113:68E,21116:636,21123:64E,21126:60D,21133:64A,21134:69A,21136:616,21154:6AA,21156:610,21166:63C,21167:607,21436:682,21453:743,21456:662,21464:623,21466:659,21467:614,21666:6A4,21667:64A,21678:637,23111:69D,23112:64E,23114:6A2,23116:61D,23156:66B,23166:66A,23167:624,23411:6A1,23416:672,23451:74A,23456:661,23462:61F,23463:61A,23464:61D,23466:655,23467:617,23622:63E,23623:60A,23626:63A,23627:606,23633:62F,23634:623,23636:635,23637:5FF,23656:657,23657:614,23666:685,23667:633,23677:635,23678:621,26222:69B,26226:67A,26227:642,26256:636,26257:604,26266:682,26267:648,26277:647,26278:64E,26466:684,26467:633,26476:631,26478:61E,26666:6EC,26667:67C,26677:67E,26678:664,26777:684,26778:667,66666:79C,66667:705,66677:6F7,66678:6CB,66778:6CC.";
precalculated_games_5columns_1st_level[2][1] =
  "1|11112:2B1W|N:684|11223:912,11233:910,11234:87F,11331:935,11341:897,11111:AF9,11113:A17,11121:AAD,11122:A7D,11123:9C2,11131:99F,11132:9E9,11133:95D,11134:8DD,11221:A43,11222:A23,11231:980,11232:90A,11332:92D,11333:96B,11334:89B,11342:89B,11343:892,11345:835,12221:A5E,12222:A5E,12223:94C,12231:923,12232:927,12233:8EA,12234:860,12331:927,12332:8F2,12333:92F,12334:86D,12341:88B,12342:86E,12343:867,12345:808,13331:97E,13332:969,13333:9A9,13334:8D4,13341:8A0,13342:89C,13343:8C2,13344:897,13345:84C,13451:850,13452:857,13453:846,13456:839,22221:AC0,22222:AC0,22223:9CC,22231:987,22232:97B,22233:93F,22234:8B4,22331:921,22332:924,22333:924,22334:86E,22341:89B,22342:89F,22343:86D,22345:81B,23331:97E,23332:93F,23333:984,23334:8B9,23341:89A,23342:882,23343:8AA,23344:87F,23345:831,23451:85D,23452:855,23453:833,23456:829,33331:9CF,33332:9CF,33333:A17,33334:93C,33341:8E8,33342:8EE,33343:928,33344:8F2,33345:89F,33441:8BB,33442:8C4,33443:8E6,33445:887,33451:873,33452:88D,33453:892,33454:878,33456:86F,34561:883,34562:89B,34563:875,34567:8B6." +
  "1|11122:2B1W|N:1026|11233:DD3,11234:D03,11311:E2A,11313:DA9,11314:CF0,12223:DA6,12323:D7E,12324:CB3,13312:DA6,13412:CEB,11111:1033,11112:FE6,11113:E64,11123:EBC,11133:E4C,11134:D75,11211:FB2,11212:FC9,11213:E1D,11222:FA3,11223:E31,11312:E11,11322:EA5,11323:DD0,11324:D13,11333:E09,11334:CFA,11344:CFE,11345:C91,12211:FED,12212:F68,12213:E29,12222:F7F,12233:D9C,12234:CBF,12311:E21,12312:E15,12313:DAE,12314:CE2,12322:DC7,12333:DF5,12334:CD1,12344:CCE,12345:C58,13311:DAE,13313:DE1,13314:CD6,13322:DC0,13323:DFC,13324:CE3,13333:E85,13334:D4B,13344:D26,13345:CAF,13411:CE5,13413:CD6,13415:C6D,13422:D05,13423:CD6,13425:C61,13433:D4C,13434:D16,13435:CA1,13455:CAC,13456:C95,22211:1046,22212:FB5,22213:E6D,22222:1021,22223:E2F,22233:E23,22234:D35,22311:EA3,22312:DD9,22313:DD3,22314:D11,22322:E3C,22323:D95,22324:CCF,22333:DF5,22334:CD1,22344:CD7,22345:C68,23311:DEF,23312:DA3,23313:E25,23314:D00,23322:DCA,23323:DC5,23324:CB9,23333:E64,23334:D2A,23344:CF9,23345:C90,23411:D34,23412:CDD,23413:CF7,23415:C82,23422:D0D,23423:CB0,23425:C40,23433:D26,23434:CF1,23435:C87,23455:C8F,23456:C8B,33311:E51,33312:E2C,33313:EA4,33314:D80,33322:E54,33323:E6C,33324:D4C,33333:F24,33334:DDD,33344:DAF,33345:D26,33411:D2D,33412:CF4,33413:D61,33414:D23,33415:CC8,33422:D16,33423:D32,33424:CF6,33425:C8F,33433:DD8,33434:D86,33435:D0B,33444:D83,33445:CEE,33455:CF5,33456:CEA,34511:CC3,34512:C8C,34513:CBD,34516:CBF,34522:CC8,34523:C88,34526:C89,34533:D0E,34534:CEC,34536:CE5,34566:CED,34567:D42." +
  "1|11123:2B1W|N:1179|11242:F48,11244:F8A,11245:EF1,11411:FE6,11414:F85,11415:EDE,11434:F8D,11435:EE7,12221:1085,12233:FB5,12243:F18,12322:102D,12324:F0A,12421:F48,12433:EFF,12443:F4F,12453:EAE,14413:F92,14513:EFE,11111:122F,11112:119E,11113:11E1,11114:1060,11122:114B,11124:10BE,11132:11E6,11134:103D,11144:101E,11145:F72,11211:1134,11212:1099,11213:11E1,11214:FBE,11221:10B7,11222:10C2,11223:112E,11224:F79,11231:11A2,11232:108B,11233:10D2,11234:FEF,11241:FD6,11243:102C,11412:FC8,11413:1000,11422:F8B,11423:10C5,11424:FBE,11425:F13,11432:FF1,11444:1007,11445:EE4,11455:EE6,11456:E9F,12211:10B2,12212:10AA,12213:10D6,12214:F62,12222:10D8,12223:1098,12224:F65,12231:10B5,12232:102E,12234:EF2,12241:F59,12242:F58,12244:F1B,12245:E80,12311:11B9,12312:10BD,12313:10A2,12314:FF2,12323:FFA,12332:FBC,12334:EF8,12344:F37,12345:E98,12411:FBE,12412:F50,12413:1009,12414:F6A,12415:ECF,12422:F58,12423:F52,12424:F21,12425:E88,12431:FE6,12432:EEB,12434:F1C,12435:E87,12441:F7F,12442:F0A,12444:F99,12445:EB1,12451:ED2,12452:E74,12454:EAB,12455:EAB,12456:E68,14411:F88,14412:F81,14414:FC7,14415:EC0,14422:F36,14423:FA4,14424:FD2,14425:ECE,14432:F30,14434:F87,14435:EB8,14444:10AC,14445:F50,14455:F20,14456:ECA,14511:ECA,14512:EEA,14514:EC0,14516:E75,14522:EA1,14523:F10,14524:ECA,14526:E7A,14532:EA7,14534:EA8,14536:E71,14544:F53,14545:F15,14546:EBC,14566:EBE,14567:EDD,22211:1108,22212:1131,22213:10F9,22214:FC8,22221:1137,22222:11C7,22223:1105,22224:101A,22231:10B5,22232:10DD,22233:1047,22234:F76,22241:FB8,22242:FF8,22243:FA3,22244:F9C,22245:EFA,22311:112F,22312:1090,22313:1003,22314:F5D,22321:1088,22322:10A8,22323:1024,22324:F51,22331:100E,22332:101A,22333:FEE,22334:EFB,22341:F5F,22342:F53,22343:EE5,22344:F2C,22345:EAF,22411:FA6,22412:FAE,22413:F6B,22414:F6B,22415:ED0,22421:F87,22422:FF5,22423:F8C,22424:F88,22425:EF0,22431:F46,22432:F59,22433:EF6,22434:F1E,22435:E9D,22441:F54,22442:F80,22443:F3A,22444:F99,22445:EC6,22451:EBF,22452:EDF,22453:EAD,22454:EC7,22455:ED0,22456:E90,23411:105E,23412:F4B,23413:F3D,23414:F78,23415:EE7,23422:F37,23423:F18,23424:F15,23425:E89,23432:F03,23434:F14,23435:E91,23444:FB4,23445:EDC,23455:EDB,23456:EA2,24411:FB8,24412:F60,24413:F90,24414:FE4,24415:F00,24421:F41,24422:F8C,24423:F48,24424:F95,24425:EB9,24431:F80,24432:F25,24433:F14,24434:FA6,24435:EDE,24441:FE1,24442:F92,24443:FB3,24444:1034,24445:F3A,24451:EF8,24452:EC9,24453:EE1,24454:F36,24455:F06,24456:EBC,24511:F2E,24512:EDC,24513:EF4,24514:EFE,24516:EBE,24521:EAF,24522:EF7,24523:ECE,24524:EB1,24526:E86,24531:EFC,24532:EAA,24533:E90,24534:ED5,24536:EA0,24541:EF4,24542:EC4,24543:ED4,24544:F2E,24545:EFB,24546:EB5,24561:EA8,24562:E99,24563:E86,24564:EB8,24566:EC5,24567:EDD,44411:102B,44412:1011,44413:FFF,44414:10E3,44415:F99,44422:FB3,44423:102F,44424:1059,44425:F4D,44432:FDF,44434:104D,44435:F59,44444:1196,44445:100D,44455:FCD,44456:F6D,44511:F1D,44512:F0F,44513:EEE,44514:F82,44515:F48,44516:F02,44522:ECF,44523:F1E,44524:F3C,44525:EFF,44526:EAD,44532:EFF,44534:F3E,44535:F0B,44536:ECD,44544:1003,44545:FB7,44546:F4E,44555:FB6,44556:F33,44566:F35,44567:F55,45611:EE7,45612:EE3,45613:EAA,45614:EFD,45617:F2D,45622:EA4,45623:EE7,45624:EAD,45627:EC1,45632:EDB,45634:ED1,45637:F00,45644:F51,45645:F33,45647:F4B,45677:F53,45678:FB5." +
  "1|11223:2B1W|N:1344|11112:139F,11131:1340,11134:11BE,11142:11E2,11331:1290,11334:1169,11341:11BC,11344:11B1,11345:110B,11442:11EF,11452:1129,12242:11A8,12244:1177,12245:10E8,12333:12C0,12343:1174,12443:11D1,12453:112C,13113:125A,13133:127D,13143:113A,13234:117A,13244:11A8,13245:111B,14113:11A8,14133:113D,14143:118D,14153:10DA,14241:1185,14251:10EB,11111:144E,11113:139E,11114:1262,11121:1383,11122:1366,11123:13A3,11124:11D3,11132:134F,11133:12C8,11141:1254,11143:120A,11144:11DC,11145:112C,11221:13FD,11224:1311,11231:1344,11232:1458,11233:1360,11234:1229,11241:11E8,11242:1232,11243:12DF,11244:11CA,11245:1120,11332:130E,11333:12FB,11342:1235,11343:11B9,11441:11EF,11443:121C,11444:1240,11445:112F,11451:1134,11453:114B,11454:112A,11456:10D0,12111:1368,12112:134B,12113:134E,12114:11B8,12121:134F,12123:147A,12124:1201,12131:132B,12132:141B,12133:12B9,12134:11F2,12141:11B3,12142:11EB,12143:1218,12144:1182,12145:10DE,12231:1417,12232:130A,12233:12D8,12234:11F0,12241:11E6,12243:122B,12331:12CE,12332:12E2,12334:1181,12341:11EE,12342:11EE,12344:11AE,12345:1119,12441:1195,12442:1194,12444:1206,12445:10E2,12451:10FC,12452:10E9,12454:10E1,12456:10A9,13111:1313,13112:1350,13114:1193,13131:1255,13132:12C0,13134:112F,13141:117B,13142:11FB,13144:1167,13145:10CD,13231:12B8,13233:12E4,13241:11F0,13242:11EF,13243:11A0,13331:127C,13332:12C9,13333:131E,13334:1186,13341:1129,13342:117B,13343:1195,13344:113E,13345:10B1,13441:1174,13442:11AC,13443:1169,13444:11DA,13445:1102,13451:10C4,13452:111B,13453:10E4,13454:10F0,13456:10B9,14111:120A,14112:11C5,14114:1197,14115:10EA,14131:1186,14132:1201,14134:117E,14135:10D7,14141:118E,14142:119E,14144:11CC,14145:10E6,14151:10D9,14152:10F1,14154:10E1,14155:10E0,14156:1097,14243:11F0,14244:1220,14245:10F7,14253:115A,14254:10ED,14256:10B0,14331:1146,14332:1180,14333:11AE,14334:1162,14335:10CC,14341:1165,14342:119A,14343:1167,14344:11E4,14345:10FF,14351:10C5,14352:1100,14353:10D6,14354:10EF,14355:10F7,14356:10B6,14441:11DC,14442:11F8,14443:1213,14444:12DF,14445:1181,14451:10DD,14452:10E5,14453:1111,14454:117E,14455:113A,14456:10EF,14551:10E9,14552:10E2,14553:1112,14554:1145,14555:1187,14556:10FC,14561:10A4,14562:10A4,14563:10D0,14564:10F1,14565:10EE,14567:110C,22111:13CB,22113:1478,22114:1272,22131:1469,22132:1391,22133:12C5,22134:1241,22141:1230,22142:1219,22143:1223,22144:11C0,22145:112D,22331:132C,22332:12BC,22333:12A1,22334:118E,22341:1230,22342:11D2,22343:113F,22344:11A9,22345:110B,22441:11DE,22442:11DB,22443:11A7,22444:120D,22445:1101,22451:1129,22452:111C,22453:10E1,22454:1107,22456:10B2,23131:131E,23133:12BC,23134:11CC,23141:123B,23142:1228,23143:1176,23144:11F4,23145:115C,23331:1312,23332:12BD,23333:1313,23334:11CA,23341:11C6,23342:1173,23343:1187,23344:117C,23345:10F7,23441:1200,23442:1198,23443:1155,23444:1227,23445:1136,23451:1172,23452:1106,23453:10D0,23454:1129,23456:10F9,24141:11B9,24143:11EE,24144:1237,24145:1117,24151:111D,24153:1132,24154:111A,24156:10EA,24331:11D2,24332:1183,24333:1192,24334:1184,24335:1106,24341:11ED,24342:1190,24343:1142,24344:120B,24345:1127,24351:1155,24352:1101,24353:10C2,24354:1129,24355:112A,24356:10ED,24441:1227,24442:11FF,24443:1203,24444:12D8,24445:118C,24451:1118,24452:110A,24453:1101,24454:118D,24455:1156,24456:1102,24551:111E,24552:1108,24553:110E,24554:115B,24555:1196,24556:1110,24561:10E9,24562:10C8,24563:10BA,24564:1109,24565:1107,24567:112C,33331:1345,33333:1412,33334:122E,33341:11C2,33342:11C0,33343:123A,33344:11BC,33345:1131,33441:119E,33442:11A2,33443:11E8,33444:11F9,33445:1134,33451:1123,33452:1128,33453:1131,33454:1127,33456:1103,34341:1179,34343:11CC,34344:11D9,34345:111E,34351:110E,34353:1126,34354:1119,34356:10F8,34441:1209,34442:121A,34443:11D6,34444:128F,34445:118F,34451:1134,34452:113F,34453:10F7,34454:118D,34455:115C,34456:111D,34551:113D,34552:1141,34553:1105,34554:116A,34555:1195,34556:112B,34561:110A,34562:110E,34563:10CD,34564:1127,34565:111E,34567:1139,44441:12C6,44443:12B2,44444:1448,44445:1283,44451:1194,44452:119A,44453:118B,44454:127E,44455:1231,44456:11C1,44551:1165,44553:117D,44554:1236,44556:11AE,44561:1125,44562:112D,44563:1106,44564:11BD,44565:11A1,44567:11C0,45451:115F,45453:1163,45454:122D,45456:11A8,45461:1121,45463:10F9,45464:11BC,45465:119A,45467:11BF,45671:1149,45673:1108,45674:11B8,45678:125C." +
  "1|11234:2B1W|N:1497|11112:1533,11122:1488,11125:13B9,11145:13BF,11353:136B,11355:13AE,11356:131B,12211:145E,12212:146F,12215:134F,12223:146B,12245:1369,12332:13D7,12333:145E,12335:1358,12524:1364,12533:135F,12535:1399,12536:1324,15114:13B6,15133:1351,15135:1381,15136:12F6,15223:1363,15245:1393,15246:132A,22214:149F,22334:13ED,22534:135B,23224:146A,23231:140B,23244:13D4,23254:1357,25214:1379,25334:135C,25534:13A1,25634:1314,55134:13D1,56134:132F,11111:16BC,11114:159E,11115:1489,11123:151C,11124:1565,11133:14C4,11134:1645,11135:140B,11143:1539,11155:1412,11156:135F,11222:14F7,11223:14F2,11224:15D4,11225:13B9,11235:1551,11243:16AF,11245:144C,11255:13F9,11256:1349,11322:14BF,11325:141C,11342:1688,11345:1400,11555:1495,11556:1357,11567:1312,12111:1509,12112:1442,12113:14FE,12114:1527,12115:1396,12122:147B,12123:149F,12124:14C1,12125:134B,12133:14A4,12134:16C1,12135:13F5,12143:1676,12145:13DA,12155:1384,12156:1301,12213:149F,12214:150E,12222:1544,12224:14BD,12225:1397,12233:141E,12234:15A6,12235:1391,12243:14A5,12255:135D,12256:12F7,12311:150C,12312:148F,12313:149C,12314:1673,12315:13E2,12321:14A4,12322:1462,12323:13EB,12324:14A1,12325:1352,12331:14A9,12334:14DE,12341:1662,12342:14A5,12343:14AB,12344:14A0,12345:13FE,12351:13DA,12352:134C,12353:1349,12354:1409,12355:137A,12356:131B,12511:139A,12512:1352,12513:13DE,12514:13FE,12515:1383,12516:1304,12522:1388,12523:1350,12525:1338,12526:12CE,12534:1452,12543:1402,12545:1391,12546:1321,12555:13E9,12556:12F9,12566:130C,12567:12E6,15111:1449,15112:1386,15115:13B3,15116:130E,15122:136C,15123:13E5,15124:13F0,15125:136E,15126:12F8,15134:1470,15143:13DE,15145:1373,15146:1309,15155:13FE,15156:1303,15166:1310,15167:12D2,15222:13AA,15224:13A2,15225:1368,15226:12F8,15234:1548,15235:13EC,15236:1360,15243:140A,15255:1423,15256:131A,15266:131A,15267:12F7,15322:134D,15325:1390,15326:1320,15342:140A,15345:1381,15346:130F,15353:135B,15355:13E8,15356:1300,15363:12E9,15365:130D,15366:1307,15367:12DD,15555:1546,15556:13B7,15566:1372,15567:1339,15666:13BF,15667:133D,15678:1393,22111:14B6,22112:14BC,22113:14F8,22114:14E4,22115:13A7,22122:157B,22123:14C7,22124:14B8,22125:13D2,22133:13F9,22134:14F7,22135:1383,22143:1536,22145:13C5,22155:13A7,22156:1348,22211:1497,22212:1522,22213:146E,22215:138A,22222:166A,22223:14B0,22224:1521,22225:1457,22233:1440,22234:1520,22235:13AD,22243:1474,22245:1381,22255:13F0,22256:1354,22311:14F9,22312:14C1,22313:144A,22314:14C3,22315:13A0,22321:14CC,22322:14E6,22323:1430,22324:146E,22325:1399,22331:13FC,22332:13FF,22333:13FF,22335:1308,22341:150E,22342:148B,22343:140D,22344:13C0,22345:138C,22351:13B3,22352:13A6,22353:1348,22354:1351,22355:1375,22356:130E,22511:13AD,22512:13D0,22513:13B5,22514:138D,22515:1392,22516:132A,22522:145A,22523:1398,22524:138A,22525:13DD,22526:135C,22533:1306,22535:135F,22536:12D7,22543:1390,22545:1373,22546:1312,22555:1418,22556:1349,22566:1350,22567:132B,23111:157A,23112:14F9,23114:1683,23115:1441,23121:14ED,23122:14C0,23123:142C,23124:14BB,23125:13B3,23131:1497,23132:13E6,23133:1468,23134:14CB,23135:1347,23141:16AB,23142:14FB,23143:14F9,23144:1494,23145:1451,23151:142D,23152:13B4,23153:13AB,23154:1411,23155:13D8,23156:1378,23221:1463,23222:14B3,23223:13DB,23225:1366,23232:1442,23234:1483,23235:133D,23241:14A5,23242:1438,23243:13AC,23245:133E,23251:1359,23252:137D,23253:12FD,23255:133E,23256:12DA,23321:1444,23322:1432,23324:140B,23325:133A,23341:14F3,23342:1409,23343:1487,23344:13B2,23345:1381,23351:13AF,23352:133F,23353:13A2,23354:1336,23355:136B,23356:1307,23441:1505,23442:1411,23444:145A,23445:1390,23451:1448,23452:1383,23453:1376,23454:1343,23455:13BB,23456:134C,23551:13ED,23552:137A,23554:139E,23555:1401,23556:1347,23561:137E,23562:131C,23564:130E,23565:1349,23567:1331,25111:13DD,25112:138E,25113:141B,25114:1400,25115:13A3,25116:1330,25122:13E6,25123:13B9,25124:137B,25125:139F,25126:1338,25133:1356,25134:1439,25135:138C,25136:1316,25143:146B,25145:13D9,25146:137B,25155:143E,25156:1358,25166:1357,25167:1330,25211:135B,25212:138A,25213:135C,25215:1349,25216:12D8,25222:1461,25223:135F,25224:13A6,25225:13E3,25226:1345,25233:1336,25234:13E0,25235:136A,25236:12E6,25243:1349,25245:1339,25246:12D2,25255:13FB,25256:1321,25266:1329,25267:130C,25311:1420,25312:13A4,25313:13B6,25314:140F,25315:13D9,25316:1377,25321:13AA,25322:139E,25323:1339,25324:133C,25325:136A,25326:130F,25331:135C,25332:1304,25333:136D,25335:1333,25336:12D2,25341:1460,25342:1384,25343:1380,25344:1329,25345:13B3,25346:1358,25351:13D8,25352:1376,25353:1374,25354:1380,25355:13F7,25356:1334,25361:1371,25362:1311,25363:1315,25364:12FB,25365:1333,25366:1331,25367:1331,25511:13C5,25512:1392,25513:13D7,25514:13A9,25515:1424,25516:134E,25522:13E1,25523:1362,25524:1350,25525:13F7,25526:133B,25533:133E,25535:13DB,25536:1303,25543:13C4,25545:13F9,25546:1349,25555:14D1,25556:13A8,25566:1383,25567:135C,25611:133F,25612:1332,25613:1378,25614:131F,25615:134D,25616:1352,25617:1329,25622:136B,25623:1310,25624:12CF,25625:133E,25626:1342,25627:1325,25633:12DC,25635:1304,25636:1301,25637:12DA,25643:1360,25645:1341,25646:1340,25647:132F,25655:13BC,25656:1382,25657:1356,25666:13AD,25667:1354,25677:135D,25678:138C,55111:142F,55112:13A9,55114:13AE,55115:1439,55116:1344,55122:13B3,55123:13E2,55124:13A5,55125:143E,55126:1361,55133:1358,55135:13FE,55136:1301,55143:13E7,55145:142D,55146:135B,55155:152A,55156:13C5,55166:139A,55167:136C,55222:1402,55223:1347,55224:1381,55225:13F8,55226:1329,55234:146E,55235:1434,55236:1336,55243:138F,55245:13DC,55246:131B,55255:14F8,55256:1395,55266:136C,55267:132F,55322:137C,55325:1407,55326:1350,55342:13E8,55345:13FF,55346:134D,55353:1402,55355:14C0,55356:13B2,55363:1352,55365:13B2,55366:1383,55367:1369,55555:16BE,55556:14BF,55566:1471,55567:1416,55666:146F,55667:13F7,55678:1442,56111:1382,56112:1341,56114:1306,56115:1349,56117:1315,56122:135B,56123:137A,56124:132D,56125:135A,56127:133D,56133:12DE,56135:1303,56137:12D1,56143:1384,56145:134C,56147:1341,56155:13D0,56156:138E,56157:1368,56177:1377,56178:13BA,56222:135E,56223:12E3,56224:1303,56225:1321,56227:1318,56234:13B6,56235:1331,56237:130D,56243:1316,56245:1305,56247:12EA,56255:139A,56256:1364,56257:1324,56277:1328,56278:1353,56322:1322,56325:1343,56327:1351,56342:137C,56345:133F,56347:1335,56353:1354,56355:13AA,56356:137E,56357:135F,56373:1340,56375:135A,56377:135A,56378:1393,56555:14C4,56556:145C,56557:140F,56567:13F3,56577:13F3,56578:1438,56777:1420,56778:1439." +
  "1|12345:2B1W|N:1650|11125:165A,11225:15F0,11244:15EC,11246:1580,11356:158F,12464:1584,12466:15C8,12467:154D,11111:1916,11112:16FC,11115:178D,11116:16BF,11122:1611,11123:165F,11124:1646,11126:158C,11144:166C,11145:1724,11146:15ED,11154:1678,11156:15AF,11166:1642,11167:15AF,11222:1643,11223:15C5,11226:1538,11233:15CC,11234:16B0,11235:16BE,11236:1562,11245:1736,11254:16BF,11256:1576,11266:1579,11267:1523,11335:168E,11336:1575,11345:185F,11346:15FB,11354:16DD,11366:15B1,11367:153A,11433:15CF,11436:1575,11453:16C6,11456:156F,11464:152A,11466:1560,11467:151E,11666:1668,11667:157A,11678:1590,12346:17F2,12354:193C,12356:16B8,12366:1669,12367:15C4,12433:16DC,12436:1657,12453:190E,12456:163A,12666:1693,12667:157F,12678:157A,13222:1671,13223:1602,13224:16B8,13226:1568,13254:1903,13256:161E,13266:15B1,13267:154F,13422:16AC,13426:1628,13452:18E4,13456:1612,13463:156B,13464:156B,13466:159A,13467:153B,13633:15CA,13636:1578,13637:150A,13656:15B5,13657:154E,13666:160F,13667:1531,13677:1541,13678:151A,16666:17A3,16667:1601,16677:15CB,16678:1581,21111:1756,21112:1660,21113:16A5,21116:15E2,21123:162D,21126:1591,21133:1639,21134:16FA,21136:15CA,21154:1726,21156:15D5,21166:15B8,21167:157C,21436:16A7,21453:194B,21456:167A,21464:15D6,21466:1604,21467:15B7,21666:1664,21667:15A7,21678:15C4,23111:16B2,23112:1632,23114:16F7,23116:15C4,23156:167A,23166:1623,23167:15D0,23411:170D,23416:169F,23451:1941,23456:166B,23462:15D4,23463:15CA,23464:15BF,23466:15FD,23467:15AE,23622:160B,23623:1593,23626:15B9,23627:1575,23633:15D8,23634:15D2,23636:15A6,23637:155D,23656:1600,23657:15B5,23666:1643,23667:158C,23677:1599,23678:1596,26222:16E6,26226:1648,26227:15D0,26256:15B6,26257:156A,26266:165A,26267:15A3,26277:15A1,26278:1598,26466:1641,26467:1596,26476:1592,26478:159D,26666:1731,26667:1602,26677:15D4,26678:15C6,26777:1612,26778:15C7,66666:1977,66667:1740,66677:16DE,66678:16A4,66778:167C.";
precalculated_games_5columns_1st_level[2][0] =
  "1|11111:2B0W|N:3430|11222:3729,11223:336B,11234:32AB,11112:39B9,11122:3757,11123:34C7,12222:3896,12223:3407,12233:332C,12234:322A,12345:3218,22222:3BA2,22223:364A,22233:34B3,22234:33A9,22334:32C6,22345:329A,23456:3332." +
  "1|11112:2B0W|N:2668|11333:27A5,11334:2544,11343:2529,11345:24B6,12222:2AB1,12232:273F,12332:26C8,12342:25C7,13332:2893,13342:25EE,13452:258B,11111:2E9D,11113:2B1E,11121:2CD6,11122:2BFE,11123:2956,11131:295A,11132:2A20,11133:2864,11134:26CC,11221:2B18,11222:2ADF,11223:27D1,11231:28E0,11232:27EA,11233:27E8,11234:2655,11331:27C9,11332:288D,11341:262A,11342:26EA,12221:2B8B,12223:279D,12231:2840,12233:26AD,12234:25AA,12331:2867,12333:27BC,12334:257B,12341:26B5,12343:257C,12345:2525,13331:283A,13333:291B,13334:2634,13341:258E,13343:25F8,13344:2558,13345:24B8,13451:2522,13453:24BA,13456:24BB,22221:2CAB,22222:2CAB,22223:2964,22231:28D4,22232:2885,22233:27AB,22234:26B5,22331:27FD,22332:278F,22333:27BB,22334:25FE,22341:2700,22342:2656,22343:25EF,22345:256E,23331:293D,23332:27F3,23333:295B,23334:26AC,23341:26B6,23342:25DF,23343:2651,23344:25CF,23345:253E,23451:2655,23452:258C,23453:2540,23456:2546,33331:2AA2,33332:2A97,33333:2B28,33334:27AA,33341:2742,33342:26EA,33343:273B,33344:2672,33345:25A3,33441:268F,33442:263C,33443:264F,33445:2514,33451:25DB,33452:2571,33453:258C,33454:24FE,33456:24E1,34561:25DD,34562:256D,34563:24E7,34567:2551." +
  "1|11122:2B0W|N:2287|11333:20EA,11334:1EF4,11344:1F0F,11345:1E99,13323:20CA,13324:1EDE,13423:1ECC,13425:1E7C,22222:256B,22322:222B,23322:2170,23422:2026,33322:220D,33422:1FC5,34522:1F53,11111:2603,11112:25F5,11113:22D6,11123:22CA,11133:21F2,11134:2097,11211:2537,11212:255C,11213:2210,11222:25AF,11223:2245,11233:213A,11234:2006,11311:21E6,11312:221A,11313:2102,11314:1FD4,11322:22FF,11323:213C,11324:200F,12211:25C7,12212:2501,12213:2287,12222:2489,12223:2154,12233:20FF,12234:1FE7,12311:224B,12312:2238,12313:2167,12314:2049,12322:21AF,12323:20C2,12324:1FB0,12333:20AE,12334:1ED2,12344:1EE6,12345:1E9F,13311:210F,13312:2124,13313:20DE,13314:1F05,13322:2146,13333:21A5,13334:1F4C,13344:1ED0,13345:1E44,13411:1FF5,13412:1FF7,13413:1EF5,13415:1EA2,13422:2019,13433:1F54,13434:1EBB,13435:1E34,13455:1E4A,13456:1E66,22211:26CC,22212:253C,22213:22DD,22223:21FB,22233:2172,22234:208F,22311:23A9,22312:221E,22313:21E4,22314:20F2,22323:20FA,22324:1FD6,22333:2171,22334:1FC1,22344:1FDD,22345:1F78,23311:224C,23312:218E,23313:21A1,23314:1FE9,23323:2132,23324:1F5D,23333:2210,23334:1FC2,23344:1F35,23345:1EDF,23411:2144,23412:2050,23413:1FD9,23415:1FA7,23423:1F4B,23425:1EE6,23433:1FAE,23434:1F36,23435:1ED2,23455:1ED9,23456:1F02,33311:21D0,33312:215E,33313:22A0,33314:201B,33323:21F1,33324:1FA1,33333:23CF,33334:20A6,33344:2001,33345:1F57,33411:1FD2,33412:1F5A,33413:2007,33414:1F6F,33415:1F02,33423:1F75,33424:1EE5,33425:1E6D,33433:209E,33434:1FD0,33435:1F35,33444:1FCC,33445:1EC5,33455:1EC5,33456:1EC2,34511:1FA8,34512:1F16,34513:1F15,34516:1F27,34523:1E67,34526:1E85,34533:1F2B,34534:1EC9,34536:1EC0,34566:1ED0,34567:1F4E." +
  "1|11123:2B0W|N:2014|11444:1C75,11445:1AD9,11455:1AED,11456:1A8D,12222:1E3F,12224:1BFA,12422:1BE8,12424:1B94,12425:1AD8,14422:1BA2,14424:1CB1,14425:1AFA,14522:1AE2,14524:1AE7,14526:1AAD,22223:1F41,22323:1DAE,22423:1C90,23423:1C02,24423:1C35,24523:1B79,44423:1D9F,44523:1B9F,45623:1B5B,11111:20F2,11112:2036,11113:212C,11114:1E17,11122:1FC7,11124:1E52,11132:2054,11134:1D81,11144:1D43,11145:1C27,11211:1F78,11212:1E53,11213:2041,11214:1D00,11221:1EB1,11222:1E5A,11223:1FA3,11224:1C82,11231:2023,11232:1ED4,11233:1EB6,11234:1D4F,11241:1CE5,11242:1C17,11243:1D82,11244:1C24,11245:1B5D,11411:1D53,11412:1CF8,11413:1D6A,11414:1C89,11415:1BBA,11422:1C6C,11423:1E84,11424:1C9D,11425:1BB3,11432:1D63,11434:1C24,11435:1B59,12211:1E90,12212:1E54,12213:1F05,12214:1C78,12221:1E16,12223:1E77,12231:1F24,12232:1E1C,12233:1D2E,12234:1C2C,12241:1C60,12242:1C1F,12243:1C3A,12244:1B8A,12245:1AF3,12311:2074,12312:1F0D,12313:1EB0,12314:1D95,12322:1DB2,12323:1D92,12324:1BF8,12332:1D6B,12334:1C23,12344:1C52,12345:1B92,12411:1D10,12412:1C59,12413:1D85,12414:1C4D,12415:1B99,12421:1C28,12423:1C93,12431:1D93,12432:1C2F,12433:1BFB,12434:1C3C,12435:1B84,12441:1C33,12442:1B84,12443:1C48,12444:1C13,12445:1ABE,12451:1B76,12452:1ADD,12453:1B73,12454:1ACB,12455:1ABD,12456:1A9D,14411:1C96,14412:1C50,14413:1C76,14414:1C68,14415:1AE2,14423:1D05,14432:1C8B,14434:1C4F,14435:1AE1,14444:1D3A,14445:1B38,14455:1AB8,14456:1A81,14511:1BCF,14512:1B8B,14513:1B88,14514:1AD5,14516:1AAA,14523:1C14,14532:1BB4,14534:1ADD,14536:1AC0,14544:1B3A,14545:1AB3,14546:1A6F,14566:1A82,14567:1A9B,22211:1F68,22212:1F7E,22213:1F1E,22214:1D16,22221:1F03,22222:1F83,22224:1CCD,22231:1F3A,22232:1EE6,22233:1DA1,22234:1C87,22241:1D09,22242:1D17,22243:1C86,22244:1C3B,22245:1B9D,22311:201B,22312:1F17,22313:1DE5,22314:1CF9,22321:1E82,22322:1E38,22324:1BFC,22331:1E4F,22332:1DA2,22333:1D4B,22334:1BF1,22341:1CF5,22342:1C5C,22343:1B91,22344:1BD9,22345:1B68,22411:1D22,22412:1CF3,22413:1CC4,22414:1C59,22415:1BBB,22421:1C5D,22422:1C96,22424:1BFC,22425:1B2A,22431:1D1A,22432:1C7C,22433:1B96,22434:1BE4,22435:1B85,22441:1C53,22442:1C1B,22443:1BD7,22444:1C0B,22445:1B03,22451:1BAC,22452:1B7B,22453:1B22,22454:1AFC,22455:1AF9,22456:1ACF,23411:1E5E,23412:1CF5,23413:1C74,23414:1D0F,23415:1C46,23422:1BE7,23424:1B96,23425:1B00,23432:1C0D,23434:1BDC,23435:1B67,23444:1C7A,23445:1B43,23455:1B59,23456:1B2E,24411:1D11,24412:1C60,24413:1CE3,24414:1D0C,24415:1BA4,24421:1BFB,24422:1BF2,24424:1C4D,24425:1AD5,24431:1D3E,24432:1C08,24433:1B9C,24434:1C95,24435:1B6F,24441:1CEB,24442:1C21,24443:1C92,24444:1D06,24445:1B68,24451:1B99,24452:1AFE,24453:1B15,24454:1B80,24455:1B09,24456:1AD4,24511:1C51,24512:1BB3,24513:1BDE,24514:1B94,24516:1B75,24521:1B4E,24522:1B14,24524:1AC9,24526:1AA6,24531:1C65,24532:1B93,24533:1B05,24534:1B56,24536:1B31,24541:1B85,24542:1AFE,24543:1B00,24544:1B4B,24545:1AF8,24546:1AB5,24561:1B5F,24562:1AC5,24563:1ABC,24564:1AC2,24566:1AB2,24567:1AE5,44411:1D23,44412:1D3A,44413:1D25,44414:1E21,44415:1BEC,44422:1C71,44424:1DEE,44425:1BB7,44432:1D03,44434:1D32,44435:1BB0,44444:1F4C,44445:1C66,44455:1BB8,44456:1B5C,44511:1B9D,44512:1BAA,44513:1B35,44514:1BD3,44515:1B4E,44516:1B0F,44522:1AD1,44524:1B85,44525:1B07,44526:1A97,44532:1BA1,44534:1B75,44535:1B0B,44536:1AD3,44544:1C67,44545:1B9E,44546:1B2D,44555:1B9D,44556:1ACC,44566:1AD7,44567:1AF0,45611:1B7E,45612:1B8A,45613:1B01,45614:1B12,45617:1B47,45622:1AAD,45624:1A89,45627:1AAB,45632:1B6C,45634:1AC9,45637:1AF3,45644:1B2E,45645:1ACC,45647:1AE5,45677:1AF9,45678:1BA1." +
  "1|11223:2B0W|N:1796|11111:1C12,11114:1984,11141:197B,11144:18EC,11145:1803,11441:18FE,11444:194D,11445:17B5,11451:180C,11454:179B,11456:1764,13333:1A65,13343:1852,13443:180F,13453:1777,14244:18C3,14245:1752,14254:173C,14256:172E,14333:185E,14343:17FB,14353:1767,14443:18E5,14453:1762,14553:1785,14563:1742,11112:1B88,11113:1BFC,11121:1BA4,11122:1B99,11123:1C3E,11124:196F,11131:1B0D,11132:1B69,11133:1AD1,11134:18F9,11142:1923,11143:1998,11221:1C8D,11224:1A72,11231:1B92,11232:1C22,11233:1B53,11234:1985,11241:1957,11242:199C,11243:1A49,11244:18F5,11245:1817,11331:1A45,11332:1ABC,11333:1ADB,11334:1890,11341:18F0,11342:1950,11343:18FF,11344:1892,11345:17D3,11442:18CF,11443:195C,11452:17F2,11453:1865,12111:1BA0,12112:1B7D,12113:1BD4,12114:1977,12121:1B4C,12123:1C87,12124:196E,12131:1BB4,12132:1C5E,12133:1AB4,12134:198A,12141:1944,12142:1971,12143:19A4,12144:18CF,12145:181F,12231:1C34,12232:1B8D,12233:1ACC,12234:1976,12241:1945,12242:1918,12243:19CE,12244:189B,12245:17EF,12331:1AEA,12332:1AFA,12333:1A3A,12334:18AD,12341:198B,12342:19A1,12343:1883,12344:1896,12345:17F8,12441:18BC,12442:18AC,12443:18BE,12444:1895,12445:175E,12451:1813,12452:1824,12453:1804,12454:174F,12456:1742,13111:1B0F,13112:1BB7,13113:1A45,13114:18F6,13131:1A22,13132:1AF2,13133:1A24,13134:186F,13141:1904,13142:1981,13143:1891,13144:1875,13145:17E0,13231:1AAB,13233:1A90,13234:18B5,13241:1982,13242:197A,13243:18D1,13244:18A5,13245:17F3,13331:1A26,13332:1A7D,13334:1864,13341:1877,13342:18AE,13344:17DD,13345:175F,13441:18A9,13442:18B1,13444:1878,13445:1759,13451:1809,13452:180C,13454:1748,13456:173F,14111:195C,14112:194B,14113:193F,14114:18B0,14115:180B,14131:18E3,14132:197A,14133:188A,14134:1877,14135:17DD,14141:1899,14142:18AF,14143:18C3,14144:18BB,14145:1782,14151:17EA,14152:1808,14153:1803,14154:1785,14155:1790,14156:174C,14241:18A0,14243:1905,14251:17ED,14253:184F,14331:1865,14332:18B8,14334:17F7,14335:176F,14341:1869,14342:18AB,14344:1869,14345:173F,14351:17DF,14352:180B,14354:1747,14355:1736,14356:172A,14441:18CF,14442:18A4,14444:1967,14445:17BA,14451:177F,14452:1746,14454:17B0,14455:173A,14456:1708,14551:179A,14552:1751,14554:1748,14555:17B7,14556:1710,14561:1756,14562:1735,14564:1711,14565:1704,14567:171F,22111:1C3D,22113:1C85,22114:1A53,22131:1D26,22132:1C7D,22133:1AEB,22134:1A2D,22141:1A22,22142:19F8,22143:19C7,22144:194B,22145:18C7,22331:1B8B,22332:1ABC,22333:1A3B,22334:1901,22341:1A29,22342:1972,22343:1880,22344:18E0,22345:1864,22441:1942,22442:18FE,22443:18C7,22444:18FF,22445:17E4,22451:18B5,22452:187F,22453:180A,22454:17DD,22456:17C8,23131:1B80,23133:1A94,23134:194C,23141:1A38,23142:1A28,23143:18C7,23144:1922,23145:1895,23331:1B3F,23332:1A8E,23333:1A51,23334:18D8,23341:1941,23342:18E6,23343:183C,23344:1850,23345:17CF,23441:1939,23442:18D8,23443:17FA,23444:18B3,23445:17A5,23451:18A0,23452:1862,23453:1779,23454:17AD,23456:17A9,24141:193E,24143:18F7,24144:193D,24145:17F7,24151:18AD,24153:183E,24154:17FF,24156:17D2,24331:194C,24332:1909,24333:185B,24334:1866,24335:17F2,24341:193D,24342:18D6,24343:17EE,24344:18B2,24345:17B3,24351:189C,24352:1867,24353:1776,24354:17B4,24355:17C5,24356:17A0,24441:193F,24442:18F0,24443:18BB,24444:1965,24445:17D3,24451:17F3,24452:17D8,24453:1750,24454:17D8,24455:175E,24456:1742,24551:17F7,24552:17D9,24553:1760,24554:176A,24555:17CD,24556:1742,24561:17D9,24562:17B2,24563:172C,24564:1759,24565:1743,24567:1778,33331:1AE7,33333:1B8C,33334:195C,33341:18EA,33342:18DF,33343:18F2,33344:186A,33345:17E9,33441:1876,33442:185E,33443:187F,33444:188E,33445:1791,33451:1800,33452:17F3,33453:17A8,33454:177F,33456:176C,34341:1857,34343:1860,34344:1871,34345:1784,34351:17E2,34353:17A1,34354:177A,34356:1761,34441:18DC,34442:18CC,34443:189A,34444:1939,34445:17DC,34451:17D0,34452:17B9,34453:1745,34454:17D5,34455:1773,34456:1747,34551:17D8,34552:17C4,34553:1752,34554:177C,34555:17D9,34556:175B,34561:17B3,34562:17A3,34563:173D,34564:175F,34565:1755,34567:1793,44441:1964,44443:1A1B,44444:1B4A,44445:18BA,44451:17CD,44452:17DF,44453:17E9,44454:18BB,44455:1812,44456:17AB,44551:176E,44553:17A5,44554:180F,44556:1773,44561:174A,44562:1754,44563:1721,44564:17BD,44565:176D,44567:179B,45451:176D,45453:178D,45454:1817,45456:1769,45461:173C,45463:171C,45464:17C6,45465:1768,45467:1790,45671:1780,45673:1749,45674:1796,45678:185E." +
  "1|11234:2B0W|N:1523|11111:179E,11115:1560,11155:14E1,11156:1434,11555:152D,11556:13C4,11567:13C9,12222:15F6,12225:1430,12255:13E9,12256:13A2,15222:143A,15225:13E9,15226:1395,15255:14B3,15256:1377,15266:138B,15267:1382,22224:1651,22233:1547,22235:1466,23232:153F,23235:1418,25224:145D,25233:1407,25235:1416,25236:1393,55224:1426,55235:150B,55236:13C1,56224:139A,56235:13B2,56237:13A0,11112:166A,11114:174F,11122:15B9,11123:1644,11124:16AB,11125:14BC,11133:1650,11134:17D6,11135:1537,11143:1641,11145:14B1,11222:1647,11223:15F2,11224:16DA,11225:14A9,11235:15F0,11243:1739,11245:150B,11255:14E6,11256:143E,11322:158D,11325:14C4,11342:1738,11345:14AE,11353:144C,11355:143D,11356:13D5,12111:167E,12112:15C3,12113:1686,12114:1669,12115:14DD,12122:15B2,12123:15D4,12124:15C2,12125:145C,12133:15A3,12134:1794,12135:14ED,12143:17A0,12145:14F1,12155:1470,12156:140D,12211:15DA,12212:15B5,12213:15B5,12214:1632,12215:146B,12223:155C,12224:15F1,12233:1562,12234:16E7,12235:1498,12243:15EB,12245:1424,12311:1677,12312:15C4,12313:15B3,12314:175F,12315:1506,12321:15C6,12322:1590,12323:1515,12324:15FC,12325:144B,12331:159B,12332:14EF,12333:154F,12334:160A,12335:1425,12341:1797,12342:1624,12343:1622,12344:15EC,12345:152C,12351:14F5,12352:143B,12353:1435,12354:1508,12355:1432,12356:13E9,12511:14CA,12512:1449,12513:14ED,12514:14D4,12515:143D,12516:13EB,12522:1451,12523:1448,12524:143C,12525:13CD,12526:138C,12533:141D,12534:1530,12535:1426,12536:13CB,12543:153A,12545:1427,12546:13F0,12555:1449,12556:1368,12566:1378,12567:1389,15111:157D,15112:14C2,15114:1502,15115:14B0,15116:1436,15122:1450,15123:14F6,15124:14ED,15125:144A,15126:13F8,15133:146B,15134:155C,15135:148A,15136:13FA,15143:14F6,15145:1453,15146:13F3,15155:14C3,15156:13AF,15166:13CE,15167:13B6,15223:142E,15224:148D,15234:163A,15235:14B3,15236:1431,15243:1520,15245:143D,15246:13CE,15322:1440,15325:144D,15326:13ED,15342:154A,15345:1436,15346:13F0,15353:13D3,15355:144D,15356:1370,15363:138E,15365:1367,15366:1363,15367:137C,15555:1561,15556:13D8,15566:136D,15567:136F,15666:13ED,15667:1364,15678:13D3,22111:163A,22112:1615,22113:165C,22114:15FA,22115:14D5,22122:1678,22123:161A,22124:15D0,22125:14CB,22133:1532,22134:163C,22135:1472,22143:1680,22145:14AE,22155:1457,22156:140F,22211:15A5,22212:15D3,22213:1596,22214:15AB,22215:1433,22222:1702,22223:158C,22225:14D4,22234:1655,22243:155F,22245:1412,22255:144F,22256:13DB,22311:165D,22312:1629,22313:1598,22314:1624,22315:14CA,22321:1616,22322:1600,22323:153B,22324:1573,22325:1476,22331:151F,22332:151E,22333:14ED,22334:150B,22335:13CC,22341:1680,22342:15B5,22343:1531,22344:14D2,22345:1468,22351:14AA,22352:1464,22353:141B,22354:1413,22355:13FE,22356:13CD,22511:14D7,22512:14B4,22513:14B4,22514:1458,22515:1436,22516:13EE,22522:151E,22523:1465,22524:1443,22525:1454,22526:13FB,22533:13B6,22534:145D,22535:13DA,22536:136E,22543:147D,22545:13EA,22546:13C6,22555:1450,22556:137E,22566:1397,22567:139E,23111:170F,23112:164F,23114:176B,23115:156F,23121:1649,23122:1618,23123:1598,23124:160C,23125:14AE,23131:15CC,23132:1523,23133:1589,23134:15EA,23135:1445,23141:17F8,23142:166D,23143:1675,23144:15F1,23145:1576,23151:1547,23152:14A7,23153:14A1,23154:14F9,23155:1492,23156:144B,23221:1572,23222:157C,23223:14E2,23224:156D,23225:13FC,23231:1525,23234:159B,23241:15F3,23242:152D,23243:14C6,23244:14F1,23245:1406,23251:142F,23252:13FD,23253:13B1,23254:1420,23255:13B0,23256:1370,23321:1592,23322:152D,23324:1515,23325:1436,23341:1678,23342:152F,23343:159B,23344:14C2,23345:145D,23351:149C,23352:140E,23353:1450,23354:1415,23355:13F4,23356:13B9,23441:1677,23442:1530,23444:153B,23445:1469,23451:1576,23452:144E,23453:1469,23454:13FE,23455:1459,23456:142F,23551:1483,23552:13E0,23554:1417,23555:1456,23556:13B7,23561:1450,23562:13B4,23564:13BE,23565:13A3,23567:13C1,25111:1538,25112:14BD,25113:155B,25114:14E0,25115:1491,25116:1449,25122:14B6,25123:14AA,25124:1457,25125:1434,25126:13E4,25133:143D,25134:1511,25135:1437,25136:13D3,25143:159C,25145:148F,25146:1445,25155:14AB,25156:13C1,25166:13CC,25167:13E1,25211:1466,25212:1423,25213:1446,25214:1440,25215:13C8,25216:138D,25222:14CA,25223:140A,25225:1438,25226:13C4,25234:14CF,25243:143B,25245:13BA,25246:137E,25255:1483,25256:137B,25266:1379,25267:138D,25311:155B,25312:14B5,25313:14AC,25314:1504,25315:14A8,25316:1454,25321:14A5,25322:1465,25323:142F,25324:1419,25325:140C,25326:13CB,25331:1429,25332:13BE,25333:13FB,25334:142C,25335:13C0,25336:137D,25341:158D,25342:1480,25343:1479,25344:1415,25345:1457,25346:143A,25351:1481,25352:13E9,25353:13F3,25354:140E,25355:1457,25356:13C1,25361:1448,25362:13BD,25363:13B6,25364:13C1,25365:13BC,25366:13B6,25367:13BA,25511:148F,25512:142B,25513:1494,25514:1423,25515:147B,25516:13AE,25522:1456,25523:13FC,25524:13C7,25525:1442,25526:1382,25533:13A8,25534:144D,25535:143E,25536:135C,25543:1468,25545:1457,25546:13B0,25555:14F4,25556:13C2,25566:1387,25567:138C,25611:144A,25612:13DD,25613:1445,25614:13C5,25615:13B2,25616:13A9,25617:13C6,25622:13FC,25623:13BF,25624:136A,25625:1388,25626:137D,25627:1389,25633:136C,25634:13D7,25635:135F,25636:1360,25637:134D,25643:1436,25645:13AB,25646:13B2,25647:13B4,25655:13E7,25656:1379,25657:1382,25666:13D1,25667:1384,25677:138A,25678:13D8,55111:14FE,55112:149A,55114:146C,55115:14D8,55116:13EC,55122:143C,55123:14B5,55124:144E,55125:1497,55126:13C6,55133:13E3,55134:1466,55135:146B,55136:1356,55143:14AB,55145:148F,55146:13B5,55155:152C,55156:13C9,55166:1384,55167:138F,55222:1445,55223:13D6,55225:147F,55226:1379,55234:153C,55243:144C,55245:1455,55246:1378,55255:15A8,55256:13EA,55266:1387,55267:136B,55322:140D,55325:1495,55326:13F4,55342:14A3,55345:1467,55346:13CD,55353:1465,55355:14FC,55356:13D4,55363:1397,55365:13F0,55366:138E,55367:1387,55555:16D8,55556:1496,55566:140B,55567:13F3,55666:140C,55667:13A5,55678:1427,56111:14AA,56112:1458,56114:1401,56115:13F3,56117:1402,56122:13F6,56123:145F,56124:13D7,56125:13C0,56127:13D8,56133:1394,56134:13E4,56135:1359,56137:136A,56143:1461,56145:13B3,56147:13E0,56155:13D8,56156:1375,56157:1384,56177:13A7,56178:13F5,56222:13CA,56223:1392,56225:1375,56227:1387,56234:14A3,56243:13EF,56245:136D,56247:1360,56255:13F0,56256:1381,56257:135B,56277:136B,56278:13B6,56322:13DB,56325:13E0,56327:13E6,56342:145F,56345:13B9,56347:13B9,56353:1383,56355:13CB,56356:1380,56357:137A,56373:1394,56375:1385,56377:138D,56378:13D0,56555:14B7,56556:140A,56557:13F4,56567:13A2,56577:13A6,56578:1410,56777:1408,56778:141C." +
  "1|12345:2B0W|N:1250|11115:120F,11144:112F,11146:106B,11336:104A,11366:1038,11367:FF1,12666:1102,12667:FE9,12678:1044,11111:12CD,11112:1160,11116:10F4,11122:10D8,11123:10F3,11124:10E2,11125:1111,11126:102E,11145:11D5,11154:1108,11156:1037,11166:1069,11167:1036,11222:1116,11223:108A,11225:10BB,11226:100C,11233:1094,11234:1146,11235:1127,11236:1029,11244:10B8,11245:1183,11246:1032,11254:1146,11256:1034,11266:FFE,11267:FE3,11335:114C,11345:1285,11346:109E,11354:112F,11356:101B,11433:1092,11436:1030,11453:115C,11456:101B,11464:1007,11466:FE3,11467:FD1,11666:109A,11667:FE3,11678:104E,12346:11DF,12354:12C8,12356:1101,12366:10E4,12367:1079,12433:1127,12436:10AA,12453:12B8,12456:109A,12464:104A,12466:102A,12467:FF4,13222:10FF,13223:10C0,13224:1127,13226:100B,13254:12C5,13256:10A0,13266:1025,13267:FF8,13422:111F,13426:10BE,13452:12C3,13456:109C,13463:1006,13464:1006,13466:FFB,13467:FDB,13633:106B,13636:FF0,13637:FB9,13656:1010,13657:FED,13666:1051,13667:F95,13677:FA9,13678:FE2,16666:11A8,16667:1024,16677:FCA,16678:FFD,21111:11BF,21112:1125,21113:113D,21116:107C,21123:10EB,21126:1051,21133:10E4,21134:1195,21136:106E,21154:1193,21156:1060,21166:1029,21167:1011,21436:1141,21453:133C,21456:1115,21464:1071,21466:1057,21467:1045,21666:10B2,21667:100E,21678:1064,23111:1142,23112:10DF,23114:1198,23116:106D,23156:111B,23166:107F,23167:1060,23411:1192,23416:112E,23451:133F,23456:1110,23462:106F,23463:1066,23464:1063,23466:104D,23467:1043,23622:1081,23623:103E,23626:1024,23627:FFF,23633:1074,23634:106E,23636:1019,23637:FFA,23656:1051,23657:1041,23666:1072,23667:FE4,23677:FEA,23678:103D,26222:1146,26226:107C,26227:105D,26256:1013,26257:FFD,26266:1073,26267:FD4,26277:FE6,26278:102B,26466:1073,26467:FEE,26476:FE1,26478:1040,26666:10FE,26667:1004,26677:FC9,26678:100A,26777:1032,26778:100A,66666:12B3,66667:10D7,66677:1052,66678:109D,66778:1046.";
precalculated_games_5columns_1st_level[1][3] =
  "1|11223:1B3W|N:296|12112:3FF,12131:3EC,12134:36C,12142:37F,12331:3C7,12332:3C7,12341:36C,12342:36F,13112:3F6,13132:3C5,13142:370,14132:36D,22133:3C1,22143:37F,11111:45C,11112:424,11113:423,11114:39A,11121:414,11122:40E,11123:410,11124:380,11131:40E,11132:3ED,11133:3BF,11134:36E,11141:393,11142:36B,11143:379,11144:386,11145:338,11221:42C,11224:3E1,11231:409,11232:435,11233:3ED,11234:38A,11241:387,11242:38F,11243:3B2,11244:3A4,11245:351,11331:3C2,11332:3E2,11333:3E5,11334:368,11341:373,11342:379,11343:360,11344:38E,11345:32F,11441:38E,11442:38F,11443:3A7,11444:3AC,11445:351,11451:33C,11452:330,11453:34B,11454:351,11456:32C,12111:40D,12113:3F8,12114:363,12121:40A,12123:430,12124:387,12132:423,12133:3C3,12141:367,12143:36B,12144:373,12145:31D,12231:42A,12232:3F3,12233:3CC,12234:373,12241:37F,12242:36D,12243:37F,12244:382,12245:326,12333:3D5,12334:358,12343:351,12344:381,12345:325,12441:381,12442:384,12443:389,12444:3A7,12445:34C,12451:324,12452:327,12453:330,12454:34D,12456:32C,13111:413,13113:3B9,13114:36D,13131:3BC,13133:3D3,13134:351,13141:36F,13143:354,13144:380,13145:327,13231:3CE,13233:3EA,13234:35C,13241:375,13242:377,13243:364,13244:389,13245:333,13331:3CE,13332:3DA,13333:3F1,13334:361,13341:34C,13342:34D,13343:363,13344:360,13345:322,13441:385,13442:386,13443:36C,13444:399,13445:345,13451:32B,13452:32E,13453:32B,13454:343,13456:32C,14111:3A1,14112:36F,14113:378,14114:385,14115:333,14131:369,14133:34F,14134:386,14135:324,14141:382,14142:37C,14143:385,14144:391,14145:33A,14151:32F,14152:322,14153:329,14154:33A,14155:339,14156:31C,14241:381,14243:39E,14244:3BB,14245:361,14251:328,14253:347,14254:35F,14256:341,14331:34A,14332:351,14333:362,14334:360,14335:31F,14341:37F,14342:37F,14343:362,14344:391,14345:33E,14351:326,14352:328,14353:325,14354:33D,14355:33A,14356:323,14441:396,14442:3AD,14443:3A3,14444:3CF,14445:376,14451:341,14452:34F,14453:34E,14454:375,14455:373,14456:355,14551:340,14552:34E,14553:34C,14554:373,14555:375,14556:356,14561:327,14562:32F,14563:334,14564:357,14565:357,14567:365,22111:425,22113:444,22114:3B6,22131:41A,22132:405,22134:371,22141:381,22142:381,22144:387,22145:333,22331:3DD,22332:3CB,22333:3D3,22334:359,22341:368,22342:37B,22343:345,22344:37E,22345:322,22441:389,22442:39A,22443:38F,22444:398,22445:343,22451:32E,22452:346,22453:332,22454:343,22456:322,23131:3D2,23133:3D5,23134:352,23141:36F,23142:369,23143:348,23144:377,23145:326,23331:3DB,23332:3CC,23333:3EE,23334:362,23341:34F,23342:349,23343:358,23344:359,23345:321,23441:37E,23442:378,23443:35F,23444:38D,23445:339,23451:325,23452:325,23453:320,23454:338,23456:31D,24141:37A,24143:38C,24144:3A5,24145:34B,24151:322,24153:32D,24154:349,24156:32B,24331:34E,24332:34C,24333:35A,24334:363,24335:323,24341:378,24342:37C,24343:359,24344:389,24345:337,24351:322,24352:324,24353:31D,24354:338,24355:338,24356:322,24441:39E,24442:392,24443:397,24444:3C4,24445:36B,24451:342,24452:33B,24453:342,24454:36B,24455:36B,24456:346,24551:340,24552:33B,24553:340,24554:36A,24555:36B,24556:348,24561:327,24562:323,24563:327,24564:347,24565:347,24567:35B,33331:3FE,33333:43A,33334:3AC,33341:362,33342:35E,33343:38F,33344:37F,33345:341,33441:374,33442:36B,33443:37F,33444:37F,33445:341,33451:328,33452:31E,33453:341,33454:340,33456:339,34341:35C,34343:377,34344:377,34345:33B,34351:31E,34353:33C,34354:33B,34356:334,34441:393,34442:396,34443:37F,34444:3BA,34445:365,34451:33A,34452:33E,34453:341,34454:365,34455:364,34456:34A,34551:33E,34552:341,34553:344,34554:366,34555:367,34556:34C,34561:320,34562:325,34563:340,34564:34C,34565:34B,34567:360,44441:3CE,44443:3DB,44444:412,44445:3B1,44451:372,44452:372,44453:37B,44454:3AD,44455:3A7,44456:38C,44551:373,44553:37C,44554:3A7,44556:38A,44561:352,44562:354,44563:363,44564:38B,44565:388,44567:394,45451:371,45453:37C,45454:3A7,45456:388,45461:351,45463:364,45464:38B,45465:387,45467:390,45671:362,45673:377,45674:391,45678:3CB." +
  "1|11234:1B3W|N:652|12113:8C9,12123:88D,12145:817,12311:8C9,12312:88E,12313:880,12315:814,12321:88F,12342:87D,12343:874,12345:800,12351:811,12513:80D,12543:80E,15123:816,15143:822,15342:81C,22114:8A2,22314:891,23124:88E,23131:87A,23144:86F,23154:816,23241:876,25114:821,25314:814,11111:9F8,11112:8F3,11114:909,11115:88F,11122:863,11123:8D7,11124:8F6,11125:802,11133:879,11134:93A,11135:827,11143:8E2,11145:7F7,11155:85A,11156:7EC,11222:8B8,11223:8AF,11224:90E,11225:804,11235:8F2,11243:978,11245:850,11255:884,11256:81F,11322:892,11325:812,11342:95B,11345:80E,11353:7DA,11355:81B,11356:7B2,11555:89B,11556:819,11567:7F3,12111:8F3,12112:858,12114:8D0,12115:7E5,12122:889,12124:88C,12125:7C4,12133:88C,12134:971,12135:817,12143:955,12155:813,12156:7B3,12211:855,12212:88C,12213:89A,12214:899,12215:7C6,12222:8F1,12223:889,12224:8A1,12225:801,12233:83D,12234:8ED,12235:7EC,12243:89F,12245:7CB,12255:812,12256:7BE,12314:95C,12322:872,12323:810,12324:885,12325:7AA,12331:891,12332:80E,12333:886,12334:896,12335:7BC,12341:947,12344:88E,12352:7A4,12353:7AF,12354:810,12355:806,12356:797,12511:7EB,12512:7C5,12514:814,12515:808,12516:7A8,12522:805,12523:7B0,12524:7C0,12525:7F9,12526:7A0,12533:7BE,12534:83D,12535:817,12536:7AA,12545:808,12546:79A,12555:860,12556:7E1,12566:7E8,12567:7C4,15111:893,15112:7ED,15114:7FC,15115:83C,15116:7D8,15122:7C0,15124:818,15125:812,15126:7A7,15133:7C9,15134:837,15135:81A,15136:7B0,15145:814,15146:7AF,15155:867,15156:7F0,15166:7F2,15167:7C5,15222:807,15223:7BE,15224:7EB,15225:80B,15226:7B6,15234:8B9,15235:854,15236:7F0,15243:81A,15245:819,15246:7AC,15255:87B,15256:802,15266:804,15267:7E5,15322:7A5,15325:80A,15326:793,15345:807,15346:795,15353:7FD,15355:85D,15356:7E0,15363:7A3,15365:7E0,15366:7DF,15367:7BC,15555:90E,15556:87C,15566:876,15567:848,15666:884,15667:849,15678:872,22111:889,22112:899,22113:88D,22115:7D7,22122:8F7,22123:877,22124:88C,22125:800,22133:804,22134:8A9,22135:7B8,22143:8AE,22145:7C0,22155:804,22156:7B6,22211:887,22212:8EC,22213:87C,22214:884,22215:800,22222:9C2,22223:8C8,22224:8E4,22225:885,22233:845,22234:8CC,22235:800,22243:8C0,22245:7F4,22255:860,22256:811,22311:893,22312:890,22313:81A,22315:7BE,22321:88B,22322:8DD,22323:845,22324:8A5,22325:7E9,22331:813,22332:835,22333:834,22334:83D,22335:7AF,22341:885,22342:8A5,22343:838,22344:833,22345:7E0,22351:7BD,22352:7E4,22353:7AE,22354:7EB,22355:7EE,22356:7AE,22511:7DF,22512:80B,22513:7C1,22514:7CD,22515:80B,22516:7B9,22522:8A5,22523:7EC,22524:7FB,22525:85A,22526:80F,22533:7AB,22534:805,22535:807,22536:7BE,22543:7F9,22545:7EF,22546:7B0,22555:85A,22556:80D,22566:811,22567:802,23111:8F7,23112:88A,23114:958,23115:827,23121:88B,23122:87C,23123:81C,23125:7B9,23132:80F,23133:86B,23134:884,23135:7B3,23141:947,23142:873,23143:87B,23145:7FD,23151:80D,23152:7B7,23153:7C1,23155:80F,23156:7A7,23221:871,23222:8D0,23223:842,23224:8B1,23225:7EA,23231:814,23232:845,23234:85E,23235:7CC,23242:89B,23243:83B,23244:846,23245:7EA,23251:7B5,23252:7E9,23253:7B3,23254:800,23255:7FD,23256:7BF,23321:825,23322:845,23324:84E,23325:7B2,23341:87B,23342:83A,23343:89C,23344:834,23345:7D7,23351:7B7,23352:7B1,23353:7F4,23354:7EA,23355:7ED,23356:7AF,23441:87C,23442:837,23444:89D,23445:7E1,23451:7FF,23452:7DD,23453:7DC,23454:7E2,23455:835,23456:7CD,23551:80D,23552:7F4,23554:85D,23555:851,23556:7FB,23561:7AE,23562:7B3,23564:7F3,23565:7FA,23567:7DF,25111:81B,25112:7CC,25113:80F,25115:818,25116:7B5,25122:7FF,25123:7B8,25124:7BB,25125:7F9,25126:7AA,25133:7AE,25134:826,25135:814,25136:7AE,25143:815,25145:807,25146:7A3,25155:868,25156:7F1,25166:7F3,25167:7D9,25211:7CF,25212:7FB,25213:7C3,25214:7C3,25215:805,25216:7B6,25222:88C,25223:7EB,25224:803,25225:854,25226:806,25233:7C1,25234:81A,25235:817,25236:7D1,25243:7F9,25245:7FD,25246:7BC,25255:865,25256:817,25266:81B,25267:81B,25311:81B,25312:7BC,25313:7B6,25315:810,25316:7AA,25321:7C3,25322:7E5,25323:7A9,25324:7E5,25325:7E8,25326:7A9,25331:7B3,25332:7AB,25333:7E9,25334:7EF,25335:7F4,25336:7B0,25341:807,25342:7E1,25343:7D8,25344:7EA,25345:83C,25346:7D0,25351:809,25352:7E7,25353:7ED,25354:84F,25355:84A,25356:7EA,25361:7A1,25362:7A7,25363:7AB,25364:7DD,25365:7E9,25366:7E9,25367:7CE,25511:81D,25512:800,25513:80B,25514:81B,25515:862,25516:7EF,25522:865,25523:7EB,25524:7FD,25525:854,25526:808,25533:7F5,25534:876,25535:86D,25536:804,25543:83F,25545:84C,25546:7E9,25555:8CF,25556:855,25566:855,25567:833,25611:7BA,25612:7B2,25613:7A1,25614:7AD,25615:7ED,25616:7ED,25617:7D6,25622:813,25623:7A9,25624:7B9,25625:805,25626:806,25627:7FE,25633:7B3,25634:806,25635:806,25636:807,25637:7E8,25643:7D4,25645:7E8,25646:7E8,25647:7D2,25655:85B,25656:852,25657:835,25666:858,25667:833,25677:836,25678:853,55111:87B,55112:815,55114:82F,55115:878,55116:805,55122:800,55123:80F,55124:81B,55125:85F,55126:7E8,55133:7FF,55134:83A,55135:87B,55136:7FD,55143:821,55145:85E,55146:7E8,55155:90B,55156:879,55166:876,55167:84F,55222:85A,55223:7F4,55224:80F,55225:85A,55226:811,55234:89F,55235:88A,55236:825,55243:854,55245:86E,55246:804,55255:8EE,55256:86F,55266:86B,55267:851,55322:7E8,55325:853,55326:7E9,55342:85C,55345:856,55346:7EC,55353:860,55355:8CE,55356:852,55363:80E,55365:850,55366:84E,55367:82C,55555:9C8,55556:90E,55566:8F8,55567:8C7,55666:8FC,55667:8C4,55678:8E1,56111:816,56112:7B6,56114:7C3,56115:806,56117:7D2,56122:7AF,56123:7A1,56124:7AF,56125:7E8,56127:7CD,56133:7AD,56134:7CC,56135:7FD,56137:7E5,56143:7B3,56145:7E8,56147:7CF,56155:878,56156:877,56157:850,56177:852,56178:874,56222:80B,56223:7B5,56224:7D2,56225:810,56227:80D,56234:839,56235:827,56237:807,56243:7E9,56245:802,56247:7E4,56255:86E,56256:869,56257:850,56277:852,56278:873,56322:7A9,56325:7E9,56327:7CC,56342:7EA,56345:7EC,56347:7D1,56353:80E,56355:853,56356:84E,56357:82C,56373:804,56375:82C,56377:82F,56378:84B,56555:914,56556:8F8,56557:8C8,56567:8C6,56577:8C4,56578:8DE,56777:8CB,56778:8DB." +
  "1|12345:1B3W|N:1120|11234:F62,11254:F6B,11453:F76,13224:F60,13256:F1C,13422:F67,13426:F2C,13456:F1F,11111:11F8,11112:FD1,11115:FD3,11116:1001,11122:ED6,11123:F2C,11124:F19,11125:F26,11126:EA7,11144:ED4,11145:F56,11146:EAC,11154:F2B,11156:EB0,11166:F8F,11167:F23,11222:EE9,11223:E8F,11225:E8E,11226:E4B,11233:E94,11235:F59,11236:E68,11244:E96,11245:F7D,11246:E5E,11256:E6E,11266:EAE,11267:E6A,11335:ECC,11336:E51,11345:104A,11346:EAE,11354:F62,11356:E67,11366:EB6,11367:E70,11433:E8A,11436:E69,11456:E6B,11464:E48,11466:EA8,11467:E67,11666:F91,11667:F1D,11678:F2E,12346:106F,12354:10D9,12356:F3E,12366:F5A,12367:EDE,12433:F54,12436:EFA,12453:10DA,12456:F08,12464:E69,12466:ED9,12467:E69,12666:F5C,12667:ED3,12678:EC3,13222:F1A,13223:EA5,13226:E57,13254:1107,13266:F00,13267:E91,13452:1103,13463:E5C,13464:E67,13466:EF1,13467:E83,13633:EAF,13636:EAB,13637:E64,13656:EF5,13657:E8F,13666:F4E,13667:ECF,13677:ED3,13678:EB6,16666:1073,16667:FA8,16677:F9F,16678:F6E,21111:FBF,21112:ED4,21113:F26,21116:EB0,21123:EB4,21126:E62,21133:EBD,21134:F6F,21136:E88,21154:F91,21156:E83,21166:EBF,21167:E7B,21436:F54,21453:10F2,21456:F30,21464:EA8,21466:F07,21467:EA7,21666:F75,21667:EF4,21678:EE4,23111:F2E,23112:EA7,23114:F73,23116:E80,23156:F40,23166:F25,23167:EBC,23411:F83,23416:F48,23451:1106,23456:F2F,23462:E8C,23463:E82,23464:E83,23466:F09,23467:EA7,23622:EAD,23623:E5C,23626:EBD,23627:E77,23633:EBD,23634:E95,23636:EBE,23637:E80,23656:EFE,23657:EA4,23666:F5F,23667:EEE,23677:EEF,23678:EDC,26222:FFA,26226:F91,26227:F27,26256:EC9,26257:E86,26266:F8F,26267:F2B,26277:F2D,26278:F37,26466:F5E,26467:EF1,26476:EEB,26478:ED6,26666:107C,26667:FBC,26677:FB2,26678:F8B,26777:FBE,26778:F8C,66666:126C,66667:112D,66677:10F5,66678:109A,66778:1092.";
precalculated_games_5columns_1st_level[1][2] =
  "1|11112:1B2W|N:508|12221:7B1,12231:6E0,12331:729,12341:6AF,11113:829,11121:834,11122:7C7,11123:77E,11131:7A5,11132:7A5,11133:776,11134:702,11221:7C3,11222:7AD,11223:6F9,11231:74F,11232:6DE,11233:71A,11234:698,11331:74D,11332:74D,11333:74D,11334:6A3,11341:6BD,11342:6BD,11343:693,11345:650,12222:7B2,12223:6F2,12232:6D0,12233:6B9,12234:64A,12332:6C9,12333:72A,12334:68A,12342:664,12343:683,12345:645,13331:776,13332:776,13333:776,13334:6D9,13341:6BC,13342:6BC,13343:6BC,13344:69D,13345:659,13451:673,13452:673,13453:65C,13456:651,22221:844,22222:844,22223:7AB,22231:727,22232:727,22233:6F9,22234:69C,22331:6DD,22332:6D0,22333:6DD,22334:656,22341:66E,22342:662,22343:64E,22345:629,23331:77E,23332:709,23333:77E,23334:6D5,23341:6BA,23342:673,23343:6BA,23344:69C,23345:65D,23451:67B,23452:64D,23453:663,23456:651,33331:801,33332:801,33333:801,33334:77B,33341:722,33342:722,33343:722,33344:705,33345:6C2,33441:6F8,33442:6F8,33443:6F8,33445:69D,33451:6A7,33452:6A7,33453:6A7,33454:693,33456:682,34561:69F,34562:69F,34563:690,34567:6A8." +
  "1|11122:1B2W|N:902|12233:BDB,12234:B32,12313:BCD,12314:B1D,13311:C1E,13411:B69,22212:DB4,22312:BFB,23312:BD4,23412:B26,11111:E43,11112:E0A,11113:CA4,11123:D08,11133:C85,11134:BD4,11211:DC0,11212:DB4,11213:C2D,11222:DB4,11223:C79,11233:C00,11234:B3D,11311:C88,11312:C6A,11313:BEA,11314:B47,11322:CDA,11323:C2A,11324:B87,11333:C3F,11334:B44,11344:B47,11345:AE4,12211:DF7,12212:D85,12213:C5D,12222:D85,12223:BFB,12311:C52,12312:C5B,12322:C09,12323:BD4,12324:B2A,12333:C25,12334:B2B,12344:B2B,12345:ACB,13312:BF3,13313:C13,13314:B28,13322:C1B,13323:C59,13324:B62,13333:CB5,13334:B97,13344:B6F,13345:B07,13412:B40,13413:B1E,13415:AB7,13422:B78,13423:B58,13425:B03,13433:B98,13434:B64,13435:B01,13455:B0A,13456:AFF,22211:E51,22213:C6D,22222:E16,22223:C95,22233:C47,22234:B9E,22311:CDF,22313:BD8,22314:B3B,22322:C59,22323:BE4,22324:B43,22333:C0A,22334:B26,22344:B2C,22345:AD3,23311:C2E,23313:C3B,23314:B44,23322:BF0,23323:C0F,23324:B2A,23333:C82,23334:B78,23344:B4F,23345:AF7,23411:B7B,23413:B3A,23415:AE1,23422:B3F,23423:B24,23425:ABE,23433:B75,23434:B3E,23435:AEC,23455:AF8,23456:AF2,33311:C90,33312:C7F,33313:CC7,33314:BC7,33322:C7E,33323:CC3,33324:BC5,33333:D4B,33334:C24,33344:BFD,33345:B8C,33411:B61,33412:B50,33413:B9D,33414:B69,33415:B16,33422:B76,33423:BA8,33424:B6F,33425:B2B,33433:C11,33434:BD0,33435:B6B,33444:BD0,33445:B53,33455:B5B,33456:B56,34511:B1C,34512:AF7,34513:B11,34516:B07,34522:B20,34523:B2A,34526:B28,34533:B6D,34534:B4B,34536:B4C,34566:B59,34567:BA2." +
  "1|11123:1B2W|N:1892|12212:1B23,12214:1964,12232:1ACB,12234:190E,12241:1982,12332:1A09,12334:18FF,12344:196D,12345:18C7,12412:1942,12414:19A0,12415:18C8,12432:18F6,12434:196A,12435:18A4,12441:19B3,12451:18DB,14411:1A3E,14412:19C3,14432:19A6,14511:194D,14512:18DE,14532:18CC,22213:1BB3,22313:1A2C,22321:1AFD,22413:1999,23413:1960,24413:1A1B,24513:1945,11111:1E9A,11112:1D18,11113:1D7E,11114:1BB7,11122:1C86,11124:1C73,11132:1DB3,11134:1B35,11144:1B26,11145:1A67,11211:1C91,11212:1B49,11213:1D22,11214:1A2B,11221:1B4D,11222:1B6F,11223:1C9A,11224:19C8,11231:1D0D,11232:1BBA,11233:1BF3,11234:1ABF,11241:1A36,11242:1968,11243:1B3A,11244:19C3,11245:18F5,11411:1B14,11412:1A3E,11413:1A81,11414:1A17,11415:1921,11422:19C7,11423:1C44,11424:1A63,11425:19A7,11432:1AE0,11434:19DC,11435:18F9,11444:1A6C,11445:1919,11455:191B,11456:18B5,12211:1B71,12213:1BD3,12221:1B2C,12222:1BB4,12223:1B45,12224:19B0,12231:1BE1,12233:1A0D,12242:1980,12243:1950,12244:1923,12245:1870,12311:1D16,12312:1B97,12313:1BB6,12314:1AAE,12322:1ACC,12323:1A6F,12324:1947,12411:1A43,12413:1ACB,12421:196A,12422:1988,12423:1999,12424:1946,12425:189C,12431:1AB7,12433:192A,12442:190C,12443:19B6,12444:19FD,12445:18C3,12452:1860,12453:18F7,12454:18BC,12455:18B5,12456:187C,14413:19FD,14414:1A40,14415:18E7,14422:193E,14423:1A3B,14424:1A4C,14425:1913,14434:1A14,14435:18CF,14444:1BC5,14445:19DA,14455:1980,14456:192D,14513:192B,14514:18D9,14516:1876,14522:189C,14523:1989,14524:190A,14526:18D4,14534:18B8,14536:1874,14544:19DC,14545:197D,14546:1917,14566:191E,14567:195D,22211:1C58,22212:1C55,22214:19F7,22221:1C27,22222:1DC4,22223:1C06,22224:1ABF,22231:1BB8,22232:1BEE,22233:1A8C,22234:19C2,22241:1A3E,22242:1B2F,22243:19EC,22244:19F0,22245:1935,22311:1C3E,22312:1B2A,22314:194C,22322:1B8A,22323:1A70,22324:199E,22331:1A4C,22332:1A71,22333:1A4F,22334:18D1,22341:1966,22342:1999,22343:18FF,22344:191B,22345:1895,22411:1A05,22412:19EA,22414:1959,22415:1891,22421:19C6,22422:1AA3,22423:19D7,22424:19CF,22425:1925,22431:1980,22432:198D,22433:18F5,22434:1925,22435:187E,22441:1970,22442:19ED,22443:196E,22444:19DA,22445:18D9,22451:18AB,22452:1923,22453:18CD,22454:18CB,22455:18D1,22456:189F,23411:1B34,23412:1942,23414:199E,23415:18F1,23422:197B,23423:1943,23424:1950,23425:18BB,23432:18E4,23434:1913,23435:1868,23444:1A17,23445:18FA,23455:18F4,23456:18CB,24411:1A2C,24412:1965,24414:1A53,24415:1912,24421:1989,24422:19C8,24423:19BA,24424:1A06,24425:190C,24431:19AC,24432:1921,24433:1950,24434:1A20,24435:18F5,24441:1A51,24442:19E5,24443:1A9E,24444:1B1A,24445:19A5,24451:1901,24452:18CB,24453:195D,24454:199A,24455:193D,24456:1904,24511:1958,24512:1899,24514:1903,24516:18C2,24521:18CD,24522:1912,24523:1926,24524:1904,24526:18DC,24531:18FE,24532:1871,24533:18AB,24534:18DE,24536:18A2,24541:18F8,24542:18C5,24543:1959,24544:198E,24545:193A,24546:18F7,24561:18B7,24562:1896,24563:1908,24564:18F7,24566:18F8,24567:1936,44411:1B12,44412:1A86,44413:1AEF,44414:1C1B,44415:1A32,44422:1A06,44423:1B37,44424:1BA8,44425:1A1D,44432:1A8A,44434:1B36,44435:19C0,44444:1D9A,44445:1B25,44455:1A9C,44456:1A3B,44511:197D,44512:1918,44513:1962,44514:1A0C,44515:19A5,44516:195E,44522:18EC,44523:19F0,44524:1A0A,44525:19A6,44526:1973,44532:1912,44534:1993,44535:1943,44536:18ED,44544:1B08,44545:1A7E,44546:1A19,44555:1A78,44556:19E9,44566:19E6,44567:1A03,45611:1938,45612:18C4,45613:1929,45614:1951,45617:1994,45622:18C7,45623:19A7,45624:1975,45627:19A4,45632:18CE,45634:18EA,45637:1918,45644:1A10,45645:19E3,45647:19F4,45677:1A04,45678:1AAD." +
  "1|11223:1B2W|N:2400|12111:238A,12114:20BB,12141:20B9,12144:2070,12145:1FA8,12334:206A,12344:20F4,12345:201F,12441:208B,12442:209C,12451:1FCE,12452:1FB3,13111:2341,13114:2093,13131:219B,13134:1FE7,13141:205F,13144:2040,13145:1F6C,13331:21F2,13332:2242,13341:1FCD,13342:204F,13441:205E,13442:20F8,13451:1F82,13452:2024,14112:20F2,14131:2089,14134:204B,14135:1F77,14142:2099,14152:1FCA,14331:1FF6,14332:204F,14341:2052,14342:20E4,14351:1F6A,14352:200B,22333:21E2,22343:1FEC,22443:20A9,22453:1FB2,23133:2272,23143:207A,24143:213F,24153:2064,11111:25A3,11112:2396,11113:236B,11114:21B8,11121:2393,11122:235B,11123:2454,11124:2132,11131:231B,11132:232A,11133:21EC,11134:20A4,11141:21CB,11142:20B5,11143:2125,11144:20C5,11145:1FD0,11221:2479,11224:23E5,11231:2393,11232:250B,11233:23D0,11234:21F7,11241:2148,11242:219E,11243:236B,11244:215B,11245:2099,11331:21CA,11332:2274,11333:2249,11334:2035,11341:2092,11342:2134,11343:2095,11344:20A0,11345:1FA6,11441:20E0,11442:20B0,11443:216E,11444:217E,11445:2009,11451:1FE6,11452:1FC2,11453:208F,11454:2001,11456:1FA4,12112:2345,12113:234D,12121:232E,12123:251A,12124:2142,12131:2322,12132:24AF,12133:2261,12134:2134,12142:2123,12143:2163,12231:24D1,12232:2322,12233:22C4,12234:2152,12241:2131,12242:20C0,12243:21D0,12244:20A8,12245:1FCD,12331:2270,12332:2258,12333:226D,12341:2148,12342:2124,12343:2088,12443:213C,12444:216F,12445:1FEE,12453:2052,12454:1FE9,12456:1FA4,13112:2349,13113:21BA,13132:2262,13133:21D5,13142:214C,13143:1FFC,13231:2273,13233:22D3,13234:2084,13241:214F,13242:215B,13243:20F4,13244:210A,13245:2034,13333:230E,13334:20B0,13343:20B2,13344:2024,13345:1F80,13443:2083,13444:2157,13445:2014,13453:1FCB,13454:1FFF,13456:1FB5,14111:21E0,14113:20C7,14114:20B3,14115:1FC4,14132:213A,14133:2005,14141:20B1,14143:20A2,14144:2109,14145:1FB5,14151:1FB0,14153:1FBF,14154:1FB4,14155:1FB3,14156:1F5A,14241:20AD,14243:21C4,14244:218D,14245:2009,14251:1FDC,14253:2102,14254:2007,14256:1FCC,14333:20C4,14334:2045,14335:1F78,14343:206E,14344:214D,14345:1FED,14353:1FBE,14354:1FEA,14355:1FE8,14356:1FA6,14441:2113,14442:2172,14443:21AE,14444:22D5,14445:20E9,14451:1FB0,14452:1FE0,14453:2058,14454:20D7,14455:207C,14456:2036,14551:1FC5,14552:1FE2,14553:2061,14554:2084,14555:20F2,14556:203C,14561:1F5E,14562:1F91,14563:200A,14564:203B,14565:202F,14567:2063,22111:244F,22113:2536,22114:21C1,22131:2523,22132:23B0,22133:224C,22134:2143,22141:21A0,22142:2140,22143:2161,22144:20A3,22145:1FBF,22331:22D5,22332:2201,22334:2024,22341:2160,22342:20D2,22344:2049,22345:1F72,22441:20DA,22442:211D,22444:211E,22445:1FC0,22451:2006,22452:201C,22454:1FB4,22456:1F6E,23131:22AD,23134:20A2,23141:2150,23142:2151,23144:20FA,23145:202F,23331:229E,23332:2201,23333:22F6,23334:20AA,23341:208C,23342:1FF2,23343:207B,23344:201E,23345:1F79,23441:20F5,23442:2064,23443:204B,23444:214C,23445:1FFB,23451:2041,23452:1F85,23453:1FA4,23454:1FE2,23456:1FAE,24141:2098,24144:214C,24145:1FE9,24151:1FC1,24154:1FD5,24156:1F95,24331:2095,24332:1FF7,24333:2088,24334:201E,24335:1F79,24341:20E6,24342:2032,24343:2034,24344:212C,24345:1FE6,24351:2027,24352:1F5D,24353:1F90,24354:1FD5,24355:1FDA,24356:1FA0,24441:2150,24442:2107,24443:219F,24444:22CE,24445:20E0,24451:1FE3,24452:1FC0,24453:2038,24454:20D7,24455:2084,24456:202F,24551:1FE7,24552:1FBF,24553:2043,24554:2085,24555:20EC,24556:203A,24561:1FA8,24562:1F51,24563:1FE5,24564:202B,24565:202D,24567:2061,33331:231E,33333:2590,33334:2254,33341:2089,33342:2086,33343:21F9,33344:2110,33345:2041,33441:2041,33442:203D,33443:2110,33444:2126,33445:200A,33451:1F82,33452:1F81,33453:2050,33454:1FF8,33456:1FE2,34341:2016,34343:20FF,34344:2116,34345:1FFA,34351:1F6B,34353:203D,34354:1FFA,34356:1FD3,34441:213F,34442:2143,34443:212D,34444:2268,34445:20DA,34451:1FE7,34452:1FE3,34453:2021,34454:20CE,34455:208A,34456:2046,34551:1FFA,34552:1FEF,34553:202E,34554:208E,34555:20D6,34556:204C,34561:1FA3,34562:1FAA,34563:2003,34564:204B,34565:203F,34567:2079,44441:22F6,44443:22DD,44444:25C2,44445:22AB,44451:20EC,44452:20EA,44453:2121,44454:228E,44455:2211,44456:218A,44551:209E,44553:20F3,44554:2211,44556:2173,44561:204C,44562:202E,44563:209C,44564:2189,44565:215B,44567:2198,45451:208C,45453:20E0,45454:2205,45456:215B,45461:2025,45463:2093,45464:2185,45465:214D,45467:2191,45671:2063,45673:20EC,45674:2190,45678:2294." +
  "1|11234:1B2W|N:3510|12111:340D,12112:3228,12115:30F3,12122:3283,12125:3048,12155:30D7,12156:3047,12322:329F,12323:31A0,12325:309A,12352:30AF,12353:30BB,12355:3139,12356:30CA,12511:312E,12512:307A,12515:30C5,12516:3038,12523:30B2,12545:3138,12546:30BC,15112:3123,15122:3075,15125:30DC,15126:3038,15145:30DD,15146:303C,15322:309B,15325:3167,15326:30CB,15345:3150,15346:30C3,22124:32BD,22133:31B4,22135:30EC,22211:328F,22213:32D6,22243:32D3,22324:3285,22331:3195,22344:3157,22354:30AE,22514:310D,23132:318B,23133:32B5,23135:30D9,23221:32C2,23242:325A,23243:315C,23245:309D,23251:30DD,23324:3181,23344:314B,23354:308F,23444:324C,23454:3084,23554:314F,23564:30BF,25124:30E7,25133:30D1,25135:3182,25136:30E4,25211:307C,25213:30D9,25243:30BE,25324:3090,25331:30E3,25344:308D,25354:313A,25364:30B1,25514:3186,25614:30EE,55114:3106,55124:3188,55243:318A,56114:3065,56124:30F3,56243:30C6,11111:38ED,11112:344C,11114:3468,11115:3334,11122:3260,11123:340F,11124:34A2,11125:3132,11133:32B2,11134:3696,11135:31F8,11143:344C,11145:3137,11155:31EC,11156:30C7,11222:332C,11223:339F,11224:357C,11225:315C,11235:354D,11243:37D6,11245:3285,11255:31EF,11256:314F,11322:32C2,11325:31AC,11342:3765,11345:319D,11353:3065,11355:30ED,11356:3047,11555:32A8,11556:30B4,11567:305A,12113:340F,12114:340C,12123:32ED,12124:32F3,12133:330A,12134:37EE,12135:31AD,12143:3787,12145:318E,12211:3246,12212:327E,12213:32FF,12214:338A,12215:307B,12222:347D,12223:32DB,12224:334B,12225:3156,12233:3224,12234:35F8,12235:317A,12243:33E8,12245:30DC,12255:30E9,12256:3056,12311:3413,12312:32FB,12313:32EB,12314:377C,12315:31AE,12321:32F9,12324:3392,12331:3324,12332:318B,12333:32A1,12334:341D,12335:30D2,12341:3770,12342:3382,12343:337A,12344:33D5,12345:328F,12351:31AC,12354:32A1,12513:3199,12514:31C4,12522:3152,12524:30B0,12525:30B5,12526:300F,12533:30D4,12534:333F,12535:3166,12536:30CF,12543:3299,12555:31F9,12556:307C,12566:3091,12567:305C,15111:3344,15114:3131,15115:319B,15116:3087,15123:31AC,15124:31AE,15133:3090,15134:3295,15135:30D6,15136:3047,15143:31E3,15155:3203,15156:3050,15166:304E,15167:2FE3,15222:314D,15223:30D3,15224:3193,15225:30CF,15226:304A,15234:359D,15235:324F,15236:31B1,15243:3292,15245:3150,15246:30C1,15255:322C,15256:30AE,15266:30C3,15267:3093,15342:3299,15353:30CD,15355:31E6,15356:3084,15363:3013,15365:3088,15366:3086,15367:3059,15555:34D9,15556:31F0,15566:3172,15567:312A,15666:3202,15667:312E,15678:3242,22111:32CC,22112:32CA,22113:3372,22114:331B,22115:309A,22122:3491,22123:32E6,22125:3132,22134:3403,22143:340D,22145:310E,22155:30E9,22156:3065,22212:348E,22214:32B0,22215:3143,22222:38BC,22223:3397,22224:337C,22225:3330,22233:31D4,22234:3357,22235:312F,22245:3124,22255:3209,22256:3146,22311:336A,22312:331F,22313:31FB,22314:33E4,22315:3111,22321:3309,22322:3371,22323:31CA,22325:30EF,22332:31BA,22333:31A9,22334:3188,22335:302A,22341:3430,22342:3294,22343:317D,22345:30BC,22351:3117,22352:30FE,22353:3028,22355:30A7,22356:3044,22511:30F3,22512:317F,22513:311F,22515:30E1,22516:3064,22522:3323,22523:310F,22524:30FD,22525:3200,22526:3123,22533:3014,22534:310A,22535:30C1,22536:303E,22543:30DE,22545:30AB,22546:304E,22555:321A,22556:30DF,22566:30ED,22567:30DB,23111:34A9,23112:3353,23114:37A3,23115:31EF,23121:3358,23122:32E0,23123:31F6,23124:33AB,23125:30F5,23131:32FD,23134:33C5,23141:37B5,23142:33F8,23143:33F8,23144:33BD,23145:32C6,23151:31CF,23152:30ED,23153:3114,23154:32BC,23155:3165,23156:30F2,23222:335B,23223:319A,23224:328C,23225:30DB,23231:31C1,23232:31A3,23234:3246,23235:304E,23241:33DA,23244:3191,23252:30DB,23253:300A,23254:30D3,23255:3085,23256:3044,23321:3213,23322:31A3,23325:3030,23341:33FF,23342:3178,23343:3238,23345:3091,23351:3106,23352:3025,23353:30F8,23355:309A,23356:302D,23441:3402,23442:3162,23445:30AC,23451:32C2,23452:3088,23453:3097,23455:3135,23456:30B0,23551:318A,23552:3095,23555:31DF,23556:30E4,23561:3114,23562:3032,23565:30D4,23567:30DB,25111:319E,25112:30AD,25113:31D6,25114:31AD,25115:30F2,25116:3054,25122:3146,25123:30F3,25125:30BD,25126:3039,25134:32B8,25143:32D9,25145:316C,25146:30F8,25155:3215,25156:30C8,25166:30CE,25167:309A,25212:3136,25214:30F3,25215:30D3,25216:3044,25222:3337,25223:30F5,25224:3118,25225:31F7,25226:3125,25233:304B,25234:3195,25235:30D3,25236:3064,25245:30A0,25246:3042,25255:3217,25256:30DD,25266:30E4,25267:30CF,25311:31F3,25312:311A,25313:30FC,25314:32C0,25315:3177,25316:30F4,25321:310C,25322:30EB,25323:3024,25325:308D,25326:3029,25332:3012,25333:30E6,25334:30BE,25335:3092,25336:302C,25341:32D8,25342:30A6,25343:3087,25345:312D,25346:30AD,25351:3184,25352:3092,25353:308C,25355:31C5,25356:30CF,25361:30F5,25362:3026,25363:3038,25365:30D1,25366:30D9,25367:30C0,25511:3103,25512:30E3,25513:3175,25515:3218,25516:30C7,25522:31F4,25523:309D,25524:30A2,25525:3219,25526:30E0,25533:3092,25534:31AE,25535:31FB,25536:30DE,25543:3142,25545:31CF,25546:30C1,25555:33F4,25556:31DE,25566:317C,25567:3163,25611:3078,25612:3068,25613:30FD,25615:30CE,25616:30C3,25617:308F,25622:311D,25623:303A,25624:300D,25625:30D7,25626:30D4,25627:30C3,25633:302B,25634:30EF,25635:30F1,25636:30D1,25637:30C7,25643:30B1,25645:30C6,25646:30C8,25647:30C6,25655:31E6,25656:3183,25657:3159,25666:31DD,25667:314A,25677:3158,25678:3206,55111:322E,55112:3119,55115:322C,55116:307B,55122:30E7,55123:318B,55125:3240,55126:30CB,55133:30D5,55134:31B2,55135:324E,55136:30DB,55143:31AE,55145:3242,55146:30E3,55155:34C2,55156:3211,55166:3192,55167:3171,55222:31FD,55223:30CE,55224:30E2,55225:3226,55226:30E4,55234:32D6,55235:3267,55236:3131,55245:31FA,55246:30F1,55255:3423,55256:3203,55266:3196,55267:317E,55322:30A9,55325:3217,55326:30F5,55342:3177,55345:31EB,55346:30DC,55353:322A,55355:33F3,55356:3200,55363:30EF,55365:31E8,55366:3190,55367:3164,55555:3964,55556:3495,55566:33C1,55567:335E,55666:33AB,55667:330A,55678:33E2,56111:3124,56112:3077,56115:3076,56117:302D,56122:305F,56123:3115,56125:30C3,56127:3093,56133:304C,56134:3116,56135:30D6,56137:30A5,56143:311E,56145:30CA,56147:309F,56155:320F,56156:3188,56157:3153,56177:3163,56178:3266,56222:313A,56223:3044,56224:3062,56225:30CF,56227:30CA,56234:31F7,56235:3116,56237:30F3,56245:30D9,56247:30C3,56255:31ED,56256:3194,56257:315E,56277:316B,56278:320D,56322:302A,56325:30E1,56327:30DE,56342:30CC,56345:30CA,56347:30D6,56353:30DC,56355:31F0,56356:3183,56357:315D,56373:30E0,56375:315B,56377:315B,56378:3209,56555:349D,56556:33B5,56557:3351,56567:3306,56577:3303,56578:33C8,56777:3365,56778:33E2." +
  "1|12345:1B2W|N:4680|11123:447F,11124:444E,11154:4485,11223:4324,11233:433F,11236:42AD,11256:42A9,11433:431E,11436:42BE,11456:42AE,13222:4480,13223:4367,13226:429A,13266:4370,13267:432E,13463:42AE,13464:427D,13466:433D,13467:42EF,13656:4344,13657:42F8,11111:4D71,11112:466D,11115:46BE,11116:464A,11122:440C,11125:446B,11126:431F,11144:4430,11145:4572,11146:4346,11156:4318,11166:44CB,11167:43D0,11222:4466,11225:433E,11226:4244,11234:45A4,11235:456F,11244:4351,11245:465A,11246:429B,11254:45A9,11266:42A5,11267:424C,11335:4439,11336:4254,11345:498E,11346:439C,11354:459A,11356:4298,11366:42CB,11367:4268,11453:45C9,11464:4230,11466:42B1,11467:4243,11666:4505,11667:4341,11678:43BD,12346:4911,12354:4CC9,12356:4578,12366:447E,12367:4406,12433:4565,12436:4471,12453:4C44,12456:4455,12464:4281,12466:4333,12467:42B5,12666:44A6,12667:42E4,12678:433C,13224:455B,13254:4C81,13256:4496,13422:4571,13426:44B8,13452:4C92,13456:449C,13633:435E,13636:42C2,13637:4257,13666:4431,13667:42C5,13677:42CD,13678:430A,16666:47AF,16667:448D,16677:4431,16678:4402,21111:469C,21112:441B,21113:4491,21116:435E,21123:437D,21126:4274,21133:43A3,21134:45CF,21136:42E5,21154:4615,21156:42E5,21166:42F0,21167:428B,21436:4533,21453:4CEA,21456:44FF,21464:4326,21466:439B,21467:434E,21666:44AD,21667:4337,21678:43B3,23111:44D0,23112:439B,23114:45D1,23116:42F3,23156:44FF,23166:43CF,23167:4371,23411:4605,23416:452B,23451:4CF7,23456:44F1,23462:4308,23463:42F3,23464:42EA,23466:4393,23467:4340,23622:4380,23623:4287,23626:42F3,23627:4288,23633:4349,23634:4301,23636:42D7,23637:4284,23656:4393,23657:434C,23666:4469,23667:430D,23677:431C,23678:438C,26222:468E,26226:44D5,26227:43DE,26256:42F0,26257:428C,26266:44FF,26267:435E,26277:435E,26278:43DC,26466:447B,26467:4314,26476:430F,26478:4379,26666:475D,26667:44A1,26677:442A,26678:4438,26777:44AB,26778:4433,66666:4EE0,66667:4898,66677:4752,66678:471E,66778:46A9.";
precalculated_games_5columns_1st_level[1][1] =
  "1|11112:1B1W|N:3912|12223:3AC6,12233:3917,12234:37B4,12333:3AB3,12334:37E8,12343:37BC,12345:377E,13331:3C26,13341:38CF,13451:386F,11111:4562,11113:4111,11121:420E,11122:4078,11123:3D6D,11131:3DA7,11132:3EE0,11133:3C61,11134:3A66,11221:3F87,11222:3F61,11223:3AE4,11231:3C74,11232:3B19,11233:3B38,11234:391E,11331:3B6F,11332:3C61,11333:3B3D,11334:381D,11341:393F,11342:3A2B,11343:3803,11345:3773,12221:4053,12222:3F49,12231:3B2D,12232:3A33,12331:3B92,12332:396B,12341:3984,12342:3837,13332:3C20,13333:3D60,13334:3989,13342:38E5,13343:3933,13344:3833,13345:37AB,13452:38A2,13453:3790,13456:37E2,22221:439A,22222:439A,22223:3E89,22231:3C5F,22232:3C5A,22233:3AF3,22234:3989,22331:3A15,22332:3A45,22333:3A40,22334:37E4,22341:38E3,22342:38FD,22343:37CD,22345:3777,23331:3C44,23332:3AE5,23333:3CE0,23334:3964,23341:38E9,23342:3889,23343:390A,23344:3820,23345:37B6,23451:38AC,23452:3855,23453:37A6,23456:380B,33331:3F36,33332:3F36,33333:418A,33334:3CB1,33341:3A95,33342:3AD7,33343:3BE8,33344:3A3D,33345:398B,33441:3981,33442:39B2,33443:3A28,33445:38B5,33451:38E8,33452:3942,33453:3936,33454:386D,33456:387F,34561:3988,34562:39F7,34563:3882,34567:3957." +
  "1|11122:1B1W|N:4548|12333:4375,12334:4081,12344:40A2,12345:4023,13313:431D,13314:4008,13413:3FFB,13415:3F99,22223:4523,22323:4292,22324:40C6,23323:4303,23324:4012,23423:4000,23425:3F91,33312:4489,33412:4109,34512:40D4,11111:4D05,11112:4BBB,11113:4620,11123:47A2,11133:4470,11134:427A,11211:4A9B,11212:4B54,11213:4476,11222:4C04,11223:45D2,11233:4363,11234:4193,11311:456B,11312:44F3,11313:435A,11314:4159,11322:4884,11323:444B,11324:4277,11333:4331,11334:4013,11344:4041,11345:3FA7,12211:4CB5,12212:4A6D,12213:45C3,12222:49C4,12223:43D0,12233:436A,12234:418C,12311:44D7,12312:4581,12313:4334,12314:416E,12322:4456,12323:434B,12324:418E,13311:4367,13312:439A,13322:4457,13323:4372,13324:40C2,13333:4563,13334:4186,13344:40C0,13345:4002,13411:4180,13412:41B7,13422:4285,13423:4098,13425:4050,13433:4171,13434:40A3,13435:3FF4,13455:400E,13456:4043,22211:504A,22212:4AC5,22213:46B6,22222:4C38,22233:439D,22234:41BB,22311:4816,22312:443C,22313:4421,22314:424D,22322:449F,22333:42FD,22334:3FF4,22344:4018,22345:3F73,23311:4419,23312:4394,23313:4360,23314:40BA,23322:42B4,23333:4584,23334:4199,23344:40E3,23345:4027,23411:4248,23412:41C6,23413:4090,23415:4044,23422:4105,23433:418B,23434:40BE,23435:400B,23455:4025,23456:405C,33311:4431,33313:4598,33314:41BF,33322:443A,33323:45B2,33324:41F5,33333:4AC7,33334:4470,33344:436F,33345:423E,33411:40AC,33413:4184,33414:40AB,33415:402B,33422:40B4,33423:41BC,33424:40D0,33425:4044,33433:4459,33434:42F3,33435:41FB,33444:42F3,33445:413E,33455:4167,33456:4156,34511:409A,34513:4022,34516:4079,34522:40A3,34523:403A,34526:408C,34533:4205,34534:4134,34536:414B,34566:4173,34567:4239." +
  "1|11123:1B1W|N:5436|12242:5056,12244:4F09,12245:4E02,12442:4F26,12444:507D,12445:4E16,12452:4E12,12454:4E23,12455:4E0F,12456:4E34,14414:5078,14415:4DD7,14434:5119,14435:4E7D,14514:4DBA,14516:4D92,14534:4E53,14536:4E80,22221:5633,22233:5273,22243:5051,22322:5479,22324:4FF0,22333:51F9,22343:4EAD,22421:5088,22433:4E99,22443:4F38,22453:4E4A,23422:4F82,23424:4EF6,23425:4E48,24421:4F69,24433:4F21,24443:5139,24453:4EDB,24521:4EA0,24533:4E70,24543:4EB7,24563:4EC0,44413:51B0,44513:4EDD,45613:4F39,11111:5C51,11112:585C,11113:5A24,11114:5471,11122:5782,11124:555F,11132:5B20,11134:52D7,11144:5220,11145:5096,11211:574B,11212:5476,11213:5AED,11214:516E,11221:54EC,11222:547E,11223:5A36,11224:50A3,11231:5A80,11232:56DE,11233:57F3,11234:535F,11241:51AE,11242:4F8F,11243:5469,11244:4FBC,11245:4E9B,11411:52EF,11412:5187,11413:522C,11414:50BD,11415:4F5B,11422:5094,11423:57FE,11424:50CA,11425:4FAC,11432:5387,11434:5014,11435:4EA4,11444:5098,11445:4DA1,11455:4DB6,11456:4D79,12211:54CF,12212:5484,12213:57A1,12214:501E,12221:541C,12222:555D,12223:55A3,12224:502E,12231:5795,12232:5516,12233:52E8,12234:50B0,12241:5022,12243:5073,12311:5A95,12312:5799,12313:575E,12314:53D6,12322:54E7,12323:536F,12324:509B,12332:530B,12334:5073,12344:5139,12345:4FFC,12411:51A6,12412:502B,12413:53EB,12414:4FEA,12415:4EC7,12421:4FD0,12422:4FEE,12423:5134,12424:4EE2,12425:4E16,12431:53E6,12432:50A3,12433:5081,12434:5128,12435:500A,12441:5015,12443:510C,12451:4EFC,12453:4FEC,14411:50D6,14412:5040,14413:505B,14422:4F3D,14423:525B,14424:50C1,14425:4E62,14432:518A,14444:5368,14445:4F21,14455:4DF4,14456:4DD2,14511:4FB6,14512:4F24,14513:4F2D,14522:4E45,14523:5102,14524:4E4F,14526:4E95,14532:5038,14544:4F0B,14545:4DF2,14546:4D9B,14566:4DC1,14567:4E69,22211:5717,22212:57AD,22213:569E,22214:51BE,22222:5A82,22223:55F0,22224:52A3,22231:56AC,22232:5530,22234:507F,22241:5175,22242:5237,22244:5094,22245:4F51,22311:58C0,22312:5679,22313:53A3,22314:51A9,22321:558E,22323:5254,22331:549C,22332:5224,22334:4EBF,22341:517C,22342:4F98,22344:4EFE,22345:4E4C,22411:5140,22412:5176,22413:515B,22414:4FDC,22415:4EF9,22422:5213,22423:5083,22424:5069,22425:4F2E,22431:51AB,22432:4F9E,22434:4EEB,22435:4E75,22441:4FD6,22442:5039,22444:5067,22445:4E48,22451:4EF7,22452:4F09,22454:4E30,22455:4E45,22456:4E11,23411:548B,23412:51A5,23413:5119,23414:51D9,23415:50BB,23423:4F45,23432:4E9A,23434:4EB1,23435:4E15,23444:507C,23445:4E91,23455:4E8E,23456:4E9C,24411:50EE,24412:500C,24413:51EF,24414:5124,24415:4F09,24422:5055,24423:4FB7,24424:505D,24425:4E44,24431:521F,24432:4EDE,24434:5061,24435:4EA5,24441:516B,24442:5076,24444:52D6,24445:4FD8,24451:4F1A,24452:4E46,24454:4FAD,24455:4EB7,24456:4EA2,24511:4FE5,24512:4F11,24513:50AC,24514:4ED2,24516:4F2F,24522:4F31,24523:4EBD,24524:4E1F,24526:4E31,24531:50FF,24532:4E5D,24534:4E84,24536:4EBA,24541:4EEA,24542:4E3E,24544:4F88,24545:4EBC,24546:4E82,24561:4F09,24562:4E3C,24564:4E9E,24566:4E9F,24567:4F26,44411:51D1,44412:51FB,44414:53AD,44415:4F8A,44422:50BF,44423:5282,44424:5347,44425:5028,44432:5115,44434:5346,44435:5014,44444:5AE4,44445:5317,44455:5172,44456:50CD,44511:4EA4,44512:4F30,44514:4F62,44515:4E39,44516:4E4A,44522:4E87,44523:4F10,44524:4FB7,44525:4EE5,44526:4EA4,44532:4EC9,44534:4FCF,44535:4EF8,44536:4ECE,44544:52EB,44545:5102,44546:5075,44555:50F7,44556:4F9B,44566:4F8D,44567:501B,45611:4F0F,45612:4F77,45614:4E40,45617:4F29,45622:4E91,45623:4F79,45624:4E94,45627:4F46,45632:4F2C,45634:4EC5,45637:4F7E,45644:506E,45645:4F82,45647:500A,45677:5026,45678:51E9." +
  "1|11223:1B1W|N:5504|12444:517A,12445:4F19,12454:4EF9,12456:4F53,13334:5038,13344:4F04,13345:4E3C,13444:5067,13445:4E63,13454:4E2C,13456:4E89,14111:529B,14114:507D,14115:4F20,14141:5076,14144:50A3,14145:4E24,14151:4F22,14154:4E17,14155:4E0C,14156:4E06,14334:4F06,14335:4E66,14344:503D,14345:4E66,14354:4E35,14355:4E4E,14356:4E7C,14441:50A6,14442:51B9,14451:4E13,14452:4F10,14551:4E50,14552:4F30,14561:4E49,14562:4F59,23333:54C4,23343:501E,23443:4F3D,23453:4EA1,24333:504B,24343:4F04,24353:4E57,24443:50AD,24453:4EA9,24553:4EB4,24563:4EE3,11111:5B0D,11112:5788,11113:56D6,11114:52D4,11121:57F6,11122:56CB,11123:5A83,11124:5259,11131:5610,11132:57B3,11133:5457,11134:50EB,11141:528F,11142:5169,11143:51AE,11144:509B,11145:4F51,11221:5942,11224:5587,11231:583C,11232:5B55,11233:587D,11234:531F,11241:5254,11242:5241,11243:562F,11244:5105,11245:5051,11331:53B7,11332:55AC,11333:54DF,11334:4FFB,11341:50A1,11342:526C,11343:50C3,11344:4FF8,11345:4EF5,11441:50BA,11442:5073,11443:512E,11444:5123,11445:4E5B,11451:4F67,11452:4F8C,11453:5032,11454:4E39,11456:4E56,12111:57EA,12112:56A4,12113:5813,12114:51CE,12121:55F0,12123:5BBD,12124:51BA,12131:5805,12132:5B1F,12133:55A8,12134:52C7,12141:51C3,12142:51A1,12143:52C7,12144:5079,12145:4F80,12231:5B1A,12232:57E0,12233:5661,12234:52B6,12241:5190,12242:5195,12243:5372,12244:5073,12245:4F64,12331:564B,12332:560F,12333:5491,12334:505F,12341:52E3,12342:52D2,12343:5048,12344:5078,12345:4FC2,12441:50CD,12442:509A,12443:507C,12451:4FD2,12452:4FA0,12453:4FC3,13111:5625,13112:581F,13113:53C1,13114:50E1,13131:5370,13132:5627,13133:53B8,13134:4FC6,13141:50A0,13142:52F3,13143:4FE1,13144:4FAE,13145:4EEC,13231:559E,13233:5503,13234:5060,13241:52AF,13242:52B8,13243:5119,13244:5085,13245:4FA3,13331:53E9,13332:54EB,13333:551A,13341:4FD6,13342:50A5,13343:5039,13441:4FAF,13442:50C0,13443:4F4C,13451:4EEE,13452:5003,13453:4E7B,14112:51D8,14113:5114,14131:5093,14132:52DE,14133:4FF1,14134:4FC1,14135:4F08,14142:507C,14143:500B,14152:4F99,14153:4F2A,14241:5096,14243:5174,14244:51A3,14245:4EF2,14251:4F9C,14253:508F,14254:4EE8,14256:4F3C,14331:4FBD,14332:50C8,14333:5070,14341:4F92,14342:509D,14343:4F35,14351:4EDB,14352:4FD4,14353:4E84,14443:50A9,14444:5377,14445:4F99,14453:4E72,14454:4F72,14455:4EA0,14456:4E67,14553:4E94,14554:4EAC,14555:4FA4,14556:4E79,14563:4ECC,14564:4E65,14565:4E72,14567:4F1B,22111:5905,22113:5B87,22114:536E,22131:5C7B,22132:5967,22133:5645,22134:539C,22141:52CD,22142:52D2,22143:5346,22144:5136,22145:5036,22331:5783,22332:5486,22333:53E2,22334:5052,22341:53A7,22342:5147,22343:5004,22344:5002,22345:4F6C,22441:5166,22442:50EC,22443:5033,22444:50C5,22445:4E99,22451:506D,22452:4FE0,22453:4F5D,22454:4E69,22456:4E6D,23131:575B,23133:54E0,23134:5145,23141:5388,23142:5383,23143:50D0,23144:5121,23145:504D,23331:55E0,23332:5467,23334:5059,23341:516D,23342:5051,23344:4F3F,23345:4EA4,23441:513B,23442:4FFA,23444:50A1,23445:4ECF,23451:507D,23452:4F62,23454:4EA4,23456:4F03,24141:514D,24143:5141,24144:51F2,24145:4F9C,24151:5040,24153:502F,24154:4F86,24156:4FDF,24331:5189,24332:5066,24334:4F32,24335:4E84,24341:5149,24342:4FDA,24344:5064,24345:4EB8,24351:5081,24352:4F41,24354:4EAC,24355:4EAE,24356:4EE9,24441:5243,24442:50A1,24444:532B,24445:4FAC,24451:4FB2,24452:4E70,24454:4F85,24455:4EB5,24456:4E9B,24551:4FAE,24552:4E72,24554:4EC2,24555:4FAB,24556:4EB4,24561:5007,24562:4E73,24564:4EA6,24565:4E98,24567:4F59,33331:5533,33333:5AE2,33334:52D0,33341:50AC,33342:50CF,33343:5295,33344:50C4,33345:4FAC,33441:4F76,33442:4FC8,33443:50E7,33444:50F3,33445:4EE4,33451:4ED5,33452:4F1C,33453:4FA5,33454:4EC6,33456:4EE4,34341:4F60,34343:50E0,34344:50E4,34345:4EE7,34351:4ECB,34353:4FB5,34354:4ED0,34356:4EC5,34441:5080,34442:508D,34443:50DC,34444:5304,34445:5008,34451:4EB8,34452:4EC7,34453:4EB2,34454:4FEA,34455:4F2B,34456:4F40,34551:4ECB,34552:4EDA,34553:4ED6,34554:4F52,34555:4FF5,34556:4F55,34561:4F1D,34562:4F23,34563:4EC0,34564:4F3F,34565:4F34,34567:4FF1,44441:5335,44443:536D,44444:5B0E,44445:5343,44451:4FAC,44452:4F9D,44453:5008,44454:531A,44455:5167,44456:50C6,44551:4EE0,44553:4F85,44554:5176,44556:5039,44561:4EDC,44562:4ECE,44563:4F41,44564:50D1,44565:5013,44567:50D2,45451:4EC6,45453:4F61,45454:5147,45456:5017,45461:4EB0,45463:4F2A,45464:50BD,45465:4FF9,45467:50BA,45671:4F92,45673:5001,45674:50C1,45678:52F4." +
  "1|11234:1B1W|N:5432|12522:4EED,12525:4DC8,12526:4D46,12555:4F22,12556:4D37,12566:4D48,12567:4DB5,15111:5206,15115:4FB2,15116:4E68,15155:4FB5,15156:4D20,15166:4D44,15167:4D54,15353:4DE2,15355:4F0F,15356:4D49,15363:4D66,15365:4D44,15366:4D42,15367:4DAE,22212:5313,22215:4EB8,22223:522F,22245:4E68,22332:5053,22333:4FF3,22335:4D77,22524:4EAF,22533:4D79,22535:4DA6,22536:4D51,23222:51FE,23223:4FFD,23225:4E52,23252:4E84,23253:4D64,23255:4D71,23256:4D47,25212:4E8E,25215:4D8F,25216:4D2B,25223:4E53,25245:4D7A,25246:4D43,25332:4D72,25333:4E46,25335:4D81,25336:4D47,25524:4DA7,25533:4D99,25535:4EEB,25536:4D58,25624:4D45,25633:4D68,25635:4D4F,25636:4D57,25637:4DE5,55133:4DA7,55135:4EF1,55136:4D23,55223:4D92,55245:4F1B,55246:4D7A,56133:4D44,56135:4D01,56137:4DAF,56223:4D55,56245:4D51,56247:4DFE,11111:5A07,11112:541A,11114:554A,11115:5207,11122:51EF,11123:5402,11124:5524,11125:4F8F,11133:52BA,11134:5869,11135:5090,11143:5437,11145:4FA6,11155:4FCA,11156:4E83,11222:52C3,11223:5330,11224:560C,11225:4F56,11235:53F9,11243:59F2,11245:50FC,11255:4F1E,11256:4EA7,11322:520F,11325:5025,11342:5985,11345:4FF2,11353:4E84,11355:4E23,11356:4DC7,11555:5033,11556:4D37,11567:4DA5,12111:5445,12112:51B9,12113:542A,12114:545F,12115:4FB4,12122:51E7,12123:526E,12124:5276,12125:4EA5,12133:5264,12134:5A29,12135:5040,12143:59FD,12145:503E,12155:4E45,12156:4E12,12211:5206,12212:51B1,12213:525E,12214:538C,12215:4E8D,12222:5374,12223:51C4,12224:52EB,12225:4ECF,12233:5170,12234:57A9,12235:4F94,12243:5476,12245:4EBE,12255:4DD9,12256:4D4A,12311:545C,12312:5279,12313:5271,12314:59B5,12315:506E,12321:526D,12322:522D,12323:50AB,12324:541F,12325:4ECD,12331:525A,12332:5066,12333:51E0,12334:54D4,12335:4EA7,12341:5A00,12342:549C,12343:548F,12344:543D,12345:5221,12351:5055,12352:4ED1,12353:4EBE,12354:5190,12355:4E89,12356:4E6B,12511:4FD4,12512:4E84,12513:504F,12514:5065,12515:4E4C,12516:4DE9,12523:4EAD,12524:4EA3,12533:4EC9,12534:525C,12535:4E69,12536:4E3B,12543:5218,12545:4E94,12546:4E70,15112:4FA2,15114:5007,15122:4EC9,15123:5036,15124:504F,15125:4E46,15126:4DEA,15133:4E90,15134:5150,15135:4E83,15136:4DF5,15143:505E,15145:4E5A,15146:4E05,15222:4EE0,15223:4EA4,15224:4FBB,15225:4DBB,15226:4D28,15234:55C3,15235:4F89,15236:4F2D,15243:51C3,15245:4EA7,15246:4E3D,15255:4F25,15256:4D05,15266:4D22,15267:4DA8,15322:4EE2,15325:4EB5,15326:4E98,15342:526D,15345:4E99,15346:4E79,15555:5200,15556:4DEE,15566:4D0F,15567:4D00,15666:4E2D,15667:4CF1,15678:4E3C,22111:52C4,22112:5270,22113:534C,22114:52B2,22115:4F37,22122:5408,22123:52EF,22124:52B3,22125:4F79,22133:50FA,22134:5446,22135:4F18,22143:556A,22145:4F88,22155:4E54,22156:4E00,22211:51B5,22213:5207,22214:522D,22222:5919,22224:5305,22225:5117,22233:5073,22234:52EB,22235:4ECE,22243:5102,22255:4F2D,22256:4E5F,22311:5352,22312:5310,22313:519F,22314:54CC,22315:4F98,22321:52C1,22322:5282,22323:504E,22324:512A,22325:4EDA,22331:509E,22334:4FCB,22341:5567,22342:5148,22343:4FDA,22344:4F88,22345:4EB0,22351:4F7E,22352:4F1F,22353:4DAD,22354:4E74,22355:4DE0,22356:4DC1,22511:4F32,22512:4F3C,22513:4F6E,22514:4EE1,22515:4E05,22516:4DAF,22522:5186,22523:4EA3,22525:4F3C,22526:4E73,22534:4E67,22543:4EBF,22545:4DB0,22546:4D9A,22555:4F40,22556:4D6D,22566:4D7D,22567:4D96,23111:553A,23112:5352,23114:59F1,23115:5127,23121:534C,23122:52FC,23123:519E,23124:54BB,23125:4F8B,23131:5262,23132:50BA,23133:5224,23134:5422,23135:4ECA,23141:5A9B,23142:5573,23143:5542,23144:54A6,23145:529C,23151:5102,23152:4F8B,23153:4F73,23154:51EB,23155:4F26,23156:4EF6,23221:51EF,23224:512F,23231:509C,23232:504A,23234:5124,23235:4DB9,23241:549B,23242:50B0,23243:4F55,23244:4FCB,23245:4E30,23251:4EC4,23254:4E7B,23321:517C,23322:5023,23324:4FCB,23325:4DC6,23341:555F,23342:4FD6,23343:5110,23344:4F4E,23345:4E9B,23351:4F54,23352:4DAF,23353:4E9A,23354:4E48,23355:4DA9,23356:4D7F,23441:5586,23442:4FCA,23444:50D3,23445:4E87,23451:52A7,23452:4E98,23453:4E8A,23454:4E33,23455:4EA3,23456:4E9F,23551:4F4C,23552:4DB7,23554:4E7D,23555:4EEF,23556:4DA6,23561:4F00,23562:4D8D,23564:4E58,23565:4D93,23567:4E66,25111:507D,25112:4F26,25113:50E4,25114:505F,25115:4EB9,25116:4E74,25122:4F82,25123:4F85,25124:4EFB,25125:4E38,25126:4DDB,25133:4EE0,25134:519A,25135:4EB8,25136:4E6E,25143:52E9,25145:4F29,25146:4EFC,25155:4F55,25156:4D9F,25166:4DBA,25167:4E56,25211:4E7B,25213:4ED8,25214:4EB8,25222:510F,25224:4EC5,25225:4F10,25226:4E24,25233:4DC1,25234:4FBC,25235:4DB4,25236:4D5B,25243:4E59,25255:4F3D,25256:4D4C,25266:4D44,25267:4D52,25311:5106,25312:4F96,25313:4F97,25314:5203,25315:4F45,25316:4F12,25321:4F77,25322:4ECE,25323:4DBD,25324:4E59,25325:4DD7,25326:4DBF,25331:4ECA,25334:4E56,25341:52EC,25342:4EB6,25343:4E84,25344:4E32,25345:4EB1,25346:4EB5,25351:4F48,25352:4DF6,25353:4DB0,25354:4E64,25355:4ED4,25356:4DA4,25361:4EFD,25362:4DB2,25363:4D99,25364:4E40,25365:4DB0,25366:4D96,25367:4E71,25511:4F03,25512:4E0E,25513:4F33,25514:4EB1,25515:4F49,25516:4D9D,25522:4F17,25523:4DA9,25525:4F23,25526:4D5A,25534:4E95,25543:4EBD,25545:4EEC,25546:4DAE,25555:5181,25556:4E5D,25566:4DBD,25567:4DD8,25611:4EAD,25612:4DC5,25613:4F1E,25614:4E6A,25615:4DB0,25616:4D98,25617:4E2F,25622:4E57,25623:4D91,25625:4D5F,25626:4D50,25627:4D85,25634:4E0E,25643:4EC5,25645:4DAA,25646:4DA4,25647:4E6C,25655:4E73,25656:4DB2,25657:4DCE,25666:4E5A,25667:4DC8,25677:4DD8,25678:4F03,55111:5024,55112:4EFB,55114:4E80,55115:4FBF,55116:4D6C,55122:4E70,55123:4F63,55124:4EDC,55125:4F80,55126:4DC8,55134:4EBC,55143:4F76,55145:4FA0,55146:4DD7,55155:51A1,55156:4E0F,55166:4D2B,55167:4D46,55222:4F22,55224:4DE2,55225:4F60,55226:4D65,55234:509E,55235:4F72,55236:4D70,55243:4EAE,55255:5241,55256:4E84,55266:4DCC,55267:4DE5,55322:4DF4,55325:4F16,55326:4DE5,55342:4F13,55345:4EEA,55346:4DCF,55353:4F49,55355:5180,55356:4E84,55363:4D7B,55365:4E7F,55366:4DDE,55367:4DDE,55555:59B3,55556:51AE,55566:4FCA,55567:4F93,55666:4FCF,55667:4EC9,55678:5059,56111:4F73,56112:4EBA,56114:4E16,56115:4D7C,56117:4DA3,56122:4E16,56123:4F33,56124:4E98,56125:4DBD,56127:4E4F,56134:4E7B,56143:4F43,56145:4DB2,56147:4E39,56155:4E0A,56156:4D20,56157:4D1A,56177:4D36,56178:4E6F,56222:4E3A,56224:4D77,56225:4D53,56227:4D5D,56234:4FCF,56235:4D45,56237:4E03,56243:4E84,56255:4E65,56256:4DC3,56257:4DAE,56277:4DAB,56278:4EC3,56322:4DD8,56325:4DC5,56327:4EB5,56342:4F0B,56345:4DB2,56347:4E8F,56353:4D6F,56355:4E6C,56356:4DC1,56357:4DD2,56373:4DA1,56375:4DC3,56377:4DE4,56378:4F1E,56555:5192,56556:4FA1,56557:4F6C,56567:4EB4,56577:4EB1,56578:502D,56777:4F95,56778:5044." +
  "1|12345:1B1W|N:4880|11112:491A,11122:4743,11126:457E,11156:458B,11222:47C9,11226:44C1,11266:44B0,11267:447C,11464:44AC,11466:4492,11467:4471,13633:45D6,13636:44A9,13637:4485,13666:45D5,13667:4463,13677:446D,13678:4557,11111:4F8F,11115:4A28,11116:4834,11123:4757,11124:4756,11125:478A,11144:47A1,11145:48FD,11146:45D2,11154:47A5,11166:4618,11167:45AB,11223:4649,11225:46AA,11233:4684,11234:48BD,11235:48BC,11236:4553,11244:4691,11245:49E3,11246:455E,11254:48CE,11256:4543,11335:47CB,11336:4502,11345:4CF6,11346:4647,11354:48E1,11356:455C,11366:44C8,11367:44BB,11433:4661,11436:4567,11453:490D,11456:4546,11666:4665,11667:4484,11678:4582,12346:4B14,12354:5047,12356:4848,12366:463F,12367:464B,12433:48BA,12436:475F,12453:4FA3,12456:472F,12464:458B,12466:4506,12467:454F,12666:4655,12667:4494,12678:45B2,13222:47AF,13223:4672,13224:48BA,13226:454D,13254:4FFD,13256:4725,13266:4520,13267:4576,13422:48BA,13426:476B,13452:4FF5,13456:4717,13463:4549,13464:451E,13466:44DF,13467:4559,13656:4504,13657:4579,16666:491A,16667:45A1,16677:44DD,16678:4563,21111:49C9,21112:4788,21113:47DD,21116:45EF,21123:46BF,21126:450A,21133:46E3,21134:491B,21136:45AC,21154:494A,21156:45A1,21166:44D3,21167:44E1,21436:47FF,21453:509A,21456:47CA,21464:45C5,21466:455B,21467:45DB,21666:45EC,21667:44DA,21678:45FE,23111:4809,23112:46CF,23114:491A,23116:45AE,23156:47D7,23166:458C,23167:461A,23411:4950,23416:47E4,23451:50A1,23456:47B5,23462:45BC,23463:45AC,23464:45A5,23466:454E,23467:45D8,23622:462E,23623:44FC,23626:44DC,23627:44BF,23633:45D5,23634:45B5,23636:44C2,23637:449F,23656:455C,23657:45D8,23666:45AE,23667:44B4,23677:44C0,23678:45C6,26222:48BD,26226:4641,26227:45C2,26256:44C3,26257:44BB,26266:462E,26267:4483,26277:4498,26278:456E,26466:45B0,26467:44BF,26476:44B8,26478:45C1,26666:4812,26667:456E,26677:44C5,26678:4557,26777:4588,26778:4565,66666:4F5F,66667:4860,66677:4677,66678:479B,66778:46DF.";
precalculated_games_5columns_1st_level[1][0] =
  "1|11111:1B0W|N:12005|12222:D2F7,12223:C5F8,12233:C277,12234:C1BF,12345:C394,11112:D7AB,11122:CE0C,11123:C8A5,11222:CD81,11223:C39F,11234:C325,22222:DFAE,22223:CD3D,22233:C783,22234:C56E,22334:C2F9,22345:C377,23456:C649." +
  "1|11112:1B0W|N:7585|13333:794D,13334:72C0,13343:7237,13344:7073,13345:7047,13453:7042,13456:7191,22222:8719,22232:7C46,22332:78C7,22342:768A,23332:798C,23342:7421,23452:7457,33332:7EF9,33342:75B7,33442:73FE,33452:72E6,34562:7418,11111:8B14,11113:80BD,11121:8752,11122:8600,11123:7D1F,11131:7D2A,11132:7F40,11133:7938,11134:76A2,11221:83B6,11222:82EC,11223:7A85,11231:7C3F,11232:7A9A,11233:7864,11234:75CE,11331:7819,11332:7944,11333:77A1,11334:7271,11341:757A,11342:7688,11343:723F,11345:7298,12221:8511,12222:8389,12223:7B82,12231:7BE1,12232:79D7,12233:77B8,12234:75E9,12331:79A8,12332:7733,12333:7911,12334:73B4,12341:7722,12342:7565,12343:7360,12345:73DA,13331:78B8,13332:797F,13341:7316,13342:739A,13451:739C,13452:73DA,22221:898C,22223:7DB6,22231:7ECF,22233:7926,22234:7720,22331:7ADD,22333:78E1,22334:7412,22341:7919,22343:73D5,22345:7400,23331:7C8C,23333:7BD4,23334:751A,23341:763C,23343:7488,23344:732E,23345:7268,23451:7678,23453:7263,23456:7344,33331:7D17,33333:8230,33334:782B,33341:7477,33343:770C,33344:73F0,33345:72F4,33441:72A9,33443:73B5,33445:7188,33451:7213,33453:7298,33454:7125,33456:71D9,34561:73B1,34563:71C8,34567:73E1." +
  "1|11122:1B0W|N:6480|13333:6449,13334:5EE6,13344:5D8B,13345:5D5F,13433:5EFA,13434:5D9A,13435:5D36,13455:5D58,13456:5E72,33323:65DD,33324:5FF7,33423:5FB6,33424:5E62,33425:5DD6,34523:5DB3,34526:5E9F,11111:7201,11112:7363,11113:6909,11123:6A2D,11133:6570,11134:6328,11211:7187,11212:717E,11213:6876,11222:735F,11223:684A,11233:64D5,11234:62B8,11311:67A0,11312:6847,11313:641B,11314:61F9,11322:6A07,11323:6496,11324:627A,11333:63CD,11334:5F3A,11344:5F5B,11345:5F4E,12211:735F,12212:717E,12213:6A0F,12222:7187,12223:6864,12233:6624,12234:644D,12311:69F8,12312:6843,12313:661A,12314:641A,12322:686F,12323:649F,12324:62A0,12333:65A3,12334:60F1,12344:60E1,12345:6110,13311:6434,13312:64A1,13313:63AE,13314:5FBC,13322:64C3,13323:642C,13324:5FB3,13411:62C2,13412:62BB,13413:5FAB,13415:5FF7,13422:62BA,13423:5F98,13425:5FDC,22212:7363,22213:6D2D,22222:7201,22223:6928,22233:666F,22234:651F,22311:6D1B,22312:6A24,22313:68CA,22314:66DC,22322:6905,22323:6575,22324:638D,22333:6525,22334:6166,22344:617F,22345:619E,23311:68C3,23312:6632,23313:6855,23314:6367,23322:6590,23323:6510,23324:60B0,23333:6593,23334:602D,23344:5F04,23345:5EB5,23411:66E7,23412:645F,23413:6339,23415:6341,23422:6347,23423:607D,23425:6065,23433:601D,23434:5F0E,23435:5E7F,23455:5E95,23456:5F6A,33311:64FE,33312:65D4,33313:6585,33314:603E,33322:65F4,33333:6C29,33334:62E9,33344:6053,33345:5F75,33411:614B,33412:610E,33413:5FED,33414:5E8C,33415:5E92,33422:6083,33433:6299,33434:6032,33435:5F27,33444:6000,33445:5E2B,33455:5E0C,33456:5EBE,34511:61DC,34512:6168,34513:5E8D,34516:5FE3,34522:6078,34533:5F12,34534:5E0D,34536:5E76,34566:5E8C,34567:6079." +
  "1|11123:1B0W|N:4467|14444:423B,14445:3E98,14455:3DBC,14456:3DAA,14544:3EBC,14545:3DAA,14546:3D8D,14566:3DBD,14567:3EB7,22222:49F3,22224:4393,22422:4355,22424:4140,22425:4042,24422:4145,24424:41AB,24425:3F14,24522:4030,24524:3EF5,24526:3F3B,44422:41EA,44424:4499,44425:401C,44522:3EFC,44524:3FC7,44525:3EA6,44526:3E70,45622:3F41,45624:3E52,45627:3F72,11111:4B8A,11112:4A49,11113:4C48,11114:4553,11122:49EF,11124:45CB,11132:4AA8,11134:4476,11144:42C0,11145:41A8,11211:499B,11212:47C6,11213:4AE2,11214:4432,11221:487F,11222:47B0,11223:4A67,11224:4339,11231:4AAF,11232:4886,11233:48A9,11234:448C,11241:4405,11242:4299,11243:449A,11244:4188,11245:40C1,11411:44AF,11412:43DB,11413:448A,11414:420C,11415:410D,11422:42EE,11423:468E,11424:41E8,11425:40E0,11432:448A,11434:4155,11435:408D,11444:41BC,11445:3F1E,11455:3F1A,11456:3F4C,12211:4836,12212:47DF,12213:48BD,12214:434C,12221:4740,12222:475A,12223:48A1,12224:4240,12231:4954,12232:48FD,12233:46D2,12234:43BF,12241:42F3,12242:429E,12243:4359,12244:40C8,12245:4060,12311:4B94,12312:4957,12313:487E,12314:453C,12322:47AF,12323:479C,12324:4306,12332:47D1,12334:43AE,12344:4269,12345:41D5,12411:4445,12412:42BE,12413:4460,12414:41D9,12415:4149,12421:42A0,12422:41D8,12423:43E1,12424:4064,12425:3FF0,12431:4519,12432:4390,12433:42E9,12434:4223,12435:4172,12441:4183,12442:405C,12443:41A9,12444:411E,12445:3F10,12451:4115,12452:4005,12453:40FD,12454:3F0F,12455:3EFE,12456:3F5B,14411:421B,14412:4183,14413:41A9,14414:41AE,14415:3F42,14422:4066,14423:42DF,14424:4166,14425:3EF3,14432:4236,14434:4100,14435:3EE9,14511:41A7,14512:410A,14513:40D8,14514:3F3C,14516:3F98,14522:3FCD,14523:41FD,14524:3EBF,14526:3F0D,14532:4190,14534:3ECE,14536:3F2C,22211:494F,22212:49A9,22213:494F,22214:445D,22221:480E,22223:4895,22231:4AB7,22232:484A,22233:4674,22234:4324,22241:43FA,22242:4456,22243:430F,22244:41AA,22245:40C4,22311:4B0E,22312:4AB7,22313:47D1,22314:4534,22321:4895,22322:474B,22323:469C,22324:4282,22331:4979,22332:4680,22333:45CA,22334:424C,22341:4534,22342:430E,22343:41F6,22344:4140,22345:40C3,22411:440F,22412:43B4,22413:43EA,22414:41DE,22415:4166,22421:4272,22423:4309,22431:450D,22432:42FC,22433:41AA,22434:411E,22435:40AD,22441:417D,22442:416C,22443:4146,22444:4131,22445:3F21,22451:411D,22452:4080,22453:402C,22454:3F09,22455:3F0A,22456:3F33,23411:46AE,23412:450D,23413:43A0,23414:4383,23415:42B7,23422:421C,23423:429C,23424:40F7,23425:4062,23432:4255,23434:4125,23435:40A1,23444:41FF,23445:3FC8,23455:3FD4,23456:400E,24411:429B,24412:4175,24413:423C,24414:424C,24415:3FEF,24421:40D6,24423:41D2,24431:435A,24432:4144,24433:4102,24434:4219,24435:3FBF,24441:41DA,24442:4130,24443:423E,24444:42A9,24445:3FAC,24451:3FAC,24452:3EF6,24453:3F8C,24454:3FB2,24455:3E99,24456:3E81,24511:420E,24512:410A,24513:4175,24514:3FF6,24516:4035,24521:4050,24523:40BF,24531:4287,24532:4088,24533:4049,24534:3FB4,24536:3FEB,24541:3FA5,24542:3EDF,24543:3F6F,24544:3F4B,24545:3E9C,24546:3E73,24561:400E,24562:3F12,24563:3F9D,24564:3E72,24566:3E74,24567:3F6F,44411:426B,44412:4203,44413:41E6,44414:42CC,44415:3F41,44423:43CF,44432:4291,44434:42FB,44435:3FD2,44444:477B,44445:415E,44455:3F47,44456:3F4E,44511:400B,44512:3F9B,44513:3F06,44514:3F15,44515:3E24,44516:3E33,44523:404B,44532:3FED,44534:3F79,44535:3E95,44536:3E5C,44544:410F,44545:3F21,44546:3EF7,44555:3F0D,44556:3E17,44566:3E0F,44567:3EEB,45611:40A2,45612:401B,45613:3F91,45614:3E4C,45617:3F60,45623:408B,45632:4016,45634:3E6C,45637:3F7C,45644:3EFF,45645:3E20,45647:3EB4,45677:3EDC,45678:411C." +
  "1|11223:1B0W|N:3796|14444:376F,14445:3444,14454:3416,14455:3361,14456:3346,14554:335A,14555:3458,14556:3341,14564:3344,14565:3343,14567:3415,33333:3D3B,33343:37B0,33443:35FD,33453:353C,34343:35F9,34353:3528,34443:366B,34453:343C,34553:342E,34563:3483,44443:3936,44453:351C,44553:344B,44563:33EB,45453:3444,45463:33EB,45673:34D6,11111:3EB3,11112:3DB4,11113:3EB3,11114:396F,11121:3E1D,11122:3E1D,11123:4005,11124:393E,11131:3D13,11132:3E11,11133:3C83,11134:3898,11141:3946,11142:3897,11143:3959,11144:372B,11145:3662,11221:3F90,11224:3A24,11231:3E47,11232:3E47,11233:3DA6,11234:390D,11241:38F3,11242:38F3,11243:3A7B,11244:36AF,11245:35EA,11331:3B5D,11332:3C3A,11333:3BB4,11334:371D,11341:385F,11342:38D3,11343:37CF,11344:366C,11345:35BB,11441:3734,11442:365F,11443:3760,11444:3731,11445:34A8,11451:364A,11452:35C7,11453:3669,11454:3484,11456:34BF,12111:3E1D,12112:3E1D,12113:3EA4,12114:399A,12121:3DA6,12123:3F07,12124:3926,12131:3F3E,12132:3F3E,12133:3C7C,12134:39E5,12141:3908,12142:3908,12143:3952,12144:36F3,12145:3685,12231:3E78,12232:3E78,12233:3CBE,12234:394F,12241:38C5,12242:38C5,12243:39B0,12244:36A0,12245:3609,12331:3D5D,12332:3D5D,12333:3BAD,12334:38A8,12341:39BD,12342:39BD,12343:37DB,12344:373B,12345:36B4,12441:36AC,12442:36AC,12443:36F5,12444:365B,12445:3498,12451:3646,12452:3646,12453:365B,12454:3475,12456:34BF,13111:3D09,13112:3F3B,13113:3B9F,13114:38C7,13131:3B56,13132:3D5D,13133:3AD0,13134:3739,13141:3898,13142:39B3,13143:374F,13144:3697,13145:3613,13231:3C75,13233:3BEF,13234:37FA,13241:3928,13242:3928,13243:3820,13244:36B6,13245:3638,13331:3AFF,13332:3D06,13333:3AEA,13334:36E1,13341:3739,13342:387F,13343:3687,13344:3563,13345:351A,13441:36A8,13442:3722,13443:3592,13444:3649,13445:3458,13451:3626,13452:36A5,13453:3520,13454:344D,13456:3493,14111:3995,14112:3924,14113:38F2,14114:375A,14115:36B6,14131:3897,14132:39CA,14133:3767,14134:36A3,14135:361A,14141:3732,14142:36A6,14143:36E2,14144:36DD,14145:34CC,14151:367E,14152:3642,14153:3615,14154:34B0,14155:34DA,14156:34E5,14241:3694,14243:3747,14244:363C,14245:3445,14251:35E9,14253:36A3,14254:3427,14256:345C,14331:3728,14332:3898,14333:36A2,14334:3587,14335:351F,14341:3691,14342:3735,14343:358A,14344:360A,14345:3448,14351:360A,14352:369E,14353:3511,14354:3430,14355:3455,14356:3482,14441:370B,14442:365A,14443:36E9,14451:34AD,14452:343A,14453:346A,14551:34C8,14552:3454,14553:3472,14561:34D9,14562:34A4,14563:349B,22111:3F90,22113:3F90,22114:3B0E,22131:413F,22132:413F,22133:3D82,22134:3B8F,22141:3A7B,22142:3A7B,22143:3A13,22144:3839,22145:37CF,22331:3F37,22332:3C3A,22333:3AD7,22334:3839,22341:3B6E,22342:3995,22343:375E,22344:372C,22345:36EE,22441:37CD,22442:378E,22443:36EB,22444:36DC,22445:3561,22451:3779,22452:3750,22453:362D,22454:353A,22456:359C,23131:3F37,23133:3CB3,23134:3A27,23141:3B74,23142:3B74,23143:389F,23144:38B7,23145:3800,23331:3EE0,23332:3BE3,23333:3AF1,23334:37D1,23341:39FE,23342:380B,23343:369F,23344:35FC,23345:35CE,23441:38A9,23442:3732,23443:3592,23444:3663,23445:34DF,23451:37DD,23452:36D9,23453:3539,23454:34CF,23456:3544,24141:37C3,24143:379E,24144:3777,24145:35AD,24151:376A,24153:36F2,24154:3583,24156:35BF,24331:39FB,24332:383F,24333:36B6,24334:3622,24335:35F2,24341:38AF,24342:3747,24343:3590,24344:3676,24345:34F0,24351:37E2,24352:36D1,24353:3532,24354:34DC,24355:34E8,24356:3537,24441:3734,24442:36D9,24443:3681,24444:370C,24445:348E,24451:353C,24452:3531,24453:3453,24454:3464,24455:33AB,24456:33A4,24551:352E,24552:3524,24553:3472,24554:33B2,24555:345C,24556:33BA,24561:3579,24562:357A,24563:34C4,24564:33B3,24565:339F,24567:3491,33331:3C3D,33334:38A1,33341:37E8,33342:37A8,33344:3634,33345:3592,33441:3661,33442:35FB,33444:35F8,33445:3456,33451:3610,33452:35BD,33454:344B,33456:3484,34341:360D,34344:35F3,34345:345B,34351:35CD,34354:342B,34356:3485,34441:36E9,34442:368E,34444:375C,34445:34E3,34451:3510,34452:34D7,34454:34A4,34455:341A,34456:340B,34551:3508,34552:34E2,34554:3419,34555:34AB,34556:340A,34561:353F,34562:3528,34564:340B,34565:340B,34567:34F5,44441:373F,44444:3BA0,44445:364C,44451:3452,44452:3476,44454:35E9,44455:3460,44456:344D,44551:33A0,44554:3446,44556:33B1,44561:33AF,44562:33AD,44564:3435,44565:338A,44567:343A,45451:33B3,45454:3447,45456:33BB,45461:3399,45464:3437,45465:338E,45467:343B,45671:3480,45674:3423,45678:3615." +
  "1|11234:1B0W|N:2387|15555:2147,15556:1F0E,15566:1EA5,15567:1ECA,15666:1F40,15667:1EC4,15678:1FEC,22222:24EF,22225:216C,22255:2015,22256:1FC8,25222:216F,25225:2018,25226:1FA7,25255:2054,25256:1EE5,25266:1EEC,25267:1F70,55222:201D,55225:2050,55226:1EE1,55255:21EB,55256:1F58,55266:1EC6,55267:1EF1,56222:1FC0,56225:1EDB,56227:1F5F,56255:1F5D,56256:1EB8,56257:1ED0,56277:1ED1,56278:1FE8,11111:260A,11112:2473,11114:2547,11115:22A1,11122:23A9,11123:2426,11124:24A0,11125:21B3,11133:2436,11134:2609,11135:2201,11143:2432,11145:21C4,11155:210B,11156:20C5,11222:23B4,11223:2381,11224:249C,11225:2137,11235:22B0,11243:251B,11245:21C2,11255:2098,11256:2057,11322:231A,11325:21A5,11342:251D,11345:2185,11353:20EB,11355:2044,11356:2011,11555:210D,11556:1F6B,11567:201A,12111:2474,12112:23A7,12113:247E,12114:2467,12115:21DF,12122:2374,12123:2369,12124:2374,12125:2119,12133:235D,12134:2589,12135:21AE,12143:25B7,12145:21E9,12155:2084,12156:2063,12211:23D9,12212:2357,12213:2358,12214:2406,12215:2113,12222:2366,12223:22D6,12224:2384,12225:20A0,12233:2331,12234:254A,12235:2156,12243:240B,12245:20D9,12255:1FD8,12256:1FA6,12311:247A,12312:2367,12313:2367,12314:2519,12315:21F7,12321:2367,12322:2334,12323:22C9,12324:23D5,12325:2125,12331:235D,12332:2294,12333:22DB,12334:242F,12335:20E7,12341:25B1,12342:243E,12343:2443,12344:2400,12345:2276,12351:21D9,12352:20F9,12353:20F8,12354:21FB,12355:205D,12356:204E,12511:21EE,12512:2113,12513:21E3,12514:21A5,12515:205B,12516:2041,12522:20DC,12523:20FB,12524:20E0,12525:1FB4,12526:1F84,12533:20DA,12534:2252,12535:2019,12536:2000,12543:2278,12545:203A,12546:2044,12555:2008,12556:1F0A,12566:1F1B,12567:1F75,15111:22E0,15112:21CB,15114:21DA,15115:2118,15116:20DE,15122:2101,15123:21DB,15124:21A1,15125:205B,15126:2036,15133:210D,15134:222F,15135:2062,15136:2018,15143:21E0,15145:2062,15146:2050,15155:20C7,15156:1F74,15166:1F84,15167:1FFA,15222:209E,15223:20CC,15224:2140,15225:1FB8,15226:1F81,15234:238B,15235:2088,15236:2063,15243:2217,15245:201E,15246:1FF5,15255:204B,15256:1EEF,15266:1EE0,15267:1F41,15322:20F1,15325:2077,15326:205D,15342:228F,15345:203E,15346:2027,15353:1FC1,15355:1FEC,15356:1EF2,15363:1F8F,15365:1EF7,15366:1F04,15367:1F54,22111:2404,22112:23D1,22113:23F8,22114:2389,22115:2186,22122:240E,22123:23C5,22124:2356,22125:2157,22133:22C6,22134:2404,22135:2121,22143:24EE,22145:216A,22155:202D,22156:201C,22211:2359,22212:2368,22213:22E4,22214:2326,22215:20C3,22223:2300,22224:23B0,22233:22CE,22234:240F,22235:20D2,22243:229B,22245:209C,22311:23F6,22312:23C3,22313:2358,22314:23FA,22315:21A5,22321:23C3,22322:2391,22323:22BF,22324:22DD,22325:2102,22331:22BE,22332:22BD,22333:2256,22334:22AB,22335:2060,22341:24E3,22342:233F,22343:22C7,22344:2248,22345:211E,22351:2166,22352:20F2,22353:208D,22354:20C8,22355:1FD6,22356:1FD2,22511:2172,22512:2138,22513:216F,22514:20EE,22515:1FFD,22516:1FEA,22522:21FE,22523:20E0,22524:20CD,22525:203A,22526:1FF2,22533:2053,22534:2119,22535:1FCB,22536:1F8C,22543:212B,22545:1FC0,22546:1FCC,22555:1FFE,22556:1EF8,22566:1F0B,22567:1F71,23111:2520,23112:23FC,23114:253F,23115:228D,23121:23FC,23122:23C9,23123:2358,23124:2400,23125:21A5,23131:236B,23132:22C6,23133:22E9,23134:23D9,23135:211C,23141:266F,23142:24E7,23143:24FB,23144:2441,23145:22E9,23151:224C,23152:216A,23153:2176,23154:221F,23155:20D2,23156:20C7,23221:22E9,23222:2300,23223:2256,23224:22E4,23225:2091,23231:22EF,23232:22CE,23234:2397,23235:20B2,23241:2431,23242:2294,23243:2248,23244:22A9,23245:20CC,23251:20F4,23252:209E,23253:2053,23254:20F9,23255:1FB4,23256:1FB3,23321:2354,23322:22BF,23324:2287,23325:20AB,23341:24FB,23342:22C7,23343:234B,23344:223B,23345:211F,23351:216F,23352:208D,23353:20DF,23354:20BF,23355:1FCD,23356:1FC8,23441:2500,23442:22C5,23444:229B,23445:212E,23451:22E9,23452:2122,23453:2120,23454:20CB,23455:209D,23456:20C0,23551:2094,23552:1FBE,23554:204C,23555:2010,23556:1F76,23561:20B4,23562:1FCB,23564:2051,23565:1F5F,23567:1FDB,25111:223E,25112:2155,25113:2249,25114:21A0,25115:20A2,25116:2091,25122:2124,25123:214D,25124:20D5,25125:1FF5,25126:1FD7,25133:20DF,25134:21FE,25135:2031,25136:2026,25143:22E8,25145:208B,25146:2091,25155:203D,25156:1F57,25166:1F62,25167:1FB1,25211:2114,25212:20A3,25213:20D7,25214:20E5,25215:1FBF,25216:1F9E,25223:206F,25224:20BE,25233:209A,25234:21AF,25235:1FEB,25236:1FB8,25243:20D0,25245:1FAA,25246:1F9A,25311:2247,25312:215B,25313:215C,25314:2207,25315:20C7,25316:20B9,25321:2157,25322:20D0,25323:2086,25324:20AF,25325:1FDD,25326:1FC3,25331:20DC,25332:203D,25333:2071,25334:20E4,25335:1FB8,25336:1FAA,25341:22DD,25342:2122,25343:2132,25344:20CA,25345:209C,25346:20AC,25351:207F,25352:1FB9,25353:1FBC,25354:2027,25355:2022,25356:1F68,25361:208C,25362:1FBE,25363:1FB7,25364:202B,25365:1F5A,25366:1F60,25367:1FC9,25511:2086,25512:1FD2,25513:2086,25514:200F,25515:2008,25516:1F4A,25522:2045,25523:1FBB,25524:1FB8,25525:1FF8,25526:1EE6,25533:1FB1,25534:2063,25535:202E,25536:1F1F,25543:20A9,25545:2012,25546:1F57,25555:20F0,25556:1F21,25566:1ED2,25567:1F1C,25611:20A8,25612:1FDE,25613:208F,25614:2011,25615:1F4D,25616:1F3B,25617:1F9B,25622:1FF0,25623:1FAE,25624:1F7A,25625:1EEE,25626:1EDF,25627:1F57,25633:1F9B,25634:205A,25635:1F21,25636:1F12,25637:1F7A,25643:20B1,25645:1F58,25646:1F61,25647:1FC9,25655:1F5C,25656:1ECC,25657:1F08,25666:1F2C,25667:1F04,25677:1F0C,25678:2000,55111:215A,55112:2090,55114:206D,55115:20BF,55116:1FC1,55122:1FE5,55123:2087,55124:2014,55125:201D,55126:1F45,55133:1FCA,55134:204E,55135:201C,55136:1EFD,55143:2096,55145:2008,55146:1F44,55155:20FB,55156:1F16,55166:1ED1,55167:1F02,55223:1FAD,55224:2003,55234:2161,55235:20D4,55236:1F71,55243:204A,55245:203A,55246:1F20,55322:1FC9,55325:206F,55326:1F7A,55342:20D7,55345:2020,55346:1F50,55353:1FFB,55355:20F0,55356:1F2C,55363:1F03,55365:1F4E,55366:1EC5,55367:1F05,55555:23C8,55556:2030,55566:1F17,55567:1F5A,55666:1F2C,55667:1EDA,55678:1FDB,56111:2159,56112:209F,56114:204F,56115:1FBA,56117:203B,56122:1FD6,56123:208B,56124:2005,56125:1F32,56127:1F95,56133:1FA9,56134:202F,56135:1EE0,56137:1F55,56143:2095,56145:1F2E,56147:1FA7,56155:1F2E,56156:1EC7,56157:1EDC,56177:1F04,56178:2006,56223:1FA6,56224:1FAC,56234:211E,56235:1F49,56237:1FA5,56243:204B,56245:1F05,56247:1F76,56322:1FBC,56325:1F75,56327:1FDC,56342:20DC,56345:1F4E,56347:1FBC,56353:1EE4,56355:1F24,56356:1EBC,56357:1EFB,56373:1F60,56375:1F02,56377:1EFF,56378:1FF7,56555:205D,56556:1F0B,56557:1F50,56567:1EDA,56577:1EDD,56578:1FBF,56777:1F66,56778:1FC5." +
  "1|12345:1B0W|N:1280|11111:12D4,11116:10F2,11166:1005,11167:1007,11666:1010,11667:F70,11678:102C,16666:10F6,16667:F9E,16677:F6E,16678:F95,11112:11A5,11115:11EA,11122:1156,11123:1130,11124:112C,11125:114A,11126:1037,11144:1192,11145:11BB,11146:104F,11154:1132,11156:1057,11222:118F,11223:110B,11225:1138,11226:102A,11233:1114,11234:119B,11235:1181,11236:1029,11244:113C,11245:11C8,11246:1031,11254:11A2,11256:102C,11266:FA7,11267:FB9,11335:119B,11336:104E,11345:1271,11346:107C,11354:118A,11356:102B,11366:FAD,11367:FC1,11433:1114,11436:1030,11453:119F,11456:102A,11464:1035,11466:F91,11467:FB4,12346:119C,12354:12F4,12356:1112,12366:1027,12367:104E,12433:1179,12436:10C7,12453:12A4,12456:10C2,12464:103A,12466:FC3,12467:FF9,12666:1028,12667:F7D,12678:1007,13222:114A,13223:1121,13224:1166,13226:101E,13254:12C5,13256:10CD,13266:FCB,13267:1003,13422:115C,13426:10D6,13452:12BA,13456:10C4,13463:1024,13464:101D,13466:FA8,13467:FE7,13633:1068,13636:F98,13637:FA9,13656:FBA,13657:1003,13666:FBD,13667:F5D,13677:F6B,13678:FD1,21111:11E8,21112:117F,21113:1169,21116:105C,21123:112B,21126:1032,21133:1135,21134:11A7,21136:1052,21154:11AA,21156:103F,21166:FA4,21167:FBC,21436:1133,21453:1337,21456:1113,21464:1047,21466:FEB,21467:1029,21666:FFF,21667:F9B,21678:1012,23111:1160,23112:1135,23114:11A8,23116:104A,23156:1117,23166:1021,23167:103E,23411:11A3,23416:112E,23451:1332,23456:110A,23462:104B,23463:1049,23464:1041,23466:FE7,23467:101F,23622:107D,23623:1042,23626:F98,23627:FBE,23633:106E,23634:104E,23636:F9C,23637:FBB,23656:FE4,23657:1029,23666:FBE,23667:F7E,23677:F77,23678:FE8,26222:1143,26226:1013,26227:102A,26256:FAB,26257:FD3,26266:FDB,26267:F67,26277:F84,26278:1003,26466:FB2,26467:F85,26476:F79,26478:FF4,26666:1069,26667:F7F,26677:F5F,26678:FA1,26777:F95,26778:FA8,66666:124D,66667:1062,66677:FC1,66678:FFA,66778:FE2.";
precalculated_games_5columns_1st_level[0][4] =
  "1|11234:0B4W|N:429|22113:58E,22143:578,22311:571,22341:55F,23111:5ED,23112:569,23115:524,23121:56A,23142:55A,23143:556,23145:4FC,23151:51B,23341:558,23441:55A,23451:4FD,25113:520,25143:506,25311:517,25341:504,11111:66F,11112:5DD,11114:5FF,11115:57B,11122:57D,11123:5D0,11124:5F0,11125:53A,11133:599,11134:621,11135:56A,11143:5DA,11145:53D,11155:57C,11156:535,11222:5B9,11223:5B9,11224:5ED,11225:561,11235:5DC,11243:643,11245:596,11255:5BB,11256:58A,11322:5A4,11325:568,11342:61E,11345:562,11353:53E,11355:57D,11356:53C,11555:5D6,11556:591,11567:57F,12111:60A,12112:575,12113:5C8,12114:5E2,12115:52C,12122:591,12123:57B,12124:593,12125:500,12133:585,12134:62E,12135:544,12143:5F2,12145:51F,12155:538,12156:4E7,12211:584,12212:586,12213:587,12214:5A9,12215:50F,12222:5DE,12223:591,12224:5AB,12225:533,12233:55D,12234:5DA,12235:53E,12243:59A,12245:50F,12255:547,12256:516,12311:5C3,12312:572,12313:56F,12314:608,12315:520,12321:573,12322:59B,12323:53D,12324:596,12325:4FC,12331:583,12332:54C,12333:585,12334:5A9,12335:507,12341:5EF,12342:57C,12343:580,12344:58C,12345:52A,12351:522,12352:4F7,12353:4F4,12354:544,12355:531,12356:4DF,12511:524,12512:4F8,12513:51C,12514:545,12515:530,12516:4DE,12522:550,12523:4FB,12524:520,12525:532,12526:4F4,12533:50B,12534:57E,12535:55F,12536:516,12543:533,12545:535,12546:4E4,12555:576,12556:523,12566:525,12567:50A,15111:5D0,15112:52F,15114:55C,15115:578,15116:528,15122:4FB,15123:526,15124:54D,15125:539,15126:4E8,15133:517,15134:587,15135:565,15136:51A,15143:532,15145:53C,15146:4E8,15155:583,15156:530,15166:52F,15167:507,15222:53A,15223:51A,15224:548,15225:555,15226:523,15234:5DC,15235:5AD,15236:576,15243:560,15245:56E,15246:526,15255:5C2,15256:576,15266:575,15267:55F,15322:502,15325:549,15326:4F8,15342:53F,15345:542,15346:4F1,15353:538,15355:582,15356:531,15363:4FD,15365:52E,15366:52F,15367:516,15555:5FF,15556:5A1,15566:59A,15567:57D,15666:59F,15667:57A,15678:596,22111:5B1,22112:5A8,22114:59C,22115:508,22122:5E0,22123:587,22124:59E,22125:520,22133:525,22134:5A7,22135:4FB,22145:4D7,22155:511,22156:4CE,22211:58D,22212:5B4,22213:56C,22214:57C,22215:500,22222:62B,22223:5A1,22224:5CB,22225:555,22233:546,22234:5B5,22235:519,22243:581,22245:4F3,22255:533,22256:4F3,22312:56F,22313:514,22314:56D,22315:4C6,22321:578,22322:5C8,22323:546,22324:5A6,22325:507,22331:51E,22332:558,22333:534,22334:548,22335:4D2,22342:586,22343:52A,22344:52E,22345:4E2,22351:4CB,22352:509,22353:4BE,22354:4F3,22355:4EE,22356:4B1,22511:4F6,22512:513,22513:4CD,22514:4E3,22515:4FC,22516:4BE,22522:59D,22523:50A,22524:53A,22525:552,22526:517,22533:4D0,22534:521,22535:513,22536:4DD,22543:4E6,22545:4F3,22546:4B4,22555:535,22556:4EF,22566:4F2,22567:4F2,23114:601,23122:565,23123:51C,23124:56F,23125:4CA,23131:580,23132:524,23133:566,23134:578,23135:4D9,23141:5E8,23144:566,23152:4CB,23153:4C5,23154:50E,23155:509,23156:4AC,23221:569,23222:594,23223:535,23224:58B,23225:4EC,23231:534,23232:53D,23234:55C,23235:4E4,23241:56A,23242:575,23243:529,23244:53B,23245:4EF,23251:4D7,23252:4EA,23253:4C7,23254:508,23255:4FB,23256:4C6,23321:521,23322:53D,23324:542,23325:4C9,23342:522,23343:577,23344:52A,23345:4DA,23351:4C8,23352:4C1,23353:4F4,23354:4F1,23355:4EA,23356:4B2,23442:527,23444:578,23445:4DE,23452:4D4,23453:4D9,23454:4E9,23455:51E,23456:4C0,23551:509,23552:4E8,23554:53B,23555:52F,23556:4D6,23561:4AB,23562:4AB,23564:4DE,23565:4D3,23567:4C7,25111:562,25112:4ED,25114:53B,25115:532,25116:4DB,25122:50C,25123:4CB,25124:4E6,25125:4FA,25126:4BC,25133:4D6,25134:53E,25135:525,25136:4D0,25145:50A,25146:4AC,25155:53E,25156:4DE,25166:4E1,25167:4CE,25211:505,25212:4F3,25213:4D9,25214:4F6,25215:500,25216:4C7,25222:54A,25223:4F6,25224:518,25225:52F,25226:4EF,25233:4EB,25234:545,25235:52E,25236:4FF,25243:4FE,25245:506,25246:4D2,25255:547,25256:50D,25266:50C,25267:50F,25312:4C8,25313:4C8,25314:514,25315:508,25316:4AA,25321:4C6,25322:503,25323:4C8,25324:4FB,25325:4F4,25326:4B9,25331:4D7,25332:4D4,25333:4F0,25334:50F,25335:500,25336:4CD,25342:4E2,25343:4E3,25344:4EF,25345:524,25346:4CA,25351:502,25352:4EF,25353:4EE,25354:53E,25355:52B,25356:4DA,25361:4A9,25362:4B6,25363:4B6,25364:4E5,25365:4D8,25366:4D9,25367:4C9,25511:52D,25512:4F1,25513:509,25514:51F,25515:533,25516:4D8,25522:547,25523:4F6,25524:514,25525:52F,25526:4EF,25533:507,25534:572,25535:558,25536:50D,25543:530,25545:534,25546:4E0,25555:57C,25556:522,25566:521,25567:502,25611:4DC,25612:4B6,25613:4AF,25614:4C8,25615:4D7,25616:4D7,25617:4C4,25622:50B,25623:4B8,25624:4DD,25625:4EE,25626:4EE,25627:4F0,25633:4D2,25634:51F,25635:50C,25636:50B,25637:4FA,25643:4CE,25645:4DD,25646:4DC,25647:4CE,25655:522,25656:51C,25657:502,25666:51F,25667:503,25677:506,25678:52A,55111:5CD,55112:537,55114:562,55115:587,55116:52E,55122:500,55123:50E,55124:528,55125:541,55126:4E7,55133:510,55134:554,55135:56D,55136:516,55143:51A,55145:543,55146:4E8,55155:5B3,55156:54C,55166:549,55167:522,55222:535,55223:513,55224:53D,55225:552,55226:519,55234:5CB,55235:5AA,55236:564,55243:55E,55245:567,55246:51C,55255:5CC,55256:570,55266:569,55267:54E,55322:500,55325:546,55326:4F5,55342:53E,55345:53C,55346:4EA,55353:533,55355:587,55356:52D,55363:4F7,55365:52D,55366:528,55367:50F,55555:61A,55556:5B0,55566:59E,55567:57B,55666:59A,55667:572,55678:583,56111:57E,56112:4DB,56114:516,56115:52B,56117:505,56122:4C4,56123:4B4,56124:4D5,56125:4E4,56127:4D0,56133:4D7,56134:50B,56135:515,56137:4FF,56143:4C0,56145:4E5,56147:4D0,56155:54A,56156:546,56157:520,56177:521,56178:54B,56222:4FB,56223:4E0,56224:510,56225:517,56227:51C,56234:58A,56235:564,56237:551,56243:508,56245:51C,56247:507,56255:56F,56256:569,56257:54D,56277:54E,56278:56D,56322:4C9,56325:4F4,56327:4E1,56342:4E7,56345:4EA,56347:4DA,56353:4F4,56355:52A,56356:528,56357:50E,56373:4F9,56375:50D,56377:510,56378:531,56555:5A4,56556:598,56557:577,56567:574,56577:572,56578:582,56777:576,56778:584." +
  "1|12345:0B4W|N:1215|21134:1087,21154:108B,21436:104A,21456:1031,23114:1086,23156:103E,23411:108B,23416:1046,23456:102E,11111:135D,11112:1101,11115:11A8,11116:1140,11122:1039,11123:1062,11124:104A,11125:10A4,11126:FEE,11144:1057,11145:1137,11146:1083,11154:105C,11156:FEF,11166:10E3,11167:108A,11222:1090,11223:FE4,11225:1045,11226:FC7,11233:FE3,11234:10BB,11235:1105,11236:FCE,11244:102D,11245:1177,11246:1037,11254:10CC,11256:FC8,11266:102F,11267:FE8,11335:109A,11336:100D,11345:1245,11346:10E2,11354:1110,11356:1036,11366:10C2,11367:1089,11433:FE0,11436:FCE,11453:10CE,11456:FC9,11464:FB6,11466:1026,11467:FE5,11666:112F,11667:10C4,11678:10D7,12346:12BA,12354:1313,12356:11AA,12366:11FD,12367:119F,12433:111A,12436:10F5,12453:129D,12456:10EB,12464:1077,12466:1105,12467:10A8,12666:11EC,12667:1160,12678:1163,13222:10D5,13223:1015,13224:10BD,13226:FEC,13254:1257,13256:107D,13266:1073,13267:1012,13422:10BA,13426:107B,13452:125C,13456:1074,13463:FE2,13464:FDD,13466:106A,13467:1009,13633:10C9,13636:106B,13637:101F,13656:106C,13657:1011,13666:110F,13667:108D,13677:1090,13678:1074,16666:129B,16667:11AF,16677:1197,16678:1178,21111:11AC,21112:1057,21113:106A,21116:1026,21123:FCC,21126:F9D,21133:FBA,21136:F85,21156:F80,21166:FF2,21167:FA0,21453:1221,21464:F93,21466:1006,21467:FAB,21666:1095,21667:100C,21678:FFC,23111:1062,23112:FBC,23116:F90,23166:1025,23167:FBC,23451:121F,23462:F8E,23463:F84,23464:F7D,23466:100C,23467:FA2,23622:1025,23623:F8F,23626:FEC,23627:F99,23633:1011,23634:F91,23636:FE3,23637:F93,23656:FFD,23657:FA2,23666:107C,23667:FFB,23677:FFD,23678:FF3,26222:1227,26226:112F,26227:10C0,26256:FE5,26257:F93,26266:10E3,26267:1079,26277:107D,26278:1088,26466:1075,26467:FFD,26476:FFC,26478:FF5,26666:11B1,26667:10EB,26677:10DE,26678:10BB,26777:10F1,26778:10BD,66666:13DC,66667:128E,66677:124C,66678:11F9,66778:11EC.";
precalculated_games_5columns_1st_level[0][3] =
  "1|11122:0B3W|N:336|22213:48B,22313:447,22314:3FE,23311:456,23411:40B,11111:533,11112:526,11113:4A5,11123:4B4,11133:493,11134:459,11211:50A,11212:512,11213:472,11222:51C,11223:4AC,11233:45C,11234:420,11311:4AC,11312:498,11313:473,11314:426,11322:4D1,11323:482,11324:44B,11333:486,11334:42F,11344:42E,11345:407,12211:52C,12212:503,12213:491,12222:503,12223:476,12233:468,12234:419,12311:47A,12312:492,12313:444,12314:3FF,12322:477,12323:457,12324:416,12333:47E,12334:40F,12344:414,12345:3E4,13311:486,13312:472,13313:473,13314:408,13322:485,13323:4A3,13324:440,13333:4AD,13334:43D,13344:425,13345:402,13411:430,13412:422,13413:400,13415:3D4,13422:43E,13423:438,13425:410,13433:433,13434:421,13435:3FC,13455:3F9,13456:3F6,22211:542,22212:514,22222:528,22223:4A4,22233:482,22234:42D,22311:4B1,22312:460,22322:477,22323:44E,22324:401,22333:466,22334:3F3,22344:3F4,22345:3BE,23312:446,23313:46B,23314:3F3,23322:451,23323:456,23324:3F1,23333:487,23334:40D,23344:3FE,23345:3CC,23412:3FF,23413:3F4,23415:3C3,23422:404,23423:3EF,23425:3C5,23433:40A,23434:3F7,23435:3C9,23455:3C9,23456:3C7,33311:493,33312:48C,33313:492,33314:41C,33322:493,33323:4B1,33324:445,33333:4BA,33334:443,33344:430,33345:3FF,33411:418,33412:413,33413:411,33414:3F8,33415:3CB,33422:41A,33423:434,33424:41F,33425:3FC,33433:437,33434:421,33435:3F2,33444:41F,33445:3EA,33455:3E5,33456:3E6,34511:3EE,34512:3E2,34513:3C8,34516:3C8,34522:3FC,34523:3F7,34526:3F2,34533:3ED,34534:3E6,34536:3E1,34566:3E1,34567:407." +
  "1|11123:0B3W|N:796|22211:BC6,22231:B4D,22312:B14,22314:A1C,22331:AA6,22341:A0A,22411:A80,22431:A17,23412:A05,23414:A3A,23415:9B4,24411:AC7,24431:A68,24511:A39,24531:9CE,11111:C97,11112:C31,11113:C5A,11114:B75,11122:BDB,11124:BC6,11132:C65,11134:B79,11144:B71,11145:B02,11211:C17,11212:B49,11213:C23,11214:AF6,11221:B67,11222:B67,11223:BD0,11224:AC3,11231:BF5,11232:B84,11233:B9A,11234:B1F,11241:AE7,11242:A9E,11243:B51,11244:ADA,11245:A5D,11411:B95,11412:B22,11413:B57,11414:B0A,11415:A83,11422:AEE,11423:BD3,11424:B4D,11425:AD1,11432:B53,11434:B12,11435:A86,11444:B50,11445:A9C,11455:A9D,11456:A5D,12211:B79,12212:B55,12213:B9B,12214:A8A,12221:B34,12222:B93,12223:B5C,12224:A82,12231:B55,12232:B4C,12233:AD0,12234:A49,12241:A5C,12242:A9A,12243:A6F,12244:A40,12245:9D5,12311:C0D,12312:B44,12313:B4F,12314:AC8,12322:B24,12323:AD6,12324:A4D,12332:ABC,12334:A37,12344:A79,12345:9FB,12411:B08,12412:A57,12413:B15,12414:A99,12415:A10,12421:A6E,12422:A6F,12423:A9A,12424:A5A,12425:9F8,12431:AE5,12432:A50,12433:A69,12434:A8C,12435:A0C,12441:A92,12442:A40,12443:AB8,12444:AC1,12445:A06,12451:A04,12452:9CA,12453:A3C,12454:A03,12455:9FF,12456:9D4,14411:B50,14412:AD4,14413:B03,14414:B0A,14415:A3E,14422:A80,14423:B3A,14424:B36,14425:A71,14432:AD6,14434:AFE,14435:A34,14444:B89,14445:AA3,14455:A64,14456:A35,14511:AB3,14512:A31,14513:A6C,14514:A2F,14516:9EB,14522:A16,14523:AB9,14524:A65,14526:A3A,14532:A42,14534:A2A,14536:9F9,14544:A85,14545:A5C,14546:A26,14566:A21,14567:A3F,22212:BC6,22213:B8A,22214:AB4,22221:B9C,22222:C0D,22223:BAD,22224:AD0,22232:BAA,22233:AEB,22234:A6E,22241:A90,22242:B17,22243:AA8,22244:A7A,22245:A08,22311:B63,22313:AAE,22321:B03,22322:B34,22323:AA9,22324:A1C,22332:AA8,22333:AA5,22334:9C2,22342:A32,22343:9CF,22344:9F0,22345:979,22412:A5E,22413:A5A,22414:A2A,22415:9B1,22421:A48,22422:A88,22423:A4F,22424:A2F,22425:9B8,22432:A4C,22433:9DC,22434:9F8,22435:988,22441:A10,22442:A45,22443:A1C,22444:A36,22445:997,22451:98C,22452:9CF,22453:9B3,22454:992,22455:98B,22456:97B,23411:AFF,23413:A1A,23422:A1E,23423:9EA,23424:A01,23425:992,23432:9CA,23434:9F2,23435:976,23444:A75,23445:9AF,23455:9AB,23456:977,24412:A10,24413:A86,24414:A93,24415:9C7,24421:A20,24422:A2C,24423:A46,24424:A51,24425:9BD,24432:A0E,24433:A23,24434:A91,24435:9C8,24441:A94,24442:A3D,24443:AB6,24444:AD0,24445:9FB,24451:9C3,24452:993,24453:9F3,24454:9FC,24455:9C8,24456:9A1,24512:98C,24513:9F9,24514:9BD,24516:98A,24521:9A8,24522:9BA,24523:9E2,24524:9B7,24526:9A6,24532:99F,24533:9B2,24534:9C6,24536:98F,24541:9B9,24542:996,24543:9F0,24544:9F0,24545:9C5,24546:99B,24561:983,24562:97A,24563:9C0,24564:99C,24566:994,24567:9AA,44411:B71,44412:ADA,44413:B06,44414:B55,44415:A67,44422:A86,44423:B53,44424:B5C,44425:A76,44432:AFE,44434:B1B,44435:A3E,44444:BBE,44445:AC1,44455:A7A,44456:A35,44511:A7E,44512:9E2,44513:A0E,44514:A3F,44515:A0C,44516:9D1,44522:9DB,44523:A64,44524:A5D,44525:A25,44526:9FB,44532:A04,44534:A22,44535:9F0,44536:9C4,44544:A9A,44545:A5F,44546:A16,44555:A4B,44556:9FE,44566:9FA,44567:A15,45611:A38,45612:9A6,45613:9DB,45614:9C6,45617:9DF,45622:9C8,45623:A39,45624:9F7,45627:A0A,45632:9C9,45634:9C3,45637:9CE,45644:A0A,45645:9F7,45647:A0E,45677:A0F,45678:A5A." +
  "1|11223:0B3W|N:1450|22142:13A9,22144:1323,22145:1283,22332:145A,22334:12B0,22342:137D,22344:12C7,22345:1222,22441:131A,22451:1266,23134:128D,23144:12C0,23145:1221,23331:1400,23332:142B,23341:128C,23342:1287,23441:12DA,23442:12DF,23451:1234,23452:1229,24141:12F0,24151:1249,24331:128B,24332:12AD,24341:12C6,24342:12CE,24351:1227,24352:1220,11111:163D,11112:1523,11113:1540,11114:13E5,11121:1566,11122:1541,11123:15E4,11124:141F,11131:14E7,11132:14FF,11133:142D,11134:1359,11141:13CC,11142:1387,11143:13DA,11144:1365,11145:12D4,11221:15C8,11224:153E,11231:1572,11232:1630,11233:1546,11234:148C,11241:1418,11242:144A,11243:1546,11244:1452,11245:13EE,11331:140E,11332:14AF,11333:1455,11334:1320,11341:1366,11342:13E9,11343:137B,11344:1378,11345:12FB,11441:137C,11442:1392,11443:142B,11444:1411,11445:1338,11451:12DB,11452:12FA,11453:13BA,11454:1334,11456:1312,12111:1556,12112:153B,12113:154F,12114:139C,12121:1526,12123:164E,12124:13D8,12131:14E5,12132:15A8,12133:145B,12134:1370,12141:1357,12142:1390,12143:13C9,12144:1302,12145:126B,12231:15D2,12232:152C,12233:14B8,12234:13DD,12241:13BF,12242:13C5,12243:1468,12244:139E,12245:130E,12331:1432,12332:1471,12333:1427,12334:12C7,12341:136B,12342:13AC,12343:12FC,12344:130F,12345:1278,12441:1305,12442:1374,12443:1386,12444:137B,12445:128D,12451:1272,12452:12C2,12453:12F7,12454:127E,12456:1260,13111:1531,13112:14F4,13113:1415,13114:132F,13131:13F8,13132:1423,13133:13FC,13134:12A8,13141:1333,13142:1377,13143:12D9,13144:12E0,13145:124B,13231:148E,13233:14BD,13234:1374,13241:13F3,13242:13F0,13243:13C6,13244:13CE,13245:134C,13331:1412,13332:1454,13333:14C0,13334:1352,13341:12BE,13342:12D4,13343:1338,13344:12E1,13345:126B,13441:131E,13442:132F,13443:133C,13444:13C1,13445:12CE,13451:1272,13452:128A,13453:12D5,13454:12CB,13456:12A1,14111:147D,14112:137F,14113:1397,14114:1363,14115:12B2,14131:1331,14132:137A,14133:12DA,14134:12E6,14135:124C,14141:134C,14142:1315,14143:1355,14144:1362,14145:1276,14151:1298,14152:1275,14153:12C6,14154:126F,14155:1270,14156:1240,14241:13A0,14243:147C,14244:146C,14245:1375,14251:1310,14253:1411,14254:1370,14256:134E,14331:12B3,14332:12EC,14333:1333,14334:12D9,14335:1258,14341:12FA,14342:1323,14343:1315,14344:139D,14345:12B7,14351:1257,14352:1289,14353:12B6,14354:12B6,14355:12BA,14356:1290,14441:137E,14442:138E,14443:1431,14444:14D0,14445:137C,14451:127B,14452:1292,14453:1355,14454:1379,14455:1334,14456:1307,14551:1287,14552:1298,14553:135D,14554:1334,14555:137A,14556:1302,14561:1241,14562:1263,14563:1334,14564:130A,14565:1300,14567:1337,22111:15CA,22113:1639,22114:1412,22131:15BB,22132:152A,22133:145E,22134:1370,22141:13B0,22143:13BB,22331:143A,22333:140C,22341:1358,22343:12B5,22442:13FD,22443:1343,22444:139A,22445:1278,22452:130B,22453:12A3,22454:1266,22456:1228,23131:142B,23133:13F7,23141:1349,23142:134B,23143:12B6,23333:145C,23334:12E4,23343:12C8,23344:1279,23345:11DD,23443:1292,23444:131A,23445:1218,23453:1215,23454:121A,23456:1203,24143:130C,24144:1331,24145:121E,24153:127E,24154:1214,24156:11FA,24333:12CF,24334:127E,24335:11E1,24343:1295,24344:131E,24345:1217,24353:1212,24354:1210,24355:1218,24356:11FE,24441:133A,24442:1380,24443:1370,24444:1430,24445:12DD,24451:121B,24452:1256,24453:1280,24454:12CC,24455:128D,24456:125C,24551:1222,24552:1269,24553:1281,24554:128B,24555:12D9,24556:125A,24561:11F3,24562:1214,24563:125B,24564:125C,24565:1254,24567:1287,33331:14D5,33333:15C3,33334:1437,33341:12FF,33342:12ED,33343:1394,33344:1327,33345:128B,33441:129D,33442:1290,33443:12FF,33444:130D,33445:123D,33451:120C,33452:11F4,33453:1275,33454:123B,33456:1239,34341:127B,34343:1303,34344:1314,34345:1249,34351:11E6,34353:1281,34354:1244,34356:1231,34441:1335,34442:1330,34443:1334,34444:13F8,34445:12CD,34451:1226,34452:122D,34453:1282,34454:12C7,34455:1291,34456:126E,34551:122E,34552:122E,34553:127F,34554:1295,34555:12C3,34556:126C,34561:1200,34562:1208,34563:127F,34564:1273,34565:126E,34567:1297,44441:1430,44443:147E,44444:15DC,44445:1410,44451:12D1,44452:12D0,44453:133D,44454:13F6,44455:1398,44456:133F,44551:1292,44553:1306,44554:1399,44556:1324,44561:125E,44562:125D,44563:12E7,44564:1338,44565:1317,44567:1350,45451:1290,45453:1308,45454:1396,45456:1324,45461:1258,45463:12EA,45464:1342,45465:1317,45467:134F,45671:1288,45673:131F,45674:134B,45678:1400." +
  "1|11234:0B3W|N:3095|22111:2DE5,22112:2D85,22115:2AEC,22123:2C83,22145:2A5C,22312:2C71,22313:2B61,22315:2A3C,22321:2C6C,22342:2C17,22343:2AD5,22345:29FE,22351:2A48,22511:2AC4,22513:2A43,22543:2A0C,23122:2C61,23123:2B45,23125:2A3E,23152:2A3E,23153:2A2D,23155:2A93,23156:2A1A,23321:2B5B,23342:2ADE,23343:2BF5,23345:29E8,23351:2A2C,23442:2AE4,23445:29EA,23452:29E6,23453:29DE,23455:2A64,23456:2A00,23551:2A9D,23561:2A17,25111:2C66,25112:2AA1,25115:2B05,25116:2A3A,25123:2A3B,25145:2A9A,25146:2A0D,25312:2A40,25313:2A37,25315:2AC2,25316:2A09,25321:2A3F,25342:29F8,25343:29EA,25345:2A80,25346:2A00,25351:2AA6,25361:2A0F,25511:2B01,25513:2A9F,25543:2A87,25611:2A3D,25613:2A0C,25643:2A02,55112:2B18,55123:2AC0,55143:2ADB,55342:2AF4,56112:2A3B,56123:2A22,56143:2A43,56342:2A46,11111:3274,11112:2E52,11114:2F6D,11115:2DA9,11122:2CFB,11123:2E9A,11124:2F87,11125:2C22,11133:2D8F,11134:3108,11135:2D5C,11143:2EB5,11145:2C26,11155:2CCF,11156:2C02,11222:2DD7,11223:2E6A,11224:2FD3,11225:2CB7,11235:2FF3,11243:3283,11245:2E05,11255:2DC8,11256:2D60,11322:2DB4,11325:2CD7,11342:319C,11345:2CB8,11353:2BCE,11355:2C5E,11356:2BCC,11555:2DFC,11556:2C4D,11567:2C2A,12111:2F03,12112:2CE4,12113:2E39,12114:2EE4,12115:2BCE,12122:2D18,12123:2CE3,12124:2D93,12125:2AD9,12133:2D3A,12134:3242,12135:2C87,12143:30A6,12145:2B9E,12155:2B41,12156:2AA4,12211:2D1E,12212:2CDA,12213:2D54,12214:2E45,12215:2B40,12222:2EAD,12223:2D50,12224:2E42,12225:2BE9,12233:2CFC,12234:3128,12235:2D0D,12243:2EC4,12245:2BC6,12255:2BF9,12256:2B7A,12311:2E3C,12312:2CD6,12313:2CD2,12314:3140,12315:2BB5,12321:2CD5,12322:2D48,12323:2BFE,12324:2ECC,12325:2B2E,12331:2D52,12332:2C4D,12333:2D32,12334:2F9C,12335:2BB3,12341:308F,12342:2E12,12343:2E03,12344:2EB4,12345:2CF6,12351:2BA7,12352:2B1D,12353:2B04,12354:2DB3,12355:2B8D,12356:2AF2,12511:2BC2,12512:2AC2,12513:2B9F,12514:2C80,12515:2B37,12516:2A81,12522:2BF1,12523:2B18,12524:2C05,12525:2B33,12526:2AB0,12533:2BB6,12534:2F0A,12535:2CA5,12536:2C14,12543:2D00,12545:2B8A,12546:2AE4,12555:2C86,12556:2B24,12566:2B2E,12567:2AFE,15111:2EB7,15112:2BBB,15114:2CC7,15115:2C9A,15116:2B81,15122:2AC5,15123:2BA8,15124:2C8A,15125:2B48,15126:2A8D,15133:2B57,15134:2DF7,15135:2C45,15136:2BAC,15143:2BCA,15145:2B48,15146:2A8B,15155:2CB4,15156:2B28,15166:2B21,15167:2ABD,15222:2BE8,15223:2BBE,15224:2CF0,15225:2BD7,15226:2B5F,15234:310E,15235:2E3D,15236:2DA4,15243:2DD4,15245:2CAD,15246:2C06,15255:2DB3,15256:2C6C,15266:2C62,15267:2C3A,15322:2B1E,15325:2BA9,15326:2B16,15342:2D2B,15345:2B95,15346:2AFF,15353:2B38,15355:2C8B,15356:2B37,15363:2AA2,15365:2B30,15366:2B2F,15367:2AED,15555:2F13,15556:2C93,15566:2C1F,15567:2BF8,15666:2C89,15667:2BDF,15678:2C9C,22113:2CE4,22114:2D71,22122:2ED0,22124:2D3C,22125:2B5A,22133:2B82,22134:2ECA,22135:2B03,22143:2D95,22155:2A77,22156:29F5,22211:2CEF,22212:2DB4,22213:2C74,22214:2D0A,22215:2AEC,22222:317C,22223:2D01,22224:2DE8,22225:2CA4,22233:2BAD,22234:2DA5,22235:2B56,22243:2C2E,22245:2A95,22255:2B7A,22256:2AEB,22311:2CBD,22314:2DD9,22322:2DDC,22323:2BB1,22324:2CC3,22325:2AD1,22331:2B81,22332:2BD5,22333:2B63,22334:2BCA,22335:2A03,22341:2D65,22344:2B30,22352:2ABC,22353:2996,22354:2A9E,22355:29F7,22356:2992,22512:2B21,22514:2AD5,22515:2A5B,22516:29C7,22522:2DCC,22523:2AC5,22524:2B6E,22525:2BD6,22526:2B0E,22533:29F6,22534:2B95,22535:2A8B,22536:2A49,22545:29FD,22546:299B,22555:2B8D,22556:2A55,22566:2A56,22567:2A87,23111:2E8B,23112:2CAE,23114:30C9,23115:2B80,23121:2CBA,23124:2DD5,23131:2D0C,23132:2B6E,23133:2C5A,23134:2E5C,23135:2AB3,23141:303C,23142:2D51,23143:2D52,23144:2DD3,23145:2C10,23151:2B53,23154:2C94,23221:2C5C,23222:2CC0,23223:2B57,23224:2C8E,23225:2A7D,23231:2BF8,23232:2B89,23234:2C77,23235:2A8E,23241:2DD5,23242:2BF0,23243:2B1D,23244:2B9D,23245:2A6A,23251:2AA8,23252:2A72,23253:29DE,23254:2B30,23255:2A59,23256:2A1C,23322:2B8C,23324:2B6C,23325:29B7,23341:2D52,23344:2B2B,23352:2991,23353:2AA1,23354:2A7C,23355:29EC,23356:2987,23441:2D5E,23444:2BFA,23451:2C1D,23454:2A5E,23552:29DC,23554:2B13,23555:2B0D,23556:29F4,23562:297F,23564:2AAC,23565:29ED,23567:2A0F,25113:2B61,25114:2C13,25122:2B03,25124:2AD5,25125:2A5C,25126:29AD,25133:2AAE,25134:2D5A,25135:2B3B,25136:2ABE,25143:2C3B,25155:2B63,25156:2A0E,25166:2A09,25167:29EA,25211:2AF8,25212:2ADC,25213:2AB6,25214:2B77,25215:2AB7,25216:2A28,25222:2C8A,25223:2A86,25224:2B41,25225:2B66,25226:2AC8,25233:2A86,25234:2C68,25235:2B3A,25236:2B00,25243:2A87,25245:2A6B,25246:2A1A,25255:2BE2,25256:2AD0,25266:2AD7,25267:2B0D,25311:2B69,25314:2C9B,25322:2AA7,25323:299D,25324:2A9F,25325:29F4,25326:298D,25331:2AAF,25332:29EE,25333:2A6A,25334:2B26,25335:2A59,25336:2A05,25341:2C28,25344:2A6D,25352:29E6,25353:29E6,25354:2B1E,25355:2B0E,25356:29FA,25362:297F,25363:2973,25364:2AA1,25365:29EE,25366:29F3,25367:29F5,25512:2A58,25514:2B46,25515:2B5E,25516:2A03,25522:2BC9,25523:29F9,25524:2A86,25525:2B7E,25526:2A51,25533:2A5E,25534:2C2A,25535:2BC4,25536:2AC3,25545:2B17,25546:29FF,25555:2D39,25556:2B31,25566:2ABB,25567:2ACC,25612:29A7,25614:2ABA,25615:2A08,25616:2A04,25617:29D1,25622:2AEA,25623:298D,25624:2A39,25625:2A45,25626:2A45,25627:2A4E,25633:2A1F,25634:2BBC,25635:2AB9,25636:2AAC,25637:2AC7,25645:2A02,25646:29F2,25647:2A04,25655:2B31,25656:2AAC,25657:2ABA,25666:2B31,25667:2AB8,25677:2AB8,25678:2B6C,55111:2DE7,55114:2BF0,55115:2CE2,55116:2AF1,55122:2A67,55124:2B6E,55125:2B80,55126:2A1E,55133:2ACD,55134:2C7D,55135:2C4E,55136:2B05,55145:2B97,55146:2A27,55155:2E0B,55156:2B93,55166:2B20,55167:2AD9,55222:2B78,55223:2A84,55224:2B52,55225:2BEE,55226:2AD7,55234:2DDF,55235:2D29,55236:2C1F,55243:2B73,55245:2BEC,55246:2AE8,55255:2E61,55256:2C33,55266:2B8B,55267:2BD4,55322:2A03,55325:2B4D,55326:2A27,55345:2B33,55346:2A1B,55353:2B96,55355:2D33,55356:2B4A,55363:2A54,55365:2B35,55366:2AB8,55367:2ACB,55555:31F8,55556:2DE8,55566:2CEE,55567:2C9F,55666:2CD1,55667:2C47,55678:2D43,56111:2C68,56114:2B10,56115:2AC9,56117:2A5F,56122:29AB,56124:2AC7,56125:2A0F,56127:29D4,56133:2A37,56134:2BD3,56135:2AE8,56137:2A9F,56145:2A14,56147:29DB,56155:2B7E,56156:2B14,56157:2ABD,56177:2AC5,56178:2B76,56222:2AD2,56223:2A26,56224:2B0A,56225:2AD2,56227:2AF9,56234:2D6C,56235:2BFD,56237:2C1A,56243:2ACD,56245:2AD3,56247:2AD1,56255:2C11,56256:2B8C,56257:2BB3,56277:2BAE,56278:2C9A,56322:298A,56325:2A15,56327:2A13,56345:29FF,56347:2A00,56353:2A52,56355:2B3C,56356:2AB3,56357:2ABA,56373:2A61,56375:2AB3,56377:2AB9,56378:2B72,56555:2DC1,56556:2CC2,56557:2C7B,56567:2C4C,56577:2C2F,56578:2D1F,56777:2C7C,56778:2D13." +
  "1|12345:0B3W|N:5610|21113:5381,21123:5209,21133:51F7,21136:50DE,21156:50D0,21464:5109,21466:517B,21467:5147,23111:53A4,23112:51F9,23116:50D4,23166:51B9,23167:5180,23462:50E3,23463:50CD,23464:50CE,23466:5184,23467:513F,23634:50E0,23656:5169,23657:5143,11111:5EB9,11112:5600,11115:5749,11116:55E5,11122:53DB,11123:53C7,11124:53C2,11125:54CC,11126:523E,11144:5433,11145:56C0,11146:5391,11154:53E5,11156:524F,11166:53F6,11167:5331,11222:542F,11223:5272,11225:53A8,11226:516D,11233:5287,11234:5550,11235:566D,11236:51B0,11244:5390,11245:585A,11246:531C,11254:5560,11256:51B2,11266:51E3,11267:51B7,11335:5557,11336:529F,11345:5B5A,11346:5569,11354:568C,11356:5316,11366:537B,11367:535F,11433:5271,11436:51D6,11453:558A,11456:51BE,11464:5158,11466:51E5,11467:51B0,11666:548B,11667:52D6,11678:53CA,12346:5BA4,12354:6088,12356:581D,12366:5716,12367:570D,12433:56C0,12436:55B3,12453:5E98,12456:55A0,12464:53AD,12466:5468,12467:5452,12666:5630,12667:545C,12678:557F,13222:547E,13223:52E1,13224:5558,13226:51DF,13254:5D24,13256:53FA,13266:52AC,13267:5287,13422:5554,13426:542C,13452:5D1E,13456:53F0,13463:51E4,13464:51E1,13466:5280,13467:527A,13633:5354,13636:521A,13637:51B5,13656:5297,13657:5275,13666:53F9,13667:5259,13677:525E,13678:5308,16666:5886,16667:54C2,16677:5407,16678:549C,21111:5767,21112:5437,21116:525B,21126:50F5,21134:545A,21154:5484,21166:510E,21167:50CD,21436:5343,21453:5C58,21456:5304,21666:5308,21667:5136,21678:5212,23114:546D,23156:530C,23411:546E,23416:532E,23451:5C4D,23456:52F9,23622:524B,23623:50E8,23626:5104,23627:50B4,23633:5221,23636:5105,23637:50A6,23666:52AF,23667:5114,23677:512F,23678:51DC,26222:57DF,26226:5467,26227:5372,26256:510E,26257:50A6,26266:5419,26267:51FA,26277:51FB,26278:52F0,26466:52B4,26467:5138,26476:5124,26478:51DE,26666:5691,26667:531B,26677:527E,26678:52F7,26777:5339,26778:52E5,66666:5F7D,66667:57FD,66677:562F,66678:56A5,66778:5620.";
precalculated_games_5columns_1st_level[0][2] =
  "1|11112:0B2W|N:1105|22221:124B,22231:100D,22331:F9B,22341:EF4,23331:10A1,23341:F38,23451:EF9,11113:11F2,11121:129D,11122:11B5,11123:113B,11131:11A4,11132:11A4,11133:1148,11134:10AD,11221:1165,11222:1149,11223:101F,11231:1102,11232:103F,11233:10A4,11234:FF0,11331:111E,11332:111E,11333:110E,11334:1006,11341:1054,11342:1054,11343:FEC,11345:FAB,12221:1191,12222:118B,12223:1038,12231:FF7,12232:FD2,12233:F97,12234:F1D,12331:108D,12332:FC2,12333:107C,12334:F63,12341:FC2,12342:F36,12343:F4F,12345:F15,13331:1135,13332:1135,13333:1135,13334:1006,13341:FBE,13342:FBE,13343:FB1,13344:F69,13345:F1E,13451:F7B,13452:F7B,13453:F25,13456:F1E,22222:124C,22223:10E2,22232:1009,22233:FAC,22234:F2A,22332:F7C,22333:F8A,22334:E9B,22342:ECF,22343:E9E,22345:E6E,23332:FBE,23333:10A2,23334:F60,23342:EC2,23343:F2C,23344:EE3,23345:E91,23452:E93,23453:E9B,23456:E97,33331:1191,33332:1191,33333:1191,33334:1050,33341:FC4,33342:FC4,33343:FC4,33344:F72,33345:F07,33441:F6B,33442:F6B,33443:F5E,33445:EBD,33451:EF9,33452:EF9,33453:EEE,33454:EB7,33456:EA6,34561:F00,34562:F00,34563:EB5,34567:EE6." +
  "1|11122:0B2W|N:2196|22233:2024,22234:1EE3,22333:1F60,22334:1D71,22344:1D8B,22345:1D17,23313:1F1B,23314:1D5E,23413:1D43,23415:1CFF,33311:2040,33411:1E20,34511:1DC4,11111:242E,11112:23FE,11113:20E7,11123:21BE,11133:2066,11134:1F9D,11211:235B,11212:23BA,11213:2021,11222:2439,11223:213B,11233:1F95,11234:1E9A,11311:2118,11312:20F1,11313:1FCD,11314:1EC4,11322:2262,11323:2093,11324:1FAF,11333:2012,11334:1E7B,11344:1E8C,11345:1E30,12211:2461,12212:2394,12213:20BD,12222:236E,12223:207B,12233:1FD3,12234:1EAC,12311:2070,12312:20C5,12313:1F42,12314:1E3D,12322:20C9,12323:200E,12324:1EF3,12333:1F44,12334:1D7C,12344:1D8E,12345:1D48,13311:2031,13312:2017,13313:1FAB,13314:1DEE,13322:20E2,13323:2027,13324:1E96,13333:2085,13334:1E65,13344:1DCE,13345:1D87,13411:1EF8,13412:1EF8,13413:1DE2,13415:1D7E,13422:1FF6,13423:1E88,13425:1E57,13433:1E49,13434:1DCB,13435:1D77,13455:1D79,13456:1DA4,22211:256A,22212:23FC,22213:210F,22222:240A,22223:2104,22311:2154,22312:205F,22313:1FA6,22314:1E7D,22322:2028,22323:1F47,22324:1E29,23311:1F98,23312:1F90,23322:1F56,23323:1F4B,23324:1D90,23333:2015,23334:1DD1,23344:1D58,23345:1CDE,23411:1E7D,23412:1E77,23422:1E61,23423:1D7C,23425:1D36,23433:1DD7,23434:1D44,23435:1CCC,23455:1CE5,23456:1D06,33312:1FB0,33313:203E,33314:1E0B,33322:2021,33323:20F7,33324:1EA3,33333:220D,33334:1F18,33344:1E73,33345:1DD0,33412:1DDC,33413:1DE3,33414:1D58,33415:1CEC,33422:1E5D,33423:1E8F,33424:1E01,33425:1D9E,33433:1F0E,33434:1E40,33435:1DB0,33444:1E3F,33445:1D4E,33455:1D4D,33456:1D50,34512:1DB2,34513:1CEC,34516:1D0E,34522:1E46,34523:1DB5,34526:1DDD,34533:1DAA,34534:1D4E,34536:1D53,34566:1D67,34567:1DEB." +
  "1|11123:0B2W|N:4890|22212:4FA6,22214:48C5,22232:4D59,22234:4739,22241:489D,22332:4934,22334:4598,22342:4707,22344:458F,22345:4529,22412:485F,22414:4699,22415:459E,22432:4704,22434:4599,22435:4502,22441:46AC,22451:4599,23432:459B,23434:457B,23435:44F6,23444:4768,23445:451B,23455:4523,23456:45BE,24412:46AD,24414:485B,24415:45A7,24432:45AA,24434:4789,24435:4544,24441:4850,24451:459E,24512:456E,24514:457F,24516:459E,24532:44FB,24534:4518,24536:4598,24541:4576,24561:459A,44411:4C09,44412:48B7,44432:485A,44511:479E,44512:45A5,44532:4575,45611:475B,45612:45AE,45632:45CA,11111:5410,11112:509E,11113:5278,11114:4D86,11122:4F61,11124:4F0C,11132:5331,11134:4C4F,11144:4C54,11145:4B0B,11211:5074,11212:4D25,11213:5309,11214:4AD2,11221:4DC0,11222:4D75,11223:520D,11224:4A8D,11231:51F5,11232:4EBD,11233:4FC6,11234:4C37,11241:4AB6,11242:48FD,11243:4E3D,11244:49CB,11245:489D,11411:4D70,11412:4AE4,11413:4CA6,11414:4B3E,11415:4955,11422:4A47,11423:5139,11424:4C3A,11425:4AD3,11432:4C5A,11434:49D3,11435:4896,11444:4B66,11445:4868,11455:486D,11456:483D,12211:4DB8,12212:4D7F,12213:4F1E,12214:485E,12221:4CE0,12222:4DBF,12223:4FB7,12224:48CE,12231:4DF8,12232:4DFE,12233:4BCA,12234:48EA,12241:4849,12242:489D,12243:4A60,12244:4759,12245:4652,12311:517D,12312:4DF3,12313:4EA4,12314:4B0D,12322:4DED,12323:4D19,12324:4A13,12332:4B63,12334:48DB,12344:49B5,12345:485A,12411:4A8D,12412:4826,12413:4C4E,12414:48B0,12415:475F,12421:48EA,12422:489D,12423:4BF7,12424:4873,12425:4764,12431:4B31,12432:48CB,12433:49CB,12434:49C3,12435:482C,12441:4891,12442:4742,12443:4BA0,12444:493F,12445:46A7,12451:4749,12452:4624,12453:49D0,12454:46AF,12455:468B,12456:4690,14411:4B9E,14412:48DD,14413:4A73,14414:4B08,14415:477A,14422:4862,14423:4E4C,14424:4B9A,14425:4893,14432:49FE,14434:4976,14435:46AC,14444:4C0F,14445:47EF,14455:46F1,14456:4698,14511:4987,14512:476E,14513:48EE,14514:474C,14516:4707,14522:474E,14523:4C31,14524:4886,14526:4878,14532:4851,14534:469C,14536:4685,14544:47C4,14545:46FF,14546:466A,14566:4684,14567:4703,22211:4F03,22213:4EC9,22221:4D9E,22222:518B,22223:4D2B,22224:498B,22231:4D98,22233:4969,22242:4B16,22243:484F,22244:47C3,22245:4692,22311:4E18,22312:4D8E,22313:4B25,22314:4852,22321:4D43,22322:4BAB,22323:4931,22324:46F9,22331:4B1F,22333:48EF,22341:484E,22343:4608,22411:489B,22413:492C,22421:47E6,22422:4943,22423:4808,22424:472B,22425:4640,22431:484D,22433:45EA,22442:47AC,22443:4693,22444:4728,22445:450F,22452:4669,22453:4621,22454:450C,22455:44F7,22456:4505,23411:4AE7,23412:483C,23413:48D0,23414:48C4,23415:4759,23422:46B5,23423:46CF,23424:463A,23425:45DE,24411:48BD,24413:49CB,24421:4734,24422:471E,24423:47A6,24424:47BB,24425:45D6,24431:490E,24433:4646,24442:4731,24443:48C8,24444:49F9,24445:468B,24452:450E,24453:4662,24454:466A,24455:4558,24456:4562,24511:475F,24513:4841,24521:4632,24522:462E,24523:4743,24524:45B0,24526:45E4,24531:4772,24533:45CF,24542:44E3,24543:4648,24544:463A,24545:455E,24546:453B,24562:44F5,24563:46C5,24564:453A,24566:4534,24567:460A,44413:4A1B,44414:4C23,44415:4770,44422:47CE,44423:4AEE,44424:4C23,44425:480C,44434:4A4F,44435:469B,44444:50FF,44445:4A3E,44455:47FF,44456:47CC,44513:46EB,44514:4723,44515:4634,44516:45A6,44522:45A7,44523:484D,44524:47B6,44525:469B,44526:46AE,44534:465A,44535:4552,44536:452A,44544:49C4,44545:47E2,44546:4770,44555:47CC,44556:4688,44566:4671,44567:474B,45613:4706,45614:4592,45617:4623,45622:45E3,45623:48D8,45624:469A,45627:4797,45634:4534,45637:460C,45644:4752,45645:467D,45647:471F,45677:472B,45678:48B5." +
  "1|11223:0B2W|N:4962|22442:4A2C,22444:4960,22445:46A0,22452:4876,22454:464F,22456:4635,23334:4769,23344:461C,23345:4565,23444:4746,23445:458C,23454:4568,23456:45E7,24144:4860,24145:4608,24154:45E4,24156:461D,24334:4627,24335:4588,24344:4737,24345:4581,24354:456A,24355:456A,24356:45CB,24441:4836,24442:4950,24451:45DA,24452:4635,24551:45D8,24552:4646,24561:460B,24562:4616,33331:4CDD,33341:476C,33342:475A,33441:4633,33442:461F,33451:45A3,33452:4577,34341:4607,34351:4561,34441:4755,34442:4736,34451:4562,34452:455B,34551:456E,34552:457E,34561:45CE,34562:45CD,11111:52CA,11112:4F58,11113:4F4A,11114:4B31,11121:5046,11122:4F43,11123:5430,11124:4C20,11131:4DEB,11132:50AA,11133:4C40,11134:49A0,11141:4AF3,11142:4A34,11143:4AF4,11144:497A,11145:48A2,11221:50EF,11224:4EA7,11231:5217,11232:5384,11233:51AF,11234:4DE0,11241:4BE2,11242:4B97,11243:503D,11244:4BCC,11245:4B0E,11331:4B93,11332:4E75,11333:4C3D,11334:489F,11341:4976,11342:4BAD,11343:49C8,11344:48EA,11345:4887,11441:4984,11442:498D,11443:4AE0,11444:49FF,11445:4834,11451:487F,11452:48A6,11453:4A5A,11454:480B,11456:4839,12111:501D,12112:4F45,12113:5120,12114:49E4,12121:4EDA,12123:53B5,12124:4A49,12131:504A,12132:5171,12133:4E04,12134:4AA2,12141:49BF,12142:4971,12143:4B90,12144:4852,12145:4769,12231:5235,12232:50F9,12233:4F60,12234:4BCA,12241:4A2E,12242:4A9F,12243:4DC7,12244:49E8,12245:48E1,12331:4D7E,12332:4DD8,12333:4D06,12334:489A,12341:4A70,12342:4ACF,12343:4957,12344:48DF,12345:47F8,12441:4840,12442:48BA,12443:4A49,12444:4988,12445:472C,12451:475E,12452:47AB,12453:494C,12454:4718,12456:4754,13111:4EAA,13112:503C,13113:4BAE,13114:48EF,13131:4B87,13132:4D5E,13133:4B62,13134:478B,13141:48E2,13142:4A72,13143:484F,13144:47AB,13145:4717,13231:4E4D,13233:4EE2,13234:4A33,13241:4BA6,13242:4BDD,13243:4B84,13244:4AF6,13245:49ED,13331:4B85,13332:4D10,13333:4C79,13334:4824,13341:4785,13342:487B,13343:4863,13344:46E8,13345:4673,13441:47B1,13442:48F6,13443:4809,13444:488D,13445:46CF,13451:4711,13452:47F9,13453:47A6,13454:46A6,13456:471F,14111:4BE5,14112:49CE,14113:4A0A,14114:4945,14115:47E4,14131:48D6,14132:4A81,14133:485E,14134:47B4,14135:471E,14141:4928,14142:4864,14143:48E3,14144:4908,14145:46D8,14151:47C8,14152:4752,14153:4845,14154:46C2,14155:46AA,14156:46BD,14241:49CB,14243:4CEB,14244:4B87,14245:493C,14251:48BC,14253:4BCA,14254:491A,14256:494E,14331:47A3,14332:4885,14333:4886,14334:46EB,14335:4679,14341:47B0,14342:48BE,14343:47C9,14344:487C,14345:46BD,14351:4703,14352:47D0,14353:4791,14354:46B6,14355:46B6,14356:4713,14441:4920,14442:4975,14443:49E6,14444:4B51,14445:47EA,14451:469C,14452:46EA,14453:481F,14454:47BC,14455:46DD,14456:46E6,14551:46B5,14552:46FF,14553:4824,14554:46FC,14555:47CB,14556:46F5,14561:4693,14562:470B,14563:4892,14564:46E8,14565:46D3,14567:47B5,22111:50F5,22113:525F,22114:4A67,22131:51A6,22132:5064,22133:4D8E,22134:4A3A,22141:49D7,22142:4A1D,22143:4ACF,22144:47FC,22145:46F7,22331:4D4D,22332:4C6F,22333:4B70,22334:4787,22341:4A39,22342:493D,22343:47A3,22344:4748,22345:46A8,22441:483A,22443:4837,22451:471A,22453:477F,23131:4D41,23133:4C3D,23134:47D9,23141:49ED,23142:4A2E,23143:4857,23144:47FA,23145:4724,23331:4C63,23332:4C1A,23333:4BB3,23341:47B5,23342:476D,23343:475B,23441:47ED,23442:4761,23443:469B,23451:4710,23452:468D,23453:4631,24141:47EB,24143:48C9,24151:46BE,24153:47D8,24331:47CB,24332:4783,24333:4758,24341:47F6,24342:4739,24343:4691,24351:4710,24352:4670,24353:461C,24443:4835,24444:4A4E,24445:46EA,24453:466F,24454:46A7,24455:45EB,24456:45C4,24553:468A,24554:45E4,24555:46B9,24556:45CE,24563:46CF,24564:45BF,24565:45A3,24567:4676,33333:5143,33334:4ADC,33343:4976,33344:47F5,33345:46F3,33443:47A1,33444:47A8,33445:45B2,33453:46F4,33454:45B1,33456:45F2,34343:47A6,34344:47B4,34345:45B7,34353:46EC,34354:45B1,34356:45E2,34443:47FA,34444:49F1,34445:46E4,34453:4667,34454:46CF,34455:4606,34456:4611,34553:4670,34554:460B,34555:46DE,34556:4619,34563:46BD,34564:4619,34565:4606,34567:46EB,44441:4A68,44443:4B39,44444:512B,44445:4A7D,44451:46B4,44452:46A5,44453:47C1,44454:4A1B,44455:4861,44456:47F4,44551:45EF,44553:4704,44554:4852,44556:473D,44561:45B0,44562:45AA,44563:4724,44564:47D9,44565:471C,44567:47F9,45451:45E9,45453:470D,45454:484F,45456:474C,45461:459B,45463:4723,45464:47CF,45465:470B,45467:47F9,45671:465E,45673:4833,45674:47EB,45678:49CC." +
  "1|11234:0B2W|N:7051|22122:70A1,22125:696D,22155:67C9,22156:6755,22322:6EB7,22323:6B82,22325:68D7,22352:68B6,22353:6748,22355:670F,22356:6706,22512:693C,22515:67B6,22516:6718,22523:68C7,22545:6713,22546:6726,23322:6B57,23325:6774,23352:6752,23353:688E,23355:66FB,23356:66EF,23552:66E1,23555:686D,23556:66F7,23562:66E8,23565:66DC,23567:6800,25122:6939,25125:679D,25126:6701,25155:6916,25156:66EE,25166:66E7,25167:6770,25322:68AD,25323:6744,25325:66F1,25326:6703,25352:66E6,25353:66DC,25355:686F,25356:66D8,25362:66ED,25363:66CF,25365:66E7,25366:66CD,25367:67E2,25512:6794,25515:6904,25516:66F0,25523:66F7,25545:684F,25546:66D1,25612:6701,25615:66F0,25616:66D9,25617:674D,25623:6700,25645:66D5,25646:66CC,25647:67D5,55111:6D42,55115:6C2F,55116:6860,55122:67CB,55125:6911,55126:66F9,55145:6918,55146:6700,55322:66FF,55325:68D8,55326:671B,55345:6877,55346:670B,56111:6B76,56115:682D,56117:6899,56122:6717,56125:66D8,56127:6746,56145:66DD,56147:675D,56322:66EF,56325:66F9,56327:6800,56345:66CE,56347:67D4,11111:79BB,11112:7172,11114:72DC,11115:6F55,11122:6EC6,11123:7194,11124:7355,11125:6C1D,11133:6FB8,11134:7684,11135:6E0B,11143:718F,11145:6C06,11155:6C6D,11156:6B80,11222:6F5C,11223:70A9,11224:73B8,11225:6C61,11235:726D,11243:7AD4,11245:6ED6,11255:6D16,11256:6CFC,11322:6ED5,11325:6C90,11342:78BE,11345:6C7D,11353:6A68,11355:6ABD,11356:6A94,11555:6CF3,11556:69E1,11567:6A88,12111:71D0,12112:6EAE,12113:708E,12114:71AB,12115:6B4D,12122:6E82,12123:6DDF,12124:6F24,12125:697C,12133:6EF7,12134:7B2A,12135:6CC7,12143:7742,12145:6B05,12155:6968,12156:6925,12211:6EC3,12212:6E69,12213:6EE9,12214:70E9,12215:6AB6,12222:6F82,12223:6E91,12224:708E,12225:6A6C,12233:6E94,12234:79CB,12235:6D6B,12243:73FA,12245:6ACE,12255:69E4,12256:69C4,12311:7091,12312:6DC4,12313:6DCE,12314:78C4,12315:6B1C,12321:6DCD,12322:6DC7,12323:6BD5,12324:743E,12325:6969,12331:6EE6,12332:6C8F,12333:6E79,12334:7647,12335:6AE8,12341:7749,12342:7286,12343:7267,12344:73E4,12345:6E82,12351:6AFC,12352:6938,12353:6922,12354:706B,12355:6958,12356:690A,12511:6B62,12512:6970,12513:6B1D,12514:6C9B,12515:694B,12516:6913,12522:69A8,12523:6939,12524:6AFB,12525:6844,12526:67CF,12533:6ACE,12534:7360,12535:6B3A,12536:6AEE,12543:6E83,12545:6924,12546:6911,12555:6A45,12556:680E,12566:6817,12567:687F,15111:703D,15112:6B34,15114:6C9E,15115:6C1E,15116:6AAB,15122:69A7,15123:6AE6,15124:6C96,15125:6945,15126:68F4,15133:6A99,15134:6F36,15135:6AC2,15136:6AB9,15143:6AFA,15145:6951,15146:6902,15155:6BDB,15156:688E,15166:6876,15167:6909,15222:6A89,15223:6AC7,15224:6D4A,15225:69D6,15226:6984,15234:770D,15235:6E16,15236:6DA4,15243:7063,15245:6B25,15246:6AD7,15255:6C02,15256:69DB,15266:69D1,15267:6A7B,15322:6920,15325:695F,15326:68F9,15342:6EA7,15345:6936,15346:68FC,15353:6857,15355:6A2F,15356:680E,15363:67CD,15365:67F9,15366:6806,15367:6868,15555:6E3A,15556:6922,15566:67EC,15567:67E7,15666:6924,15667:67DF,15678:69AA,22111:6F9F,22112:6F78,22113:6D8C,22114:6E3C,22115:696C,22123:6D65,22124:6E11,22133:6BBB,22134:74AE,22135:69B3,22143:7187,22145:688F,22211:6E88,22212:6F13,22213:6D6A,22214:6EBA,22215:6999,22222:772A,22223:6DA6,22224:6EA5,22225:6C2A,22233:6B7E,22234:7040,22235:6A68,22243:6CA1,22245:6904,22255:696D,22256:68B5,22311:6D61,22312:6D28,22313:6B3A,22314:72CF,22315:6875,22321:6D30,22324:6D38,22331:6B91,22332:6B3A,22333:6B18,22334:6BF6,22335:67F6,22341:718B,22342:6C63,22343:6A0E,22344:6AA4,22345:681C,22351:6877,22354:691A,22511:6963,22513:6850,22514:699A,22522:6D90,22524:69A6,22525:699C,22526:6895,22533:67FF,22534:6B03,22535:6804,22536:681F,22543:681F,22555:6957,22556:66D5,22566:66CE,22567:6745,23111:704F,23112:6D51,23114:7772,23115:6A78,23121:6D4C,23122:6D1C,23123:6B1E,23124:72AE,23125:6862,23131:6DBF,23132:6B80,23133:6D3B,23134:7420,23135:6981,23141:767A,23142:7183,23143:7169,23144:7287,23145:6D55,23151:6A39,23152:6851,23153:683C,23154:6EA1,23155:6800,23156:6801,23221:6D4C,23222:6D7F,23223:6B20,23224:6DCE,23225:68F2,23231:6CCE,23232:6B5A,23234:6DF5,23235:694D,23241:729A,23242:6C80,23243:6A9A,23244:6BDC,23245:690F,23251:695D,23252:68EA,23253:67DA,23254:6AA3,23255:67D0,23256:6806,23321:6B4E,23324:6AF7,23341:719A,23342:6A0D,23343:6C39,23344:6A80,23345:67E3,23351:683A,23354:68FD,23441:7197,23442:6A0A,23444:6C8E,23445:67F2,23451:6D6F,23452:67D6,23453:67EE,23454:68F1,23455:680D,23456:6835,23551:680D,23554:695D,23561:6822,23564:696A,25111:6B6B,25112:691C,25113:6A39,25114:6B62,25115:68B9,25116:6854,25123:6855,25124:6964,25133:694C,25134:7084,25135:6934,25136:693A,25143:6D3D,25145:67E3,25146:67E6,25211:6999,25212:697A,25213:6936,25214:6AE5,25215:6884,25216:680B,25222:6C16,25223:68E6,25224:6A21,25225:6952,25226:688C,25233:6915,25234:6CFD,25235:694F,25236:69B9,25243:690A,25245:67CE,25246:67FA,25255:6998,25256:67A1,25266:679B,25267:6832,25311:6A2C,25312:6841,25313:682F,25314:6E73,25315:6813,25316:6803,25321:6840,25324:68E9,25331:692B,25332:67D1,25333:68C1,25334:6A7F,25335:67C2,25336:67FB,25341:6D47,25342:67FC,25343:67DD,25344:68F7,25345:6803,25346:682A,25351:680B,25354:6919,25361:67F8,25364:6939,25511:68D1,25513:67F7,25514:692F,25522:6997,25524:67C3,25525:6956,25526:66C4,25533:67C4,25534:6B2A,25535:6979,25536:67FD,25543:680C,25555:6BE6,25556:67EA,25566:66FA,25567:673A,25611:6869,25613:67F5,25614:6914,25622:688A,25624:67E1,25625:66B6,25626:66BC,25627:671C,25633:67FE,25634:6B42,25635:67FD,25636:67FD,25637:6919,25643:6836,25655:67E7,25656:66EB,25657:6712,25666:67E0,25667:6719,25677:6717,25678:6907,55112:68F9,55114:69AD,55123:6808,55124:692B,55133:6860,55134:6B41,55135:6A00,55136:682A,55143:6829,55155:6D3D,55156:682D,55166:6703,55167:66F3,55222:6952,55223:67D2,55224:6934,55225:6995,55226:67AF,55234:6E29,55235:6B6B,55236:6A24,55243:694F,55245:696B,55246:67FD,55255:6D40,55256:6933,55266:6806,55267:68BA,55342:6865,55353:696A,55355:6C0E,55356:6804,55363:66CE,55365:67EE,55366:66F0,55367:6726,55555:7751,55556:6D09,55566:6A25,55567:6A3F,55666:6A08,55667:6948,55678:6BA2,56112:685E,56114:69A9,56123:680B,56124:691C,56133:6812,56134:6B48,56135:67F5,56137:68B4,56143:682B,56155:6808,56156:66FA,56157:66C8,56177:66DA,56178:68AB,56222:68A6,56223:6801,56224:6998,56225:678D,56227:681E,56234:6E1F,56235:69DE,56237:6B38,56243:695B,56245:67E3,56247:6904,56255:6907,56256:6802,56257:687F,56277:687F,56278:6A90,56342:687A,56353:66D6,56355:67D6,56356:66F0,56357:6714,56373:672E,56375:6715,56377:6715,56378:6900,56555:6CE8,56556:6A0A,56557:69FA,56567:6935,56577:692B,56578:6B86,56777:6A15,56778:6BA3." +
  "1|12345:0B2W|N:7070|21111:6F9A,21112:6CCA,21116:6912,21126:67A7,21166:66F9,21167:6709,21666:6848,21667:6702,21678:68E9,23622:6937,23623:67AB,23626:6704,23627:66F6,23633:68FC,23636:66EC,23637:66F0,23666:6801,23667:66CB,23677:66CA,23678:688F,26256:6714,26257:6705,26466:680E,26467:66E3,26476:66C5,26478:6899,11111:7818,11112:6E9A,11115:6F62,11116:6D55,11122:6C64,11123:6C27,11124:6C09,11125:6D0B,11126:6938,11144:6CC6,11145:6F08,11146:6A52,11154:6C46,11156:694E,11166:69BC,11167:694C,11222:6CBE,11223:6A94,11225:6BB8,11226:6820,11233:6AA3,11234:6E1C,11235:6F4B,11236:68D5,11244:6B9C,11245:716C,11246:6A05,11254:6E0A,11256:68D1,11266:678C,11267:67C2,11335:6D6B,11336:694E,11345:7494,11346:6C21,11354:6F53,11356:6A09,11366:68BE,11367:68FD,11433:6A8D,11436:68EF,11453:6E52,11456:68D7,11464:680F,11466:6783,11467:67A3,11666:69B8,11667:677E,11678:6963,12346:72C5,12354:7BA6,12356:6F48,12366:6BE5,12367:6CA1,12433:6F94,12436:6D27,12453:7989,12456:6D01,12464:6A6F,12466:698B,12467:6A8C,12666:6A67,12667:6900,12678:6B3F,13222:6C7C,13223:6AAA,13224:6E06,13226:68EC,13254:77F4,13256:6B62,13266:683C,13267:6929,13422:6E03,13426:6BA1,13452:7802,13456:6B5E,13463:68EC,13464:68C0,13466:6814,13467:690D,13633:69E8,13636:679E,13637:67DF,13656:6830,13657:6917,13666:6896,13667:6792,13677:6782,13678:6957,16666:6D13,16667:68C3,16677:677A,16678:6905,21113:6BFA,21123:6A0C,21133:6A1C,21134:6D32,21136:6825,21154:6D3B,21156:6802,21436:6B00,21453:7732,21456:6AA2,21464:6837,21466:6762,21467:6839,23111:6BFF,23112:6A12,23114:6D48,23116:6817,23156:6A8E,23166:6796,23167:6871,23411:6D3F,23416:6AE2,23451:7747,23456:6A86,23462:681E,23463:6807,23464:67F5,23466:674C,23467:682D,23634:6817,23656:6747,23657:681D,26222:6E7E,26226:69E6,26227:698B,26266:699A,26267:66F8,26277:671B,26278:68C9,26666:6C1A,26667:67DD,26677:66D6,26678:6808,26777:67FD,26778:6810,66666:76DE,66667:6C7C,66677:6934,66678:6B39,66778:6A6B.";
precalculated_games_5columns_1st_level[0][1] =
  "1|11112:0B1W|N:7926|22223:8269,22233:7B3E,22234:7961,22333:7A54,22334:7645,22343:7619,22345:7655,23333:7FC5,23334:78A3,23343:7820,23344:7620,23345:760B,23453:75F9,23456:77B2,33331:84BD,33341:7B42,33441:78ED,33451:7841,34561:79A4,11111:9225,11113:888E,11121:8EDC,11122:8B55,11123:857E,11131:8749,11132:89CF,11133:8366,11134:80D6,11221:8912,11222:8890,11223:7FE8,11231:8418,11232:8207,11233:80EC,11234:7DF7,11331:830C,11332:84E5,11333:82A5,11334:7C6D,11341:8018,11342:8204,11343:7C27,11345:7BE6,12221:8AC2,12222:894B,12223:7F88,12231:7FE7,12232:7F31,12233:7BDD,12234:7A1F,12331:7FE9,12332:7DA2,12333:8065,12334:7A0D,12341:7CFB,12342:7C26,12343:79CB,12345:79FC,13331:82C3,13332:8478,13333:8389,13334:7B5F,13341:7BEF,13342:7D8D,13343:7AE5,13344:78F9,13345:7850,13451:7BE0,13452:7DA7,13453:7834,13456:795A,22221:8F71,22222:8CFF,22231:80FA,22232:7EF6,22331:7BD6,22332:7A32,22341:7A4B,22342:78A0,23331:7F7E,23332:7B40,23341:7927,23342:775E,23451:798F,23452:77FC,33332:836A,33333:88E6,33334:7E2D,33342:7B1B,33343:7D28,33344:7986,33345:789C,33442:78C6,33443:792A,33445:7707,33452:78B6,33453:782E,33454:767E,33456:7773,34562:7AB9,34563:7760,34567:79B9." +
  "1|11122:0B1W|N:6480|23333:6449,23334:5EE6,23344:5D8B,23345:5D5F,23433:5EFA,23434:5D9A,23435:5D36,23455:5D58,23456:5E72,33313:65DD,33314:5FF7,33413:5FB6,33414:5E62,33415:5DD6,34513:5DB3,34516:5E9F,11111:7201,11112:7363,11113:6928,11123:6D2D,11133:666F,11134:651F,11211:7187,11212:717E,11213:6864,11222:735F,11223:6A0F,11233:6624,11234:644D,11311:6905,11312:6A24,11313:6575,11314:638D,11322:6D1B,11323:68CA,11324:66DC,11333:6525,11334:6166,11344:617F,11345:619E,12211:735F,12212:717E,12213:684A,12222:7187,12223:6876,12233:64D5,12234:62B8,12311:686F,12312:6843,12313:649F,12314:62A0,12322:69F8,12323:661A,12324:641A,12333:65A3,12334:60F1,12344:60E1,12345:6110,13311:6590,13312:6632,13313:6510,13314:60B0,13322:68C3,13323:6855,13324:6367,13333:6593,13334:602D,13344:5F04,13345:5EB5,13411:6347,13412:645F,13413:607D,13415:6065,13422:66E7,13423:6339,13425:6341,13433:601D,13434:5F0E,13435:5E7F,13455:5E95,13456:5F6A,22212:7363,22213:6A2D,22222:7201,22223:6909,22233:6570,22234:6328,22311:6A07,22312:6847,22313:6496,22314:627A,22322:67A0,22323:641B,22324:61F9,22333:63CD,22334:5F3A,22344:5F5B,22345:5F4E,23311:64C3,23312:64A1,23313:642C,23314:5FB3,23322:6434,23323:63AE,23324:5FBC,23411:62BA,23412:62BB,23413:5F98,23415:5FDC,23422:62C2,23423:5FAB,23425:5FF7,33311:65F4,33312:65D4,33322:64FE,33323:6585,33324:603E,33333:6C29,33334:62E9,33344:6053,33345:5F75,33411:6083,33412:610E,33422:614B,33423:5FED,33424:5E8C,33425:5E92,33433:6299,33434:6032,33435:5F27,33444:6000,33445:5E2B,33455:5E0C,33456:5EBE,34511:6078,34512:6168,34522:61DC,34523:5E8D,34526:5FE3,34533:5F12,34534:5E0D,34536:5E76,34566:5E8C,34567:6079." +
  "1|11123:0B1W|N:7960|22242:7DF2,22244:78D4,22245:7793,22442:78B8,22444:7867,22445:7517,22452:777D,22454:74E3,22455:74E7,22456:7551,24442:7861,24444:7B2A,24445:7619,24452:7506,24454:7612,24455:74BC,24456:74E2,24542:74ED,24544:75C9,24545:74AB,24546:74D1,24562:7560,24564:74C9,24566:74D2,24567:7686,44414:7F49,44415:77D9,44434:7B69,44435:7660,44514:7785,44515:763D,44516:75E5,44534:7608,44535:74C4,44536:74F6,45614:75C4,45617:77A6,45634:74EE,45637:76B7,11111:8E5F,11112:8772,11113:8965,11114:83B8,11122:85C6,11124:82C1,11132:8D49,11134:800D,11144:7ECC,11145:7DE1,11211:870D,11212:83AD,11213:8D90,11214:7F0B,11221:8480,11222:83E3,11223:8CA7,11224:7E01,11231:8BDD,11232:87FD,11233:89CB,11234:8207,11241:7F10,11242:7C4E,11243:848D,11244:7B13,11245:7A90,11411:835F,11412:7ED6,11413:80E6,11414:7E34,11415:7D07,11422:7DF3,11423:884D,11424:7CF2,11425:7CB4,11432:8213,11434:7B37,11435:7AA0,11444:7DC9,11445:796B,11455:795E,11456:7A16,12211:8443,12212:8417,12213:884F,12214:7BE6,12221:834D,12222:83C6,12223:89B1,12224:7C03,12231:8740,12232:86F0,12233:854E,12234:7E74,12241:7BD6,12242:7B63,12243:804D,12244:785E,12245:77B1,12311:8B09,12312:8743,12313:8872,12314:80F8,12322:879B,12323:8747,12324:7FE4,12332:8491,12334:7E63,12344:7C9D,12345:7B8D,12411:7E83,12412:7BB8,12413:8295,12414:7A34,12415:79E4,12421:7CCB,12422:7BEC,12423:827F,12424:797C,12425:7924,12431:80E4,12432:7E70,12433:7FF5,12434:7C89,12435:7B86,12441:7A48,12442:7863,12443:7EBC,12444:79CB,12445:76C2,12451:79CB,12452:77BA,12453:7D3F,12454:769B,12455:76A9,12456:7749,14411:7E5C,14412:7A48,14413:7B97,14414:7D92,14415:7900,14422:79B4,14423:8214,14424:7B96,14425:786F,14432:7CB6,14434:7A21,14435:76DC,14444:7ECA,14445:77DE,14455:76A4,14456:7667,14511:7D14,14512:79D6,14513:7B8F,14514:78B9,14516:795D,14522:7947,14523:8083,14524:7841,14526:78F4,14532:7BC6,14534:76CD,14536:776A,14544:77DA,14545:7691,14546:7625,14566:765B,14567:77F6,22211:855D,22212:8625,22213:8784,22214:7BE4,22221:840E,22222:885A,22223:847A,22224:7CBC,22231:86D2,22232:849B,22233:80BC,22234:7B51,22241:7B5A,22243:7C50,22311:872A,22312:86D2,22313:848F,22314:7E04,22321:86EB,22322:835F,22323:80D5,22324:7BA1,22331:847A,22332:80D1,22333:8077,22334:79CE,22341:7DD3,22342:7B0B,22343:7A4E,22344:781F,22345:77CD,22411:7BC6,22412:7B73,22413:7EFB,22414:781B,22415:7779,22421:7B6E,22422:7C9A,22423:7CE3,22424:78A7,22425:77AF,22431:7DC9,22432:7B1F,22433:7A2B,22434:77FE,22435:77B9,22441:7812,22443:78E3,22451:774E,22453:788C,23411:8062,23412:7DCC,23413:7EDF,23414:7BAF,23415:7AE6,23422:7B6D,23423:7BAD,23424:78E5,23425:78A6,23432:79B1,23434:77DB,23435:778E,23444:7A08,23445:7668,23455:7689,23456:77BA,24411:7A10,24412:7819,24413:7CF6,24414:793C,24415:7659,24421:789C,24422:78A2,24423:7A6B,24424:7884,24425:75D5,24431:7BA7,24432:77E0,24433:78D1,24434:79C0,24435:7656,24441:794A,24443:7B0F,24451:7646,24453:7767,24511:7991,24512:774A,24513:7C12,24514:761E,24516:76CC,24521:785A,24522:77B5,24523:7A32,24524:759E,24526:764F,24531:7AED,24532:77A3,24533:78B4,24534:7652,24536:77BB,24541:7632,24543:7764,24561:76C4,24563:78D2,44411:7E19,44412:796B,44413:7A56,44422:788E,44423:7D78,44424:7C0D,44425:7741,44432:79F3,44444:8706,44445:7AC6,44455:7777,44456:7731,44511:78D4,44512:7630,44513:7767,44522:75CC,44523:7990,44524:76D0,44525:75A8,44526:75F3,44532:7673,44544:7A96,44545:772C,44546:76CD,44555:7744,44556:7591,44566:7597,44567:76E2,45611:7977,45612:76E6,45613:781F,45622:7677,45623:7AEE,45624:75D5,45627:780A,45632:7801,45644:76EE,45645:7583,45647:76C3,45677:770B,45678:7AFB." +
  "1|11223:0B1W|N:7105|24444:6DD4,24445:686C,24454:6854,24455:672E,24456:66FF,24554:6741,24555:684D,24556:6708,24564:6715,24565:66EC,24567:6847,33334:6E95,33344:6A07,33345:691A,33444:69BB,33445:670B,33454:6706,33456:677B,34344:69D1,34345:6715,34354:66FF,34356:6772,34444:6C76,34445:682F,34454:6803,34455:6701,34456:673C,34554:670F,34555:67FB,34556:674A,34564:6754,34565:6746,34567:6926,44441:6DFA,44451:6858,44452:6863,44551:6753,44561:6730,44562:6733,45451:6766,45461:66FC,45671:6885,11111:7BDC,11112:76E8,11113:77E0,11114:71D0,11121:777B,11122:7777,11123:7F9B,11124:710F,11131:765F,11132:7B94,11133:743A,11134:6FC6,11141:71CB,11142:6FCA,11143:71B5,11144:6DB3,11145:6CFF,11221:78BA,11224:730F,11231:7CBF,11232:7CCE,11233:7BD9,11234:74D8,11241:710C,11242:70F1,11243:783F,11244:6E00,11245:6D73,11331:7327,11332:77F7,11333:739A,11334:6D39,11341:6FB6,11342:72DE,11343:6EEE,11344:6CC3,11345:6C5D,11441:6DA2,11442:6CA1,11443:6EB8,11444:6D3C,11445:6A62,11451:6CFD,11452:6C2A,11453:6E8F,11454:6A46,11456:6B13,12111:777B,12112:7777,12113:7B8A,12114:6F33,12121:76E8,12123:7D45,12124:6FF2,12131:7A7E,12132:7A89,12133:784A,12134:71FF,12141:6F10,12142:6EFB,12143:7381,12144:6B96,12145:6B32,12231:7B92,12232:7B0A,12233:798E,12234:72CB,12241:6FC6,12242:6FB5,12243:756D,12244:6C6C,12245:6C0A,12331:7749,12332:76E9,12333:7761,12334:6F3A,12341:71D3,12342:715C,12343:70D4,12344:6DC6,12345:6CDE,12441:6B9E,12442:6BB1,12443:7027,12444:6B58,12445:68A0,12451:6B59,12452:6B26,12453:6F05,12454:687F,12456:68FF,13111:769B,13112:7A7B,13113:736B,13114:6F0A,13131:7327,13132:7749,13133:72C7,13134:6C7A,13141:6F00,13142:71D8,13143:6DB2,13144:6BA0,13145:6B5E,13231:77C1,13233:78EE,13234:7091,13241:72FD,13242:72BB,13243:72D1,13244:6FA9,13245:6E50,13331:7302,13332:76C4,13333:733D,13334:6C45,13341:6C76,13342:6F3B,13343:6CC3,13344:69A7,13345:6972,13441:6BA4,13442:6DD9,13443:6B17,13444:6B6D,13445:68C2,13451:6B7E,13452:6D08,13453:6B1A,13454:68B2,13456:69AC,14111:7225,14112:6F08,14113:704D,14114:6D6D,14115:6C64,14131:6ED2,14132:71D9,14133:6DBE,14134:6BCC,14135:6B76,14141:6D77,14142:6B90,14143:6CF1,14144:6CE3,14145:69A6,14151:6C5F,14152:6B31,14153:6CD6,14154:696B,14155:6961,14156:69FF,14241:6C95,14243:72B4,14244:6CBB,14245:69CB,14251:6C20,14253:713E,14254:69C7,14256:6A33,14331:6C82,14332:6F9D,14333:6CF4,14334:69DE,14335:69AA,14341:6BA0,14342:6E01,14343:6B1A,14344:6BBA,14345:68B6,14351:6B5C,14352:6D14,14353:6AFC,14354:68D3,14355:68C4,14356:6999,14441:6CD2,14442:6B87,14443:6D77,14444:6E10,14445:68CA,14451:6992,14452:68B0,14453:6A5D,14454:68AB,14455:67B3,14456:67B1,14551:6994,14552:68C6,14553:6A81,14554:67BB,14555:68EC,14556:67BC,14561:6A18,14562:6916,14563:6B51,14564:67BE,14565:67AA,14567:6900,22111:78BA,22113:7AE4,22114:6F92,22131:7A79,22132:7A1B,22133:7754,22134:713D,22141:6F08,22142:6F2D,22143:721F,22144:6B3E,22145:6A97,22331:7701,22332:73FA,22333:72C7,22334:6C55,22341:70EB,22342:6EF5,22343:6CC3,22344:6B3A,22345:6ADD,22441:6B35,22442:6DCD,22443:6C1B,22444:6D14,22445:696F,22451:6A8D,22452:6CAD,22453:6BF0,22454:6924,22456:6990,23131:7701,23133:76E9,23134:6EE2,23141:710B,23142:70EB,23143:6FEF,23144:6D3D,23145:6C3E,23331:76A8,23332:73D1,23333:72F9,23334:6BD1,23341:6EDB,23342:6C20,23343:6C15,23344:695A,23345:6904,23441:6D1B,23442:6B14,23443:6A25,23444:6B1E,23445:6834,23451:6C4B,23452:6AC3,23453:6A28,23454:682E,23456:6902,24141:6B37,24143:6E73,24144:6AC4,24145:681A,24151:6A78,24153:6D7D,24154:67D5,24156:685D,24331:6EDF,24332:6C38,24333:6C28,24334:6957,24335:68FB,24341:6D2A,24342:6B0F,24343:69F1,24344:6AAA,24345:67FA,24351:6C46,24352:6AAE,24353:69F0,24354:6801,24355:6812,24356:68CC,24441:6ADA,24442:6D19,24443:6BF7,24451:67F2,24452:694C,24453:690E,24551:67F7,24552:6946,24553:6943,24561:686C,24562:69A7,24563:6A17,33331:74A0,33333:77E0,33341:6BEA,33342:6BFC,33343:6D37,33441:697C,33442:6971,33443:69E9,33451:6926,33452:6924,33453:696F,34341:6960,34343:6A02,34351:6900,34353:6960,34441:6AA4,34442:6AC0,34443:69DB,34451:680A,34452:680E,34453:67C5,34551:6819,34552:6828,34553:67C2,34561:68EF,34562:68EA,34563:6884,44443:6D42,44444:7719,44445:6C44,44453:68E7,44454:6C08,44455:68F1,44456:68A8,44553:680F,44554:68F9,44556:67BC,44563:686A,44564:68AD,44565:6788,44567:68BF,45453:67F9,45454:68F0,45456:67AB,45463:6860,45464:68AA,45465:677D,45467:68BB,45673:6A7A,45674:68BD,45678:6C3E." +
  "1|11234:0B1W|N:5196|22522:4F10,22525:4B5A,22526:4ACB,22555:4AE3,22556:48BD,22566:48D8,22567:496F,25522:4B4F,25525:4AD6,25526:48B9,25555:4CB2,25556:4919,25566:4885,25567:48E3,25622:4AD6,25625:48C3,25626:48B1,25627:495D,25655:493F,25656:4871,25657:48BF,25666:4925,25667:48D0,25677:48D1,25678:4B05,55155:4E26,55156:49C1,55166:4907,55167:4956,55353:4AE8,55355:4CB4,55356:4923,55363:48D3,55365:493E,55366:487A,55367:48D7,56155:49C7,56156:48F1,56157:4934,56177:494A,56178:4BA3,56353:48C1,56355:491C,56356:4872,56357:48CF,56373:4979,56375:48CA,56377:48D8,56378:4B0A,11111:590F,11112:5376,11114:5434,11115:519B,11122:5204,11123:5374,11124:544F,11125:4EA7,11133:528E,11134:55E5,11135:4F7F,11143:5385,11145:4EB5,11155:4DF7,11156:4D85,11222:522C,11223:5279,11224:53D2,11225:4E0E,11235:51A2,11243:58D7,11245:5005,11255:4CC2,11256:4D22,11322:5186,11325:4F22,11342:57EB,11345:4EE7,11353:4D72,11355:4BE4,11356:4C3B,11555:4D61,11556:4B10,11567:4C46,12111:538F,12112:5204,12113:52FF,12114:5376,12115:4E6B,12122:51F5,12123:5146,12124:51C7,12125:4D0A,12133:51D8,12134:593D,12135:4F41,12143:5785,12145:4E7E,12155:4B8F,12156:4BEF,12211:5238,12212:51C4,12213:51C1,12214:52B1,12215:4D8D,12222:521F,12223:512F,12224:524F,12225:4D27,12233:5161,12234:58B0,12235:4ECE,12243:55DF,12245:4DAB,12255:4B13,12256:4B3D,12311:52E9,12312:5136,12313:513C,12314:57FB,12315:4EA7,12321:513C,12322:50DD,12323:4FCF,12324:55C1,12325:4D07,12331:51C4,12332:504B,12333:5132,12334:56ED,12335:4DB7,12341:5775,12342:54F8,12343:550A,12344:55D3,12345:50AD,12351:4E7D,12352:4CE4,12353:4CE8,12354:518B,12355:4B88,12356:4BA3,12511:4E6F,12512:4D0F,12513:4E7B,12514:4F15,12515:4B76,12516:4BC5,12522:4CF5,12523:4CF0,12524:4DBB,12525:4A62,12526:4A84,12533:4DAA,12534:530E,12535:4C37,12536:4C5D,12543:50C0,12545:4B85,12546:4BAE,12555:4ADD,12556:4983,12566:4995,12567:4A5A,15111:51C9,15112:4E5C,15114:4F18,15115:4DDD,15116:4D48,15122:4D03,15123:4E8E,15124:4F26,15125:4B77,15126:4BD3,15133:4D94,15134:5068,15135:4C1A,15136:4C75,15143:4E9F,15145:4B8C,15146:4BDA,15155:4D1D,15156:4AA8,15166:4AB2,15167:4BB2,15222:4D3A,15223:4DB1,15224:4ED5,15225:4B0B,15226:4B2C,15234:553D,15235:4D8F,15236:4DA1,15243:51B2,15245:4C5E,15246:4C6A,15255:4B86,15256:4A28,15266:4A2F,15267:4B14,15322:4CFB,15325:4BA1,15326:4BBF,15342:50D9,15345:4B90,15346:4BAD,15353:4A9F,15355:4AF2,15356:4995,15363:4AA1,15365:4982,15366:4989,15367:4A54,15555:4E3C,15556:49E6,15566:4928,15567:498C,15666:4A2B,15667:4987,15678:4BEC,22111:526C,22112:524B,22113:5112,22114:513B,22115:4CF7,22122:52E1,22123:50D9,22124:512C,22125:4CB6,22133:4FFD,22134:5663,22135:4D5F,22143:54E3,22145:4CCB,22155:4A6E,22156:4A72,22211:51C4,22212:51EF,22213:5100,22214:5187,22215:4CD1,22222:561B,22223:50B7,22224:5159,22225:4E82,22233:4FBB,22234:5395,22235:4CF1,22243:51AA,22245:4C72,22255:4B42,22256:4ACF,22311:50FD,22312:50C2,22313:4FB7,22314:551A,22315:4CC3,22321:50CE,22322:5177,22323:4FB4,22324:51B9,22325:4C4F,22331:4FEC,22332:4FB6,22333:4F7A,22334:5118,22335:4BAC,22341:54A9,22342:5150,22343:503B,22344:5061,22345:4D42,22351:4CA3,22352:4C4D,22353:4B57,22354:4D87,22355:4A01,22356:4A13,22511:4CF4,22512:4C9D,22513:4CB7,22514:4D2F,22515:4A4C,22516:4A44,22523:4C2B,22524:4CB7,22533:4BB3,22534:4EA7,22535:4A5A,22536:4A92,22543:4D61,22545:4A07,22546:4A21,23111:52BE,23112:5107,23114:5750,23115:4E5C,23121:50FD,23122:50C4,23123:4FB7,23124:5520,23125:4CBD,23131:513B,23132:4FF1,23133:50F6,23134:5613,23135:4D5D,23141:5712,23142:54AD,23143:54AB,23144:5562,23145:5070,23151:4E24,23152:4CA7,23153:4CB6,23154:50F1,23155:4B47,23156:4B79,23221:50FC,23222:50B7,23223:4F7A,23224:522D,23225:4C6B,23231:50B0,23232:4FBB,23234:525A,23235:4C4D,23241:555B,23242:5197,23243:507B,23244:515F,23245:4DC4,23251:4D38,23252:4C6B,23253:4BB3,23254:4E67,23255:4A3B,23256:4A87,23321:4FB1,23322:4FB4,23324:507D,23325:4B6E,23341:54AB,23342:503B,23343:5166,23344:505F,23345:4D30,23351:4CB5,23352:4B58,23353:4C29,23354:4D9E,23355:49E0,23356:4A1A,23441:54B0,23442:503F,23444:51A3,23445:4D43,23451:506E,23452:4D39,23453:4D41,23454:4DC1,23455:4BE4,23456:4BEE,23551:4B48,23552:49FE,23554:4C3E,23555:4A8D,23556:4929,23561:4B6B,23562:4A1D,23564:4C5B,23565:490C,23567:4A09,25111:4E54,25112:4CDC,25113:4E2F,25114:4E95,25115:4B42,25116:4B88,25122:4CB1,25123:4CAC,25124:4D1E,25125:4A59,25126:4A3C,25133:4D3F,25134:5216,25135:4BAA,25136:4BE5,25143:509B,25145:4B4C,25146:4B6B,25155:4AB6,25156:4941,25166:494D,25167:4A13,25211:4D3B,25212:4CC8,25213:4D3B,25214:4DEF,25215:4A8E,25216:4AB4,25222:4E69,25223:4C4F,25224:4CEB,25225:4B2A,25226:4AC4,25233:4C52,25234:4FB6,25235:4AF1,25236:4B34,25243:4DEC,25245:4A44,25246:4A7F,25255:4AEC,25256:491C,25266:492D,25267:49E8,25311:4E30,25312:4CB1,25313:4CAE,25314:5109,25315:4B4F,25316:4B6B,25321:4CB4,25322:4C3B,25323:4B54,25324:4DA2,25325:49FD,25326:4A14,25331:4D3C,25332:4BA8,25333:4C54,25334:4E76,25335:4A3E,25336:4A8E,25341:5086,25342:4D4F,25343:4D55,25344:4DE4,25345:4BD2,25346:4BEC,25351:4B3F,25352:49FD,25353:49D9,25354:4C23,25355:4A6B,25356:4912,25361:4B67,25362:4A19,25363:4A0C,25364:4C47,25365:4914,25366:4903,25367:4A00,25511:4B58,25512:4A61,25513:4B44,25514:4BA8,25515:4AA5,25516:493E,25523:49E6,25524:4A5B,25533:4A3C,25534:4D1B,25535:4AC5,25536:4982,25543:4BE5,25545:4A8A,25546:4916,25611:4B93,25612:4A47,25613:4B6D,25614:4BCE,25615:493A,25616:493A,25617:49F4,25623:4A15,25624:4A8E,25633:4A8A,25634:4D39,25635:4970,25636:4979,25637:4A77,25643:4BFE,25645:491E,25646:491E,25647:4A02,55111:4E05,55112:4B59,55114:4BD1,55115:4D33,55116:4A8A,55122:4A81,55123:4B55,55124:4BB1,55125:4ABC,55126:494C,55133:4ABB,55134:4CD0,55135:4B05,55136:49C7,55143:4B66,55145:4AD0,55146:494B,55222:4B34,55223:4A41,55224:4AF9,55225:4AF2,55226:491E,55234:4EAA,55235:4BAA,55236:4A68,55243:4C43,55245:4AD0,55246:4990,55255:4D05,55256:4979,55266:48E5,55267:4972,55322:49F2,55325:4A87,55326:4930,55342:4BF4,55345:4A72,55346:4929,55555:5413,55556:4C18,55566:4964,55567:49EE,55666:4972,55667:493E,55678:4B2D,56111:4D83,56112:4B99,56114:4C34,56115:4A71,56117:4B83,56122:4A4E,56123:4B74,56124:4BEC,56125:4934,56127:4A0F,56133:4AC4,56134:4CEA,56135:49A3,56137:4A8F,56143:4B82,56145:494B,56147:4A0F,56222:4AD3,56223:4A93,56224:4B33,56225:4920,56227:49DA,56234:4E9D,56235:4A46,56237:4B5B,56243:4C78,56245:497F,56247:4A87,56255:4979,56256:48D5,56257:4950,56277:4964,56278:4B9F,56322:4A1E,56325:4920,56327:4A3A,56342:4C22,56345:490C,56347:4A04,56555:4C33,56556:495C,56557:49DF,56567:4930,56577:4933,56578:4B01,56777:4A09,56778:4B0D." +
  "1|12345:0B1W|N:2625|26222:25FB,26226:23CB,26227:23BD,26266:2377,26267:2269,26277:227A,26278:2333,26666:2455,26667:227A,26677:222E,26678:22B7,26777:228F,26778:22B0,11111:293E,11112:2691,11115:26D5,11116:259A,11122:260D,11123:25BC,11124:25BB,11125:25DE,11126:2416,11144:2624,11145:265B,11146:2457,11154:25C1,11156:2422,11166:23C7,11167:23C5,11222:262A,11223:2548,11225:2583,11226:23D0,11233:2548,11234:2684,11235:26BA,11236:23F7,11244:259E,11245:2738,11246:242D,11254:2689,11256:23F6,11266:22B9,11267:22E1,11335:25F6,11336:240D,11345:27FA,11346:24A2,11354:26C3,11356:242B,11366:22F4,11367:2327,11433:254C,11436:23FE,11453:2688,11456:23F3,11464:23DC,11466:22B7,11467:22D3,11666:237B,11667:2286,11678:235F,12346:2715,12354:2A86,12356:2628,12366:23EC,12367:244B,12433:26CA,12436:25C6,12453:29EE,12456:2587,12464:245C,12466:2346,12467:23C7,12666:231B,12667:2299,12678:23A0,13222:25D1,13223:255B,13224:2665,13226:23F9,13254:2995,13256:2543,13266:231B,13267:2397,13422:2667,13426:2576,13452:2987,13456:253B,13463:23F9,13464:23FE,13466:22F2,13467:2374,13633:2456,13636:22C6,13637:22E4,13656:2303,13657:2376,13666:22C0,13667:2253,13677:224D,13678:2327,16666:247C,16667:229C,16677:225F,16678:22E9,21111:26EE,21112:2621,21113:25BD,21116:2420,21123:2538,21126:23B2,21133:253C,21134:264F,21136:23D5,21154:2655,21156:23D5,21166:22AA,21167:22B6,21436:256D,21453:2969,21456:252B,21464:23E7,21466:22EA,21467:235C,21666:22C8,21667:2248,21678:233B,23111:25BA,23112:253A,23114:2646,23116:23D1,23156:252B,23166:230E,23167:2377,23411:264C,23416:2558,23451:2963,23456:251E,23462:23D2,23463:23D5,23464:23D5,23466:22DD,23467:2358,23622:242A,23623:23B9,23626:22A9,23627:22AA,23633:2412,23634:23D9,23636:2292,23637:22A7,23656:22EC,23657:234A,23666:22B7,23667:2234,23677:2235,23678:22FC,26256:22BA,26257:22BF,26466:22CC,26467:2248,26476:2231,26478:22F2,66666:2846,66667:2499,66677:2354,66678:23AC,66778:23D2.";
precalculated_games_5columns_1st_level[0][0] =
  "1|11111:0B0W|N:16807|22222:1362C,22223:11D1C,22233:1149F,22234:112BB,22334:10F57,22345:1109B,23456:11503." +
  "1|11112:0B0W|N:7776|33333:83D5,33334:77CB,33343:77CB,33344:73D4,33345:730E,33443:73D4,33445:71D8,33453:730E,33454:71D8,33456:72D3,34563:72D3,34567:7649." +
  "1|11122:0B0W|N:7776|33333:83D5,33334:77CB,33344:73D4,33345:730E,33433:77CB,33434:73D4,33435:730E,33444:73D4,33445:71D8,33455:71D8,33456:72D3,34533:730E,34534:71D8,34536:72D3,34566:72D3,34567:7649." +
  "1|11123:0B0W|N:3125|44444:302F,44445:2B2F,44455:2954,44456:2945,44544:2B2F,44545:2954,44546:2945,44555:2954,44556:28CF,44566:28CF,44567:298C,45644:2945,45645:28CF,45647:298C,45677:298C,45678:2BDD." +
  "1|11223:0B0W|N:3125|44444:302F,44445:2B2F,44454:2B2F,44455:2954,44456:2945,44554:2954,44556:28CF,44564:2945,44565:28CF,44567:298C,45454:2954,45456:28CF,45464:2945,45465:28CF,45467:298C,45674:298C,45678:2BDD.";

let extra_precalculated_str = ""; // (variable updated by the .js scripts generated by extractPrecalculatedPerfs.java - do not rename it)

// *************************************************************************
// *************************************************************************
// Error handling
// *************************************************************************
// *************************************************************************

function getExtraDebugInfo() {
  return "(currentattempt:" + currentAttemptNumber
         + ", nbcodesfilled:" + nbOfStatsFilled_NbPossibleCodes
         + ", nbstatsfilled:" + nbOfStatsFilled_Perfs
         + ", gameduration:" + ((startTime > 0) ? ((new Date()).getTime() - startTime) : "NA") + "ms"
         + ", workeralive:" + isWorkerAlive + ", timesinceworkercreation: " + ((isWorkerAlive >= 0) ? (new Date()).getTime() - workerCreationTime : "NA")
         + ", timesincelastworkerterminate: " + ((workerTerminationTime != -1) ? (new Date()).getTime() - workerTerminationTime : "NA")
         + ", currentcode:" + currentCode
         + ", nbnewgames:" + nbNewGameEvents
         + ", nbgamesplayed:" + nbGamesPlayed
         + ", nbgameswon:" + nbGamesPlayedAndWon
         + ", nbongoinggamesaborted: " + nbOnGoingGamesAborted
         + ", nbgamesabortedwithongoingworker:" + nbGamesAbortedWithOnGoingWorker
         + ", lastgamewasabortedwithongoingworker:" + lastGameWasAbortedWithOnGoingWorker
         + ", gamesolverdbg:" + gameSolverDbg
         + ", debuggamestate:" + debug_game_state + ")";
}

function displayGUIError(GUIErrorStr, errStack) {

  let completedGUIErrorStr = (GUIErrorStr + " " + getExtraDebugInfo()).trim();

  // Display error in Javascript console
  // ***********************************

  if (gameErrorCnt < 50) {
    console.log("***** ERROR *****: " + completedGUIErrorStr + " / " + errStack + "\n");
    console.log("Stack:");
    let stack = new Error().stack;
    console.log(stack);
    console.log("\n");
  }
  gameErrorCnt++;

  // Submit form if very first error
  // *******************************

  let maxGlobalErrors = 2;
  if (globalErrorCnt < maxGlobalErrors) {
    try {
      var errorStr = "";
      if (localStorage.firstname) {
        errorStr = errorStr + " for " + localStorage.firstname;
      }
      if (localStorage.playerid) {
        errorStr = errorStr + " for player id " + localStorage.playerid;
      }
      if (localStorage.countryname) {
        errorStr = errorStr + " in " + localStorage.countryname;
      }
      if (localStorage.cityname) {
        errorStr = errorStr + " in " + localStorage.cityname;
      }
      if (localStorage.gamesok) {
        errorStr = errorStr + " after " + localStorage.gamesok + " game(s)";
      }
      if (gameSolverConfigDbg != null) {
        errorStr = errorStr + " with gameSolver config " + gameSolverConfigDbg;
      }

      let strGame = "";
      try {
        errorStr = errorStr + " on " + navigator.platform + " / " + navigator.userAgent + " / " + decodeURI(location.href);
        for (let i = 1; i < currentAttemptNumber; i++) {
          strGame = strGame + smmCodeHandler.markToString(marks[i-1]) + " " + smmCodeHandler.codeToString(codesPlayed[i-1]) + " (" + nbOfPossibleCodes[i-1]
                            + "|" + (Math.round(relative_performances_of_codes_played[i-1] * 100.0) / 100.0).toFixed(2) /* 0.01 precision */ + ") ";
        }
        strGame = strGame + "SCODE " + smmCodeHandler.codeToString(smmCodeHandler.convert(sCode));
        strGame = strGame.trim();
      }
      catch (game_exc) {
        strGame = strGame.trim() + " " + game_exc;
      }
      errorStr = errorStr + " for game " + strGame;

      submitForm("game error (" + (globalErrorCnt+1) + "/" + maxGlobalErrors + ")" + errorStr + ": ***** ERROR MESSAGE ***** " + completedGUIErrorStr + " / STACK: " + errStack + " / VERSIONS: game: " + html_compatibility_game_version + ", smm: " + smm_compatibility_version + ", alignment for v30.07: " + (localStorage.reloadForCompatibility_v3007 ? localStorage.reloadForCompatibility_v3007 : "not done"), 210);
    }
    catch (exc) {
      console.log("internal error at error form submission: " + exc);
      submitForm("internal error at error form submission: " + exc + " for submitted error: " + GUIErrorStr + " / STACK: " + errStack, 230);
    }
  }
  globalErrorCnt++;

  // Alert
  // *****

  if (gameErrorStr == "") { // Only one error alert is displayed per game
    gameErrorStr = "***** ERROR *****: " + GUIErrorStr + " / " + errStack + "\n";
    alert(gameErrorStr);
  }

}

// Function called on gameSolver worker's error
function onGameSolverError(e) {
  displayGUIError("gameSolver error: " + e.message + " at line " + e.lineno + " in " + e.filename, new Error().stack);
}

// Function called on gameSolver worker's MESSAGE error
function onGameSolverMessageError(e) {
  displayGUIError("gameSolver MESSAGE error: " + e.message + " at line " + e.lineno + " in " + e.filename, new Error().stack);
}

function handlePrompt() {
  var mode = prompt("Which mode do you want to select?", "444");
  if (mode == null) {
    return;
  }
  else if (mode == 222) {
    loadTime = loadTime - 24*3600*1000; // 1 day
  }
  else if (String(mode) == "000") {
    throw new Error("toto");
  }
  else if (String(mode).indexOf("of") != -1) {
    document.getElementById('form_list_id').value = mode.trim();
    setTimeout("submitForm();", 444);
  }
}

// *************************************************************************
// *************************************************************************
// SmmCodeHandler class
// *************************************************************************
// *************************************************************************

class SmmCodeHandler extends CodeHandler {

  constructor(nbColumns_p, nbColors_p, nbMinColumns_p, nbMaxColumns_p, emptyColor_p) {
    super(nbColumns_p, nbColors_p, nbMinColumns_p, nbMaxColumns_p, emptyColor_p, false);
  }

  createRandomCode(codeRevealed = 0 /* (empty code) */) {
    let nbObviouslyImpossibleColors = 0;
    for (let color = 1; color < this.nbColors+1; color++) {
      if (obviouslyImpossibleColors[color]) {
        nbObviouslyImpossibleColors++;
      }
    }
    let code = 0;
    for (let col = 0; col < this.nbColumns; col++) {
      let colorRevealed = this.getColor(codeRevealed, col+1);
      if ( (colorRevealed >= 1) && (colorRevealed <= this.nbColors)
           && (colorRevealed != this.emptyColor) ) {
        code = this.setColor(code, colorRevealed, col+1);
      }
      else {
        let color_idx = Math.floor(Math.random() * (this.nbColors - nbObviouslyImpossibleColors) + 1); // in 1 .. nb possible colors
        let selected_color = -1;
        let color_cnt = 1;
        let possiblecolor_cnt = 0;
        while (true) { // look for the color_idx th possible color
          if (!obviouslyImpossibleColors[color_cnt]) {
            possiblecolor_cnt++;
            if (possiblecolor_cnt == color_idx) {
              selected_color = color_cnt;
              break;
            }
          }
          color_cnt++;
          if (color_cnt > this.nbColors) {
            throw new Error("SmmCodeHandler: createRandomCode (1) (" + codeRevealed + ")");
          }
        }
        if (selected_color == -1) {
          throw new Error("SmmCodeHandler: createRandomCode (2) (" + codeRevealed + ")");
        }
        if ((nbObviouslyImpossibleColors == 0) && (selected_color != color_idx)) {
          throw new Error("SmmCodeHandler: createRandomCode (3) (" + codeRevealed + ")");
        }
        code = this.setColor(code, selected_color, col+1);
      }
    }
    for (let col = this.nbColumns+1; col <= this.nbMaxColumns; col++) {
      code = this.setColor(code, this.emptyColor, col);
    }
    return code;
  }

}

// *************************************************************************
// *************************************************************************
// Functions
// *************************************************************************
// *************************************************************************

// ***************************
// GameSolver worker functions
// ***************************

// Function called on gameSolver worker's message reception
function onGameSolverMsg(e) {

  try {

    if (e.data == undefined) {
      displayGUIError("gameSolver msg error: data is undefined", new Error().stack);
      return;
    }
    let data = e.data;

    if (data.rsp_type == undefined) {
      displayGUIError("gameSolver msg error: rsp_type is undefined", new Error().stack);
      return;
    }

    // ***************
    // Error detection
    // ***************

    if (data.rsp_type == 'INTERNAL_WORKER_ERROR_DETECTED') {
      displayGUIError('INTERNAL_WORKER_ERROR_DETECTED: ' + data.error_str);
    }

    // **************************
    // Check that worker is alive
    // **************************

    else if (isWorkerAlive == 0) { // first message received from worker
      if ((data.rsp_type == 'I_AM_ALIVE') && (Number(data.game_id) == game_cnt)) {
        isWorkerAlive = 1;
      }
      else {
        displayGUIError("gameSolver msg message error: invalid worker initialization (" + data.rsp_type + ", " + data.game_id + ", " + game_cnt + ")", new Error().stack);
        return;
      }
    }

    // ************************
    // Number of possible codes
    // ************************

    else if (data.rsp_type == 'NB_POSSIBLE_CODES') {

      if (data.nbOfPossibleCodes_p == undefined) {
        displayGUIError("NB_POSSIBLE_CODES / gameSolver msg error: nbOfPossibleCodes_p is undefined", new Error().stack);
      }
      let nbOfPossibleCodes_p = Number(data.nbOfPossibleCodes_p);
      if ( isNaN(nbOfPossibleCodes_p) || (nbOfPossibleCodes_p < 0) ) {
        displayGUIError("NB_POSSIBLE_CODES / gameSolver msg error: invalid nbOfPossibleCodes_p: " + nbOfPossibleCodes_p, new Error().stack);
      }

      if (data.colorsFoundCode_p == undefined) {
        displayGUIError("NB_POSSIBLE_CODES / gameSolver msg error: colorsFoundCode_p is undefined", new Error().stack);
      }
      let colorsFoundCode_p = Number(data.colorsFoundCode_p);
      if (isNaN(colorsFoundCode_p)) {
        displayGUIError("NB_POSSIBLE_CODES / gameSolver msg error: invalid colorsFoundCode_p: " + colorsFoundCode_p, new Error().stack);
      }

      if (data.minNbColorsTable_p == undefined) {
        displayGUIError("NB_POSSIBLE_CODES / gameSolver msg error: minNbColorsTable_p is undefined", new Error().stack);
      }
      let minNbColorsTable_p = (data.minNbColorsTable_p).split(",");
      if (minNbColorsTable_p.length != nbColors+1) {
        displayGUIError("NB_POSSIBLE_CODES / gameSolver msg error: invalid minNbColorsTable_p: " + data.minNbColorsTable_p + ", length is " + minNbColorsTable_p.length, new Error().stack);
      }

      if (data.maxNbColorsTable_p == undefined) {
        displayGUIError("NB_POSSIBLE_CODES / gameSolver msg error: maxNbColorsTable_p is undefined", new Error().stack);
      }
      let maxNbColorsTable_p = (data.maxNbColorsTable_p).split(",");
      if (maxNbColorsTable_p.length != nbColors+1) {
        displayGUIError("NB_POSSIBLE_CODES / gameSolver msg error: invalid maxNbColorsTable_p: " + data.maxNbColorsTable_p + ", length is " + maxNbColorsTable_p.length, new Error().stack);
      }

      if (data.attempt_nb == undefined) {
        displayGUIError("NB_POSSIBLE_CODES / gameSolver msg error: attempt_nb is undefined", new Error().stack);
      }
      let attempt_nb = Number(data.attempt_nb);
      if ( isNaN(attempt_nb) || (attempt_nb <= 0) ) {
        displayGUIError("NB_POSSIBLE_CODES / gameSolver msg error: invalid attempt_nb: " + attempt_nb, new Error().stack);
      }

      if (data.game_id == undefined) {
        displayGUIError("NB_POSSIBLE_CODES / gameSolver msg error: game_id is undefined", new Error().stack);
      }
      let game_id = Number(data.game_id);
      if ( isNaN(game_id) || (game_id < 0) ) {
        displayGUIError("NB_POSSIBLE_CODES / gameSolver msg error: invalid game_id: " + game_id, new Error().stack);
      }

      writeNbOfPossibleCodes(nbOfPossibleCodes_p, colorsFoundCode_p, minNbColorsTable_p, maxNbColorsTable_p, attempt_nb, game_id);

    }

    // **********************
    // List of possible codes
    // **********************

    else if (data.rsp_type == 'LIST_OF_POSSIBLE_CODES') {

      if (data.possibleCodesList_p == undefined) {
        displayGUIError("LIST_OF_POSSIBLE_CODES / gameSolver msg error: possibleCodesList_p is undefined", new Error().stack);
      }
      let possibleCodesList_p = (data.possibleCodesList_p).split(",");
      if ( (possibleCodesList_p.length <= 0) || (possibleCodesList_p.length > nbMaxPossibleCodesShown) ) {
        displayGUIError("LIST_OF_POSSIBLE_CODES / gameSolver msg error: invalid possibleCodesList_p: " + possibleCodesList_p.length + ", " + nbMaxPossibleCodesShown, new Error().stack);
      }

      if (data.nb_possible_codes_listed == undefined) {
        displayGUIError("LIST_OF_POSSIBLE_CODES / gameSolver msg error: nb_possible_codes_listed is undefined", new Error().stack);
      }
      let nb_possible_codes_listed = Number(data.nb_possible_codes_listed);
      if ( isNaN(nb_possible_codes_listed) || (nb_possible_codes_listed <= 0) || (nb_possible_codes_listed > nbMaxPossibleCodesShown) ) {
        displayGUIError("LIST_OF_POSSIBLE_CODES / gameSolver msg error: invalid nb_possible_codes_listed: " + nb_possible_codes_listed, new Error().stack);
      }

      let possible_codes_subdivision = -1; // N.A.
      try {
        if (data.possible_codes_subdivision !== undefined) {
          possible_codes_subdivision = Number(data.possible_codes_subdivision);
        }
      }
      catch (tmp_exc) {}

      let equivalent_possible_code = 0; // N.A.
      try {
        if (data.equivalent_possible_code !== undefined) {
          equivalent_possible_code = Number(data.equivalent_possible_code);
        }
      }
      catch (tmp_exc) {}

      if (data.globalPerformancesList_p == undefined) {
        displayGUIError("LIST_OF_POSSIBLE_CODES / gameSolver msg error: globalPerformancesList_p is undefined", new Error().stack);
      }
      let globalPerformancesList_p = (data.globalPerformancesList_p).split(",");
      if ( (globalPerformancesList_p.length <= 0) || (globalPerformancesList_p.length > nbMaxPossibleCodesShown) ) {
        displayGUIError("LIST_OF_POSSIBLE_CODES / gameSolver msg error: invalid globalPerformancesList_p: " + data.globalPerformancesList_p + ", length is " + globalPerformancesList_p.length, new Error().stack);
      }

      if (data.attempt_nb == undefined) {
        displayGUIError("LIST_OF_POSSIBLE_CODES / gameSolver msg error: attempt_nb is undefined", new Error().stack);
      }
      let attempt_nb = Number(data.attempt_nb);
      if ( isNaN(attempt_nb) || (attempt_nb <= 0) ) {
        displayGUIError("LIST_OF_POSSIBLE_CODES / gameSolver msg error: invalid attempt_nb: " + attempt_nb, new Error().stack);
      }

      if (data.game_id == undefined) {
        displayGUIError("LIST_OF_POSSIBLE_CODES / gameSolver msg error: game_id is undefined", new Error().stack);
      }
      let game_id = Number(data.game_id);
      if ( isNaN(game_id) || (game_id < 0) ) {
        displayGUIError("LIST_OF_POSSIBLE_CODES / gameSolver msg error: invalid game_id: " + game_id, new Error().stack);
      }

      writePossibleCodes(possibleCodesList_p, nb_possible_codes_listed, possible_codes_subdivision, equivalent_possible_code, globalPerformancesList_p, attempt_nb, game_id);

    }

    // **************************
    // Performance of code played
    // **************************

    else if (data.rsp_type == 'CODE_PLAYED_PERFORMANCE') {

      if (data.relative_perf_p == undefined) {
        displayGUIError("CODE_PLAYED_PERFORMANCE / gameSolver msg error: relative_perf_p is undefined", new Error().stack);
      }
      let relative_perf_p = Number(data.relative_perf_p);

      if (data.best_global_performance_p == undefined) {
        displayGUIError("CODE_PLAYED_PERFORMANCE / gameSolver msg error: best_global_performance_p is undefined", new Error().stack);
      }
      let best_global_performance_p = Number(data.best_global_performance_p);

      if (data.relative_perf_evaluation_done_p == undefined) {
        displayGUIError("CODE_PLAYED_PERFORMANCE / gameSolver msg error: relative_perf_evaluation_done_p is undefined", new Error().stack);
      }
      let relative_perf_evaluation_done_p = Boolean(data.relative_perf_evaluation_done_p);

      if (data.classical_useless_code_p == undefined) {
        displayGUIError("CODE_PLAYED_PERFORMANCE / gameSolver msg error: classical_useless_code_p is undefined", new Error().stack);
      }
      let classical_useless_code_p = Boolean(data.classical_useless_code_p);

      if (data.code_p == undefined) {
        displayGUIError("CODE_PLAYED_PERFORMANCE / gameSolver msg error: code_p is undefined", new Error().stack);
      }
      let code_p = Number(data.code_p);

      if (data.attempt_nb == undefined) {
        displayGUIError("CODE_PLAYED_PERFORMANCE / gameSolver msg error: attempt_nb is undefined", new Error().stack);
      }
      let attempt_nb = Number(data.attempt_nb);
      if ( isNaN(attempt_nb) || (attempt_nb <= 0) ) {
        displayGUIError("CODE_PLAYED_PERFORMANCE / gameSolver msg error: invalid attempt_nb: " + attempt_nb, new Error().stack);
      }

      if (data.game_id == undefined) {
        displayGUIError("CODE_PLAYED_PERFORMANCE / gameSolver msg error: game_id is undefined", new Error().stack);
      }
      let game_id = Number(data.game_id);
      if ( isNaN(game_id) || (game_id < 0) ) {
        displayGUIError("CODE_PLAYED_PERFORMANCE / gameSolver msg error: invalid game_id: " + game_id, new Error().stack);
      }

      writePerformanceOfCodePlayed(relative_perf_p, relative_perf_evaluation_done_p, classical_useless_code_p, best_global_performance_p, code_p, attempt_nb, game_id);

    }

    // ******
    // Traces
    // ******

    else if (data.rsp_type == 'TRACE') {

      if ((data.game_id == undefined) || (Number(data.game_id) != game_cnt)) { // unexpected game_id
        displayGUIError("TRACE / unexpected game_id: " + data.game_id + ", " + game_cnt, new Error().stack);
      }
      if (data.trace_contents == undefined) {
        displayGUIError("TRACE / gameSolver msg error: trace_contents is undefined", new Error().stack);
      }
      let trace_str = data.trace_contents.concat("<br>");

      traceObject.innerHTML = traceObject.innerHTML.concat(trace_str);

    }

    // **********
    // Error case
    // **********

    else {
      displayGUIError("gameSolver error: unexpected rsp_type: " + data.rsp_type, new Error().stack);
      return;
    }

  }
  catch (exc) {
    displayGUIError("onGameSolverMsg error: " + exc, exc.stack);
  }

}

// ***********************
// Event-related functions
// ***********************

function newGameButtonClick_delayed(display_ads_if_needed) {

  // Display ads if needed
  if (display_ads_if_needed) {
    if (typeof displayAdsIfNeeded !== 'undefined') {
      displayAdsIfNeeded();
    }
  }

  // Transition effect 1/2
  try {
    $(pageTransitionObject).fadeIn("fast");
  }
  catch (exc) {
  }

  // Debug values
  if (currentAttemptNumber-1 != nbOfStatsFilled_Perfs) {
    nbGamesAbortedWithOnGoingWorker++;
    lastGameWasAbortedWithOnGoingWorker = true;
  }
  else {
    lastGameWasAbortedWithOnGoingWorker = false;
  }

  newGameEvent = true;
  nbNewGameEvents++;
  updateGameSizes();
  draw_graphic();

  // Transition effect 2/2
  try {
    $(pageTransitionObject).fadeOut("fast");
  }
  catch (exc) {
  }
}

function gameAbortionEnd() {
  $(gameAbortedObject).fadeOut(200);
  dsCode = false;
  newGameButtonClick_delayed(true);
}

checkButtonEvent = function(mouseEvent) { // (override temporary definition)
  if (mouseEvent) { // mouse event
    if ((new Date()).getTime() - last_touch_button_event_time < 1000) {
      // console.log("checkButtonEvent for mouse event skipped");
      return false;
    }
    else {
      last_mouse_button_event_time = (new Date()).getTime();
      return true;
    }
  }
  else { // touchpad event
    if ((new Date()).getTime() - last_mouse_button_event_time < 1000) {
      // console.log("checkButtonEvent for touchpad event skipped");
      return false;
    }
    else {
      last_touch_button_event_time = (new Date()).getTime();
      return true;
    }
  }
}

newGameButtonClick = function(nbColumns_p) { // (override temporary definition)
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("newGameButtonClick skipped");
    return;
  }
  if (!newGameButtonObject.disabled) {
    if ( (nbColumns_p == 0) // ("NEW GAME" button event)
         || (currentAttemptNumber <= 1) ) { // (radio buttons events)

      if (gameOnGoing() && (currentAttemptNumber > 1)) { // (condition duplicated)

        if (localStorage.firstname && (nbColumns >= 5)) { // (condition duplicated)
          if (nbNewGameEventsCancelled <= 2) { // Avoid repetitive or endless (in Firefox for example) cancellations
            var rsp = confirm("Do you really want to abort current game?");
            if (!rsp) {
              nbNewGameEventsCancelled++;
              return; // Cancel or "x" (close) button
            }
          }
        }
        nbOnGoingGamesAborted++;

        if (nbColumns == 3) {
          setTimeout("dsCode = false; newGameButtonClick_delayed(true);", 2500);
        }
        else {
          let game_aborted_str = "<b>Current game was aborted"
                                 + (localStorage.firstname ? "<hr style='height:1.75vh;padding:0;margin:0;visibility:hidden;' />You shall win 5 consecutive games<br>to get your total score and<br>performance computed" : "")
                                 + "<br><img alt='loading...' src='img/loading.gif' style='height:12%;'><br>  <!-- (not rem unit as no viewport!) -->"
                                 + (mobileMode ? "Tap" : "Click") + " to start a new game</b>";
          gameAbortedObject.innerHTML = game_aborted_str;

          // Transition effect
          try {
            $(gameAbortedObject).fadeIn((nbColumns <= 4) ? 2000 : 2500);
          }
          catch (exc) {
          }
        }

        dsCode = true;
        main_graph_update_needed = true;
        updateGameSizes(); // (due to dsCode update)
        draw_graphic();

      }
      else {
        newGameButtonClick_delayed(true);
      }

    }
  }
}

resetCurrentCodeButtonClick = function() { // (override temporary definition)
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("resetCurrentCodeButtonClick skipped");
    return;
  }
  if (!resetCurrentCodeButtonObject.disabled) {
    currentCode = sCodeRevealed;
    draw_graphic();
  }
}

function playACodeAutomatically(code_p) {
  if (currentAttemptNumber <= 3) {
    currentCode = code_p;
    draw_graphic();
  }
}

playRandomCodeButtonClick = function() { // (override temporary definition)
  if ((gamesolver_blob == null) || !scriptsFullyLoaded || dsCode) {
    console.log("playRandomCodeButtonClick skipped");
    return;
  }
  if (!playRandomCodeButtonObject.disabled) {
    randomCodesHintToBeDisplayed = false;
    nb_random_codes_played++;
    currentCode = smmCodeHandler.createRandomCode(sCodeRevealed);
    draw_graphic();
  }
}

function displayRandomCodesHintIfNeeded() {
  if (randomCodesHintToBeDisplayed) {
    if (localStorage.gamesok) {
      if ( (Number(localStorage.gamesok) >= 100) && ((Number(localStorage.gamesok) % ((Number(localStorage.gamesok) <= 400) ? 50 : 80)) == 0) ) {
        alert("A little fun?\nClick on the \"" + playRandomCodeButtonObject.value + "\" button to play your first few codes randomly");
        randomCodesHintToBeDisplayed = false;
      }
    }
  }
}

function displayRevealSecretColorHintIfNeeded() {
  alert("Need some help?\nClick on the \"" + revealSecretColorButtonObject.value + "\" button to reveal a color");
}

revealSecretColorButtonClick = function() { // (override temporary definition)
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("revealSecretColorButtonClick skipped");
    return;
  }
  if ( (!revealSecretColorButtonObject.disabled)
       && gameOnGoing()
       && (sCode != -1) && (sCodeRevealed != -1) ) {
    let nbEmptyColors = smmCodeHandler.nbEmptyColors(sCodeRevealed);
    let nbColorsRevealed = nbColumns - nbEmptyColors;
    if (nbColorsRevealed == 0) {
      var rsp = confirm("Do you want to reveal a color of the secret code? If so, your score will not be stored online");
      if (!rsp) {
        return; // Cancel or "x" (close) button
      }
    }
    if (nbEmptyColors <= 2) {
      displayGUIError("too many revealed colors: " + nbEmptyColors, new Error().stack);
    }
    else {
      let revealedColorIdx = Math.floor(Math.random() * nbEmptyColors);
      sCodeRevealed = smmCodeHandler.replaceEmptyColor(sCodeRevealed, revealedColorIdx, smmCodeHandler.convert(sCode));
      currentCode = sCodeRevealed;
      main_graph_update_needed = true;
      draw_graphic();
    }
  }
}

showPossibleCodesButtonClick = function(invertMode = true, newPossibleCodeShown = -1, showModeForced = false, transientMode = false) { // (override temporary definition)
  let animated_mode = false;
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("showPossibleCodesButtonClick skipped");
    return;
  }
  if (!showPossibleCodesButtonObject.disabled) {

    if (showModeForced && showPossibleCodesMode) { // (showPossibleCodesMode is already true)
      return;
    }

    // Transition effect 1/2
    if (invertMode || showModeForced) {
      try {
        $(pageTransitionObject).fadeIn("fast");
      }
      catch (exc) {
      }
    }

    if (showModeForced) {
      showPossibleCodesMode = true;
    }
    else if (invertMode) {
      showPossibleCodesMode = !showPossibleCodesMode;
      disableMouseMoveEffects = false;
    }
    if (!showPossibleCodesMode) {
      nbPossibleCodesShown = -1;
      currentPossibleCodeShown = -1;
    }
    else {
      let targetedCodesShown = 20 + (nbMaxAttempts+1 - currentAttemptNumber); // (*)
      if (targetedCodesShown > nbMaxPossibleCodesShown/2 /* (half display) */) {
        throw new Error("invalid nbMaxPossibleCodesShown: " + nbMaxPossibleCodesShown);
      }
      nbPossibleCodesShown = Math.max(nbMinPossibleCodesShown/2 /* (half display) */, targetedCodesShown);
      if ((newPossibleCodeShown == -1) || (newPossibleCodeShown == -2)) {
        animated_mode = (newPossibleCodeShown == -2);
        let interesting_attempt_idx = 0;
        let interesting_attempt_idx_was_updated = false;
        let interesting_attempt_idx_bis = 0;
        let lowest_significant_relative_performance = PerformanceMaxValidValue;
        let not_so_good_perf = PerformanceNA;
        if (nbColumns <= 3) {
          not_so_good_perf = -0.095; // -0.10 with rounding
        }
        else if (nbColumns == 4) {
          not_so_good_perf = -0.115; // -0.12 with rounding
        }
        else {
          not_so_good_perf = -0.145; // -0.15 with rounding
        }
        if (not_so_good_perf <= 0.8*PerformanceLOW) {
          throw new Error("inconsistent not_so_good_perf: " + not_so_good_perf);
        }
        for (let i = currentAttemptNumber-2; i >= 0; i--) {
          if ( (nbOfPossibleCodes[i] >= 2) // several possible codes left
               && (relative_performances_of_codes_played[i] != -1.00) // not a useless code
               && (relative_performances_of_codes_played[i] != PerformanceUNKNOWN)
               && (relative_performances_of_codes_played[i] != PerformanceNA)
               && (relative_performances_of_codes_played[i] <= not_so_good_perf) ) { // code played was not so good
            if (relative_performances_of_codes_played[i] < lowest_significant_relative_performance) {
              lowest_significant_relative_performance = relative_performances_of_codes_played[i];
              interesting_attempt_idx = i;
              interesting_attempt_idx_was_updated = true;
            }
          }
          if ((nbOfPossibleCodes[i] >= 2) && (interesting_attempt_idx_bis == 0)) {
            interesting_attempt_idx_bis = i;
          }
        }
        if (!interesting_attempt_idx_was_updated) {
          interesting_attempt_idx = interesting_attempt_idx_bis;
        }
        currentPossibleCodeShown = interesting_attempt_idx+1;
      }
      else {
        currentPossibleCodeShown = newPossibleCodeShown;
      }
    }
    if (!transientMode) {
      currentPossibleCodeShownBeforeMouseMove = currentPossibleCodeShown;
    }
    updateGameSizes();
    if (!animated_mode) {
      draw_graphic();
    }

    // Transition effect 2/2
    if (invertMode || showModeForced) {
      try {
        $(pageTransitionObject).fadeOut("fast");
      }
      catch (exc) {
      }
    }

    if (animated_mode) {
      let initialCurrentPossibleCodeShown = currentPossibleCodeShown;
      for (let i = 1; i <= initialCurrentPossibleCodeShown; i++) { // last loop will point to the initial currentPossibleCodeShown value
        setTimeout("try{if (showPossibleCodesMode && !showPossibleCodesButtonObject.disabled && (game_cnt == " + game_cnt + ")){currentPossibleCodeShown = " + i + "; updateGameSizes(); draw_graphic();}}catch(possible_error){}", 444*i);
      }
    }

  }
}

function handleDisplayModeSelectionChange() {
    var displayModeSelectObject = document.getElementById('displayModeSelect');
    if (displayModeSelectObject == null) {
      throw new Error("displayModeSelect was not found");
    }
    var value = displayModeSelectObject.value;
    console.log("display mode changed: " + value);
    switch (value) {
        case "1":
            modernDisplay = false;
            legacyDisplayVariant = 0;
            break;
        case "2":
            modernDisplay = false;
            legacyDisplayVariant = 1;
            break;
        case "3":
            modernDisplay = true;
            legacyDisplayVariant = 0;
            break;
        default:
            throw new Error("invalid value selected for display mode: " + value);
    }
    localStorage.modernDisplayApplied = modernDisplay;
    localStorage.legacyDisplayVariant = legacyDisplayVariant;

    updateThemeAttributes();
    main_graph_update_needed = true;
    draw_graphic();
}

settingsButtonClick = function() { // (override temporary definition)
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("settingsButtonClick skipped");
    return;
  }
  if (!settingsButtonObject.disabled) {
    let display_form_str =
      "<b>SELECT DISPLAY MODE:</b><hr style='height:0.75vh;padding:0;margin:0;visibility:hidden;'>\
       <select id='displayModeSelect' style='font-size:1.75vh;color:black' onChange='handleDisplayModeSelectionChange()'>\
         <option value='1'" + ((!modernDisplay) && (legacyDisplayVariant != 1) ? " selected" : "") + ">numbers / classical display</option>\
         <option value='2'" + ((!modernDisplay) && (legacyDisplayVariant == 1) ? " selected" : "") + ">colors only / classical display</option>\
         <option value='3'" + (modernDisplay ? " selected" : "") + ">numbers / light display</option>\
       </select><hr style='height:1.25vh;padding:0;margin:0;visibility:hidden;'>";

    let change_first_name_str = "";
    if (localStorage.firstname) {
      let nb_first_name_changes_left_str = "";
      if (localStorage.nbTimesFirstnameSet && (Number(localStorage.nbTimesFirstnameSet) + 1 >= nbMaxTimesFirstnameChanged)) {
        nb_first_name_changes_left_str = " (last change!)";
      }
      if (!(localStorage.nbTimesFirstnameSet && (Number(localStorage.nbTimesFirstnameSet) >= nbMaxTimesFirstnameChanged))) {
          change_first_name_str = 
            "<b>CHANGE FIRST NAME:</b><hr style='height:0.75vh;padding:0;margin:0;visibility:hidden;'>"
            + "<a onclick='ask_for_firstname();'> Change " + localStorage.firstname + nb_first_name_changes_left_str
            + "</a><hr style='height:1.25vh;padding:0;margin:0;visibility:hidden;'>";
      }
    }

    let game_rules_str =
      "<center><table style='width:" + rulesTableWidthStr + ";'><tr style='text-align:center;'><td><font style='font-size:1.75vh;color:black'>\
      <br><b>HOW TO PLAY:</b><hr style='height:0.50vh;padding:0;margin:0;visibility:hidden;'>\
      <img src='img/SuperMasterMind_rules.png' style='width:100%;margin-top:0;margin-bottom:0'><hr style='height:0.25vh;padding:0;margin:0;visibility:hidden;'>"
      + "Not clear? see detailed <b><a href='index.html#game_rules'>Game&nbsp;rules</a></b><hr style='height:1.25vh;padding:0;margin:0;visibility:hidden;'>"
      + display_form_str
      + change_first_name_str
      + "<b>MORE INFO:</b><hr style='height:0.75vh;padding:0;margin:0;visibility:hidden;'>\
         <b><a href='index.html'>Web&nbsp;site</a> |&nbsp;<a href='optimal_strategy.html'>Optimal&nbsp;strategy</a> |&nbsp;<a href='screenshots.html'>Game&nbsp;examples</a> |&nbsp;<a href='" + android_app_url + "'>Android</a> |&nbsp;<a href='contact_info.html'>Contact</a></b>\
         </font></td></tr></table></center><hr style='height:2.00vh;padding:0;margin:0;visibility:hidden;'>";

    try {
      gameRulesDisplayed = true;
      modal_mode = 3;
      // set modal content
      modal.setContent("<div style='-webkit-touch-callout: none; /* iOS Safari */ -webkit-user-select: none; /* Safari */ -khtml-user-select: none; /* Konqueror HTML */ -moz-user-select: none; /* Firefox */ -ms-user-select: none; /* Internet Explorer/Edge */ user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */'>"
                       + game_rules_str
                       + "</div>");
      // open modal
      modal.open();
    }
    catch (exc) {
      throw new Error("modal error (" + modal_mode + "):" + exc + ": " + exc.stack);
    }
  }
}

function handleTouchStartOrMouseDownEvent(x, y) {
  let event_x_min, event_x_max, event_y_min, event_y_max;
  let rect = canvas.getBoundingClientRect();
  let mouse_x = Math.ceil(x - rect.left);
  let mouse_y = Math.ceil(y - rect.top);
  if (dsCode) {
    return;
  }

  // ***************
  // Color selection
  // ***************

  else if (gameOnGoing()) {

    event_x_min = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100));
    event_x_max = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2));
    event_y_min = get_y_pixel(y_min+y_step*(nbMaxAttempts-nb_attempts_not_displayed-(skip_last_attempt_display?1:0)+transition_height+scode_height+transition_height+nbColors));
    event_y_max = get_y_pixel(y_min+y_step*(currentAttemptNumber-1));

    if ( (mouse_x > event_x_min) && (mouse_x < event_x_max)
         && (mouse_y > event_y_min) && (mouse_y < event_y_max) ) {

      try {
        for (let column = 0; column < nbColumns; column++) {
          let x_0, y_0, x_1, y_1;
          x_0 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+column*2));
          x_1 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+(column+1)*2));
          if ((mouse_x > x_0 + refLineWidth) && (mouse_x < x_1 - refLineWidth)) { // margin for ambiguous clicks
            let colorSelected = false;
            for (let color = 0; color < nbColors; color++) {
              y_0 = get_y_pixel(y_min+y_step*(nbMaxAttempts-nb_attempts_not_displayed-(skip_last_attempt_display?1:0)+transition_height+scode_height+transition_height+(color+1)));
              y_1 = get_y_pixel(y_min+y_step*(nbMaxAttempts-nb_attempts_not_displayed-(skip_last_attempt_display?1:0)+transition_height+scode_height+transition_height+color));
              if ((mouse_y > y_0 + refLineWidth) && (mouse_y < y_1 - refLineWidth)) { // margin for ambiguous clicks
                colorSelected = true;
                color_being_selected = color+1;
                column_of_color_being_selected = column+1;
                playAColor(color+1, column+1);
                nbColorSelections++;
                break;
              }
            }
            if (!colorSelected) {
              color_being_selected = -1;
              column_of_color_being_selected = -1;
              playAColor(emptyColor, column+1);
            }
            draw_graphic();
            break;
          }
        }
      }
      catch (exc) {
        displayGUIError("mouseReleased: " + exc, exc.stack);
      }

    }

  }

  // *****************
  // Attempt selection
  // *****************

  else if ((!gameOnGoing()) && allPossibleCodesFilled()) { // (condition duplicated)

    if (!showPossibleCodesMode) {
      event_y_min = get_y_pixel(y_min+y_step*(nbMaxAttempts-nb_attempts_not_displayed-(skip_last_attempt_display?1:0)));
    }
    else {
      event_y_min = get_y_pixel(y_min+y_step*(currentAttemptNumber-1));
    }
    event_y_max = get_y_pixel(y_min+y_step*0);

    if ( (mouse_y > event_y_min) && (mouse_y < event_y_max) ) { // (below code duplicated)
      lastidxBeforeMouseMove = -1;
      for (let idx = 0; idx < currentAttemptNumber-1; idx++) {
        let y_0 = get_y_pixel(y_min+y_step*(idx+1));
        let y_1 = get_y_pixel(y_min+y_step*(idx));
        if ((mouse_y > y_0) && (mouse_y < y_1)) {
          showPossibleCodesOffsetMode = false;
          disableMouseMoveEffects = true;
          if (showPossibleCodesMode) {
            atLeastOneAttemptSelection = true;
          }
          showPossibleCodesButtonClick(!showPossibleCodesMode, idx+1);
          break;
        }
      }
    }
    else {
      if (showPossibleCodesMode) {
        disableMouseMoveEffects = false;
        let x_0_half_display = get_x_pixel(x_min);
        let x_1_half_display = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100));
        let y_0_half_display = get_y_pixel(y_min+y_step*(currentAttemptNumber-1+transition_height+1+0.75/* (margin) */));
        let y_1_half_display = get_y_pixel(y_min+y_step*(currentAttemptNumber-1+transition_height/2/* (margin) */));
        if ( (mouse_x > x_0_half_display) && (mouse_x < x_1_half_display)
             && (mouse_y > y_0_half_display) && (mouse_y < y_1_half_display) ) { // (half display - always tested to simplify)
          atLeastOneAttemptSelection = true;
          showPossibleCodesOffsetMode = !showPossibleCodesOffsetMode;
          main_graph_update_needed = true;
          draw_graphic();
        }
        else { // (other zones)
          showPossibleCodesOffsetMode = false;
          lastidxBeforeMouseMove = -1;
          showPossibleCodesButtonClick();
        }
      }
      else {
        lastidxBeforeMouseMove = -1;
      }
    }

  }

}

function touchStart(e) {
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("touchStart skipped");
    last_touch_event_time = -1;
    return;
  }

  if ((e == undefined) || (e.touches == undefined) || (e.touches[0] == undefined) || (e.touches[0].clientX == undefined) || (e.touches[0].clientY == undefined)) {
    console.log("touchStart skipped #2");
    last_touch_event_time = -1;
    return;
  }

  last_touch_event_time = (new Date()).getTime();
  handleTouchStartOrMouseDownEvent(e.touches[0].clientX, e.touches[0].clientY);
}

function touchEnd() {
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("touchEnd skipped");
    return;
  }
  last_touch_event_time = (new Date()).getTime();
  mouseUp();
}

function mouseDown(e) {
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("mouseDown skipped");
    return;
  }

  // Detect redundant/conflictual events: touchstart event followed by mousedown event
  if ((new Date()).getTime() - last_touch_event_time < 1000) { // (condition duplicated)
    // console.log("mouseDown skipped #2");
    return;
  }

  handleTouchStartOrMouseDownEvent(e.clientX, e.clientY);
}

function mouseUp() {
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("mouseUp skipped");
    return;
  }
  color_being_selected = -1;
  column_of_color_being_selected = -1;
  highlight_selected_text = false;
  draw_graphic();
}

function mouseMove(e) {
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("mouseMove skipped");
    return;
  }
  // Detect redundant/conflictual events: touchstart event followed by mousemove event
  if ((new Date()).getTime() - last_touch_event_time < 1000) { // (condition duplicated)
    // console.log("mouseMove skipped #2");
    return;
  }

  if (!showPossibleCodesMode) {
    return;
  }
  else if ((!gameOnGoing()) && allPossibleCodesFilled()) { // (condition duplicated)

    let event_x_min, event_x_max, event_y_min, event_y_max;
    let rect = canvas.getBoundingClientRect();
    let mouse_x = e.clientX - rect.left - 2.0 /* (correction) */;
    let mouse_y = e.clientY - rect.top - 2.0 /* (correction) */;

    event_x_min = get_x_pixel(x_min);
    event_x_max = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width+tick_width));
    event_y_min = get_y_pixel(y_min+y_step*(currentAttemptNumber-1));
    event_y_max = get_y_pixel(y_min+y_step*0);

    if (mouse_y < event_y_min) {
      disableMouseMoveEffects = false;
    }

    if (disableMouseMoveEffects) {
      return;
    }

    if ( (mouse_x > event_x_min) && (mouse_x < event_x_max)
          && (mouse_y > event_y_min) && (mouse_y < event_y_max) ) { // (below code duplicated)
      for (let idx = 0; idx < currentAttemptNumber-1; idx++) {
        let y_0 = get_y_pixel(y_min+y_step*(idx+1));
        let y_1 = get_y_pixel(y_min+y_step*(idx));
        if ((mouse_y > y_0) && (mouse_y < y_1)) {
          if (lastidxBeforeMouseMove != idx+1) {
            showPossibleCodesOffsetMode = false;
            showPossibleCodesButtonClick(false, idx+1, false, true);
            lastidxBeforeMouseMove = idx+1;
          }
          break;
        }
      }
    }
    else { // (other zones)
      if (lastidxBeforeMouseMove != currentPossibleCodeShownBeforeMouseMove) {
        showPossibleCodesOffsetMode = false;
        showPossibleCodesButtonClick(false, currentPossibleCodeShownBeforeMouseMove, false, true);
        lastidxBeforeMouseMove = currentPossibleCodeShownBeforeMouseMove;
      }
    }

  }
}

let promptSequenceIndex = 0;
function playAColor(color, column) {
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("playAColor skipped");
    return;
  }
  if (gameOnGoing()) {
    if ((color == 4) && (column == 3)) {
      promptSequenceIndex++;
      if (promptSequenceIndex == 8) {
        promptSequenceIndex = 0;
        setTimeout("handlePrompt()", 444);
      }
    }
    else {
      promptSequenceIndex = 0;
    }
    if ((color != emptyColor) && obviouslyImpossibleColors[color]) {
      if (currentAttemptNumber == nbMaxAttempts) {
        return;
      }
      if ((nbColumns == 5) && (currentAttemptNumber <= 3)) { // Super Master Mind game
        setTimeout("alert('To simplify calculations, obviously impossible colors can only be selected from mid-game');", 111);
        return;
      }
    }
    let newCurrentCode = smmCodeHandler.setColor(currentCode, color, column);
    for (let i = 1; i < currentAttemptNumber; i++) {
      if (newCurrentCode == codesPlayed[i-1]) {
        setTimeout("alert('This code was already played');", 111);
        return;
      }
    }
    if (smmCodeHandler.isFullAndValid(newCurrentCode)) {
      let allColorsAreObviouslyImpossible = true;
      for (let col = 0; col < nbColumns; col++) {
        let color2 = smmCodeHandler.getColor(newCurrentCode, col+1);
        if (!obviouslyImpossibleColors[color2]) {
          allColorsAreObviouslyImpossible = false;
          break;
        }
      }
      if (allColorsAreObviouslyImpossible) {
        setTimeout("alert('This code only contains obviously impossible colors so is useless');", 111);
        return;
      }
    }
    currentCode = newCurrentCode;
    draw_graphic();
  }
}

let previousNbColumns = -1;
function getNbColumnsSelected() {
  // Check if a radio button is checked
  for (let i = 0; i < nbColumnsRadioObjects.length; i++) {
    if (nbColumnsRadioObjects[i].checked) {
     previousNbColumns = parseInt(nbColumnsRadioObjects[i].value);
     return previousNbColumns;
    }
  }
  // No radio button checked
  if (previousNbColumns == -1) { // First default setting
    nbColumnsRadioObjects[defaultNbColumns-nbMinColumns].checked = "checked";
    previousNbColumns = parseInt(nbColumnsRadioObjects[defaultNbColumns-nbMinColumns].value);
    return previousNbColumns;
  }
  else { // Keep current setting
    nbColumnsRadioObjects[previousNbColumns-nbMinColumns].checked = "checked";
    return previousNbColumns;
  }
}

function show_play_store_app(specific_str = "", android_stars_mode = false, forceStr = "") {
  if (forceStr != "") {
    let str =
      "<center><table style='width:" + generalTableWidthStr + ";'><tr style='text-align:center;'><td><font style='font-size:1.75vh;color:black'>\
      <br><b>" + forceStr + "</b><br>\
      </font></td></tr></table></center>";
    try {
      modal_mode = 4;
      // set modal content
      modal.setContent("<div style='-webkit-touch-callout: none; /* iOS Safari */ -webkit-user-select: none; /* Safari */ -khtml-user-select: none; /* Konqueror HTML */ -moz-user-select: none; /* Firefox */ -ms-user-select: none; /* Internet Explorer/Edge */ user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */'>"
                       + str
                       + "</div>");
      // open modal
      modal.open();
    }
    catch (exc) {
      throw new Error("modal error (" + modal_mode + "):" + exc + ": " + exc.stack);
    }
  }
  else if ( ((!android_appli) || android_stars_mode) && (last_dialog_gamesok != (localStorage.gamesok ? localStorage.gamesok : -2)) ) {
    let str1 = "";
    let str2 = "";
    if (mobileMode) {
      str1 = "a better game experience";
      str2 = "";
    }
    else {
      str1 = "another game experience";
      str2 = " on your smartphone";
    }
    let str = ((specific_str == "") ? ("For " + str1 + ",&nbsp;install the android app" + str2 + "!") : specific_str);
    let play_store_app_str =
      "<center><table style='width:" + generalTableWidthStr + ";'><tr style='text-align:center;'><td><font style='font-size:1.75vh;color:black'>\
      <br><b>" + str + "</b><br>\
      <a href='" + android_app_url + "'><img alt='Get it on Google Play' style='height:11vh;margin-top:1.5vh;margin-bottom:1.5vh' src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png'/><img alt='Get it on Google Play' style='height:11vh;margin-top:1.5vh;margin-bottom:1.5vh;border-radius:7%' src='img/Playstore_icon.png'/><br></a>\
      </font></td></tr></table></center>";
    try {
      modal_mode = 4;
      // set modal content
      modal.setContent("<div style='-webkit-touch-callout: none; /* iOS Safari */ -webkit-user-select: none; /* Safari */ -khtml-user-select: none; /* Konqueror HTML */ -moz-user-select: none; /* Firefox */ -ms-user-select: none; /* Internet Explorer/Edge */ user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */'>"
                       + play_store_app_str
                       + "</div>");
      // open modal
      modal.open();
    }
    catch (exc) {
      throw new Error("modal error (" + modal_mode + "):" + exc + ": " + exc.stack);
    }
    if (!localStorage.androidAppNotifShown) {
      localStorage.androidAppNotifShown = 0;
    }
    localStorage.androidAppNotifShown = Number(localStorage.androidAppNotifShown) + 1;
    last_dialog_gamesok = (localStorage.gamesok ? localStorage.gamesok : -1);
  }
}

// *****************
// General functions
// *****************

function updateGameSizes() {

  main_graph_update_needed = true;

  if (!CompressedDisplayMode) {
    attempt_nb_width = 2;
    nb_possible_codes_width = ((nbColumns>=7)?5:4);
    optimal_width = 4;
    tick_width = 3;

    transition_height = 1;
    scode_height = 1;
  }
  else {
    attempt_nb_width = 0;
    nb_possible_codes_width = ((nbColumns>=7)?3.2:((nbColumns==6)?3.2:3.2));
    optimal_width = (((!gameOnGoing())||showPossibleCodesMode)?3.0:0);
    tick_width = (((nbColumns<=4)||(!gameOnGoing())||showPossibleCodesMode)?1.35:0);

    if (!gameOnGoing() || dsCode) {
      transition_height = 0.4;
      scode_height = 1;
    }
    else {
      transition_height = 0.075;
      scode_height = 0;
    }
  }

  x_step = (x_max - x_min) / (attempt_nb_width // attempt number
                              + (70*(nbColumns+1))/100 // mark
                              + nbColumns*2 // code
                              + nb_possible_codes_width // number of possible codes
                              + optimal_width // optimal
                              + tick_width); // OK/NOK

  if (!showPossibleCodesMode) {
    nb_attempts_not_displayed = 0;
    skip_last_attempt_display = false;
    if (nbColumns >= 5) {
      nb_attempts_not_displayed = Math.max(0, nbMaxAttempts - (gameWon ? currentAttemptNumber - 1 : currentAttemptNumber) - 1); // nb_attempts_not_displayed calculation assumes last attempt is always displayed => skip_last_attempt_display will be applied on top of it
      let thld;
      if (nbColumns == 5) {
        thld = (CompressedDisplayMode ? 5 : 4);
      }
      else if (nbColumns == 6) {
        thld = (CompressedDisplayMode ? 6 : 5);
      }
      else { // (nbColumns >= 7)
        thld = (CompressedDisplayMode ? 7 : 6);
      }
      if (nb_attempts_not_displayed < thld) {
        skip_last_attempt_display = ((currentAttemptNumber < nbMaxAttempts) || (gameWon && (currentAttemptNumber == nbMaxAttempts) /* (do not leave just last line empty when game won) */));
      }
      else {
        nb_attempts_not_displayed = thld;
        skip_last_attempt_display = (gameWon && (currentAttemptNumber == nbMaxAttempts - thld)); // (do not leave just one line empty when game is won)
      }
    }
    y_step = (y_max - y_min) / (nbMaxAttempts-nb_attempts_not_displayed-(skip_last_attempt_display?1:0) // number of attempts displayed
                                + transition_height // margin
                                + scode_height // secret code
                                + transition_height // margin
                                + nbColors); // color selection
  }
  else {
    nb_attempts_not_displayed = 0;
    skip_last_attempt_display = false;
    if ( !((!gameOnGoing()) && allPossibleCodesFilled()) || (currentAttemptNumber <= 0) ) {
      displayGUIError("invalid context for updateGameSizes(): " + gameOnGoing() + ", " + allPossibleCodesFilled(), new Error().stack);
    }
    y_step = (y_max - y_min) / (currentAttemptNumber-1 // number of attempts reached at end of game
                                + transition_height // margin
                                + nbPossibleCodesShown // possible codes
                                + 1); // tick display
  }

}

function postInitMessageToGameSolver(cnt_p) {
  try {
    if (game_id_for_gameSolverConfig != cnt_p) { // ignore other threads
      console.log("postInitMessageToGameSolver() call ignored (1): " + game_id_for_gameSolverConfig + ", " + cnt_p);
      return;
    }
    if (game_id_for_gameSolverConfig != game_cnt) { // ignore other threads
      console.log("postInitMessageToGameSolver() call ignored (2): " + game_id_for_gameSolverConfig + ", " + game_cnt);
      return;
    }
    if (game_id_for_initGameSolver != -1) { // 'INIT' message was already posted
      console.log("postInitMessageToGameSolver() call skipped: " + game_id_for_initGameSolver + ", " + game_cnt);
      return;
    }
    if (gameSolverInitMsgContents != null) {
      if (gameSolverInitMsgContents.smm_req_type == undefined) {
        throw new Error("internal error: gameSolverInitMsgContents.smm_req_type == undefined");
      }
      gameSolverDbg = 99;
      gameSolver.postMessage(gameSolverInitMsgContents);
      gameSolverDbg = 100;
      game_id_for_initGameSolver = game_cnt;
    }
    else {
      throw new Error("internal error: gameSolverInitMsgContents == null");
    }
  }
  catch (err) {
    displayGUIError("postInitMessageToGameSolver() error: " + err, err.stack);
  }
}

function resetGameAttributes(nbColumnsSelected) {

  let i;
  let first_session_game;
  let debug_mode = '';

  if (game_cnt > 0) {
    console.clear();
  }

  game_cnt++;
  if (game_cnt > 1000000) {
    game_cnt = 1;
  }
  worst_mark_alert_already_displayed = false;
  if (typeof precalculatedFileFetched !== 'undefined') {precalculatedFileFetched = "ok";}

  // Clear gameSolver worker if necessary
  gameSolverDbg = 0;
  if (gameSolver !== undefined) {
    if (game_id_for_initGameSolver != -1) { // 'INIT' message was already posted
      // (code duplicated:)
      isWorkerAlive = -1;
      gameSolverDbg = 1;
      workerTerminationTime = (new Date()).getTime();
      gameSolver.terminate(); gameSolverDbg = 2;
      gameSolver = undefined;
    }
    // else: keep already-created gameSolver worker
  }
  gameSolverInitMsgContents = null;
  gameSolverConfigDbg = null;
  game_id_for_gameSolverConfig = -1;
  game_id_for_initGameSolver = -1;
  gamesolver_buffered_msg_status = 0;
  gamesolver_buffered_msg_action_str = "";

  reloadAllContentsDistantlyIfNeeded();

  try {
    if ( (!android_appli) && mobileMode && androidMode
                 && ( (!localStorage.gamesok && (game_cnt == 1)) // very first game played
                      || (localStorage.gamesok && ((Number(localStorage.gamesok) == 11) || (Number(localStorage.gamesok) == 22) || (Number(localStorage.gamesok) == 44) || (Number(localStorage.gamesok) == 67) || (Number(localStorage.gamesok) == 88) || (Number(localStorage.gamesok) == 128) || (Number(localStorage.gamesok) == 256))) )
       ) {
      show_play_store_app();
    }
    else if ( (!android_appli) && (!mobileMode) && localStorage.gamesok && (Number(localStorage.gamesok) > 0) && ((Number(localStorage.gamesok) == 51) || (Number(localStorage.gamesok) % 71 == 0) || (Number(localStorage.gamesok) % 444 == 0) || (Number(localStorage.gamesok) % 1004 == 0) || (Number(localStorage.gamesok) % 1444 == 0)) ) {
      show_play_store_app();
    }
    else if ( android_appli && localStorage.firstname && localStorage.gamesok && ((Number(localStorage.gamesok) == 25) || (Number(localStorage.gamesok) == 50) || (Number(localStorage.gamesok) == 77) || (Number(localStorage.gamesok) == 112) || (Number(localStorage.gamesok) == 156) || (Number(localStorage.gamesok) == 204) || (Number(localStorage.gamesok) == 304) || (Number(localStorage.gamesok) == 404) || (Number(localStorage.gamesok) == 707) || (Number(localStorage.gamesok) == 1061) || (Number(localStorage.gamesok) == 1333) || (Number(localStorage.gamesok) == 1644) || (Number(localStorage.gamesok) == 2004)) ) {
      show_play_store_app("<font color=#C900A1>Hi " + localStorage.firstname + "</font><hr style='height:1.0vh;padding:0;margin:0;visibility:hidden;'>If you like this game,<br>put stars<br><big>&#x2b50;&#x2b50;&#x2b50;&#x2b50;&#x2b50;</big><br>and positive comments<br>on&nbsp;Google&nbsp;Play<hr style='height:1.0vh;padding:0;margin:0;visibility:hidden;'>Thanks for your support!<hr style='height:0.25vh;padding:0;margin:0;visibility:hidden;'>", true);
    }
    else if ( localStorage.firstname && localStorage.gamesok && (Number(localStorage.gamesok) >= 55) && (nbGamesPlayedAndWon >= 1)
              && localStorage.lastDonationTimeT && ((new Date()).getTime() - localStorage.lastDonationTimeT > 21*24*60*60*1000 /* (3 weeks) */) ) {
      let paypalStr =
        "If you like this game, you&nbsp;can&nbsp;donate\
        <hr style='height:0.25vh;padding:0;margin:0;visibility:hidden;'>\
        <a href='https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=F9EE2A483RT9J&source=url'>\
        <img alt='Donate with Paypal' style='height:6vh;margin-top:1.0vh;margin-bottom:1.0vh' src='img/paypal-donate-button.png'></a><br>"
        + (false /* [DISABLE ADS]*/ ? "<hr style='height:0.25vh;padding:0;margin:0;visibility:hidden;'>\
        or look at some ads in the&nbsp;<a href='index.html'>main&nbsp;page</a><br>(it can bring small revenue)<br>" : "")
        + "<hr style='height:0.25vh;padding:0;margin:0;visibility:hidden;'>\
        Thanks for your support!<hr style='height:0.25vh;padding:0;margin:0;visibility:hidden;'>";
      show_play_store_app("", false, "<font color=#C900A1>Hi " + localStorage.firstname + "</font><hr style='height:1.0vh;padding:0;margin:0;visibility:hidden;'>" + paypalStr);
      localStorage.lastDonationTimeT = (new Date()).getTime();
      if (!localStorage.nbDonationRequestsT) {
        localStorage.nbDonationRequestsT = 0;
      }
      localStorage.nbDonationRequestsT = Number(localStorage.nbDonationRequestsT) + 1;
    }
  }
  catch (tmp_exc) {}

  main_graph_update_needed = true;
  smmCodeHandler = null;

  nbColumns = nbColumnsSelected;
  if (typeof currentGameNbColumns !== 'undefined') {
    currentGameNbColumns = nbColumns;
  }
  switch (nbColumns) {
    case 3:
      nbColors = Math.max(nbMinColors, nominalGameNbColors - 3);
      nbMaxAttempts = nominalGameNbMaxAttempts - 4;
      document.title = "Very easy game";
      break;
    case 4:
      nbColors = Math.max(nbMinColors, nominalGameNbColors - 2);
      nbMaxAttempts = nominalGameNbMaxAttempts - 4;
      document.title = "Master Mind";
      break;
    case 5: // nominalGameNbColumns
      nbColors = nominalGameNbColors;
      nbMaxAttempts = nominalGameNbMaxAttempts;
      document.title = "Super Master Mind";
      break;
    case 6:
      nbColors = Math.min(nbMaxColors, nominalGameNbColors + 1);
      nbMaxAttempts = nominalGameNbMaxAttempts + 1;
      document.title = "Mega Master Mind";
      break;
    case 7:
      nbColors = Math.min(nbMaxColors, nominalGameNbColors + 2);
      nbMaxAttempts = nominalGameNbMaxAttempts + 2;
      document.title = "Ultra Master Mind";
      break;
    default:
      throw new Error("invalid selection of number of columns: " + nbColumns + " (1)");
  }
  if ( (nbMaxAttempts < overallNbMinAttempts) || (nbMaxAttempts > overallNbMaxAttempts) ) {
    throw new Error("invalid nbMaxAttempts: " + nbMaxAttempts);
  }

  smmCodeHandler = new SmmCodeHandler(nbColumns, nbColors, nbMinColumns, nbMaxColumns, emptyColor);

  showPossibleCodesMode = false;
  showPossibleCodesOffsetMode = false;
  nbMinPossibleCodesShown = 2*(nbColumns+nbColors+4);
  nbMaxPossibleCodesShown = 2*(20 + nbMaxAttempts); // (*)
  if (nbMaxPossibleCodesShown < nbMinPossibleCodesShown) {
    throw new Error("inconsistent nbMinPossibleCodesShown and nbMaxPossibleCodesShown");
  }
  nbPossibleCodesShown = -1;
  currentPossibleCodeShown = -1;
  disableMouseMoveEffects = false;

  nbColorSelections = 0;
  currentCode = 0;
  codesPlayed = new Array(nbMaxAttempts);
  for (i = 0; i < nbMaxAttempts; i++) {
    codesPlayed[i] = 0;
  }
  marks = new Array(nbMaxAttempts);
  for (i = 0; i < nbMaxAttempts; i++) {
    marks[i] = {nbBlacks:0, nbWhites:0};
  }
  nbOfPossibleCodes = new Array(nbMaxAttempts);
  for (i = 0; i < nbMaxAttempts; i++) {
    nbOfPossibleCodes[i] = 0;
  }
  colorsFoundCodes = new Array(nbMaxAttempts);
  minNbColorsTables = new Array(nbMaxAttempts);
  for (i = 0; i < nbMaxAttempts; i++) {
    minNbColorsTables[i] = new Array(nbColors+1);
  }
  maxNbColorsTables = new Array(nbMaxAttempts);
  for (i = 0; i < nbMaxAttempts; i++) {
    maxNbColorsTables[i] = new Array(nbColors+1);
  }
  obviouslyImpossibleColors = new Array(nbColors+1);
  for (i = 0; i < nbColors+1; i++) {
    obviouslyImpossibleColors[i] = false;
  }
  relative_performances_of_codes_played = new Array(nbMaxAttempts);
  global_best_performances = new Array(nbMaxAttempts);
  for (i = 0; i < nbMaxAttempts; i++) {
    relative_performances_of_codes_played[i] = PerformanceNA;
    global_best_performances[i] = PerformanceNA;
  }
  relativePerformancesEvaluationDone = new Array(nbMaxAttempts);
  for (i = 0; i < nbMaxAttempts; i++) {
    relativePerformancesEvaluationDone[i] = false;
  }
  classicalUselessCode = new Array(nbMaxAttempts);
  for (i = 0; i < nbMaxAttempts; i++) {
    classicalUselessCode[i] = false;
  }
  performancesDisplayed = new Array(nbMaxAttempts);
  for (i = 0; i < nbMaxAttempts; i++) {
    performancesDisplayed[i] = false;
  }

  possibleCodesLists = new Array(nbMaxAttempts);
  possibleCodesListsSizes = new Array(nbMaxAttempts);
  possibleCodesListsSubdivisions = new Array(nbMaxAttempts);
  equivalentPossibleCodes = new Array(nbMaxAttempts);
  globalPerformancesList = new Array(nbMaxAttempts); // (same size as possibleCodesLists)
  for (i = 0; i < nbMaxAttempts; i++) {
    possibleCodesLists[i] = new Array(nbMaxPossibleCodesShown);
    possibleCodesListsSizes[i] = 0;
    possibleCodesListsSubdivisions[i] = -1; // N.A.
    equivalentPossibleCodes[i] = 0; // N.A.
    globalPerformancesList[i] = new Array(nbMaxPossibleCodesShown);
  }

  nbOfStatsFilled_NbPossibleCodes = 0;
  nbOfStatsFilled_ListsOfPossibleCodes = 0;
  nbOfStatsFilled_Perfs = 0;
  currentAttemptNumber = 1;

  gameWon = false;
  setLightGray(); // (due to lightGray update at game end)
  timeStr = "";
  wasGameShort = false;
  score = -1.0;
  sumPerfs = 0.00;
  nbUnknownPerfs = 0;

  sCode = ~(smmCodeHandler.createRandomCode());
  /* XXX
  let toto = smmCodeHandler.createRandomCode();
  toto = smmCodeHandler.setColor(toto, 4, 1);
  toto = smmCodeHandler.setColor(toto, 4, 2);
  toto = smmCodeHandler.setColor(toto, 4, 3);
  toto = smmCodeHandler.setColor(toto, 4, 4);
  toto = smmCodeHandler.setColor(toto, 4, 5);
  // toto = smmCodeHandler.setColor(toto, 4, 6);
  // toto = smmCodeHandler.setColor(toto, 4, 7);
  sCode = ~(toto); */

  sCodeRevealed = 0; // (empty code)

  newGameEvent = false;
  dsCode = false;

  revealSecretColorButtonAlreadyBlinked = false;
  showPossibleCodesButtonAlreadyBlinked = false;

  gameErrorStr = "";
  gameErrorCnt = 0;

  nb_random_codes_played = 0;
  at_least_one_useless_code_played = false;

  updateGameSizes();

  // Create a new worker for gameSolver if needed
  if (gameSolver == undefined) {
    isWorkerAlive = 0;
    workerCreationTime = (new Date()).getTime();
    // gameSolver = new Worker("GameSolver.js"); gameSolverDbg = 3;
    if (gamesolver_blob == null) {
      displayGUIError("GameSolver script has not been loaded successfully: " + gamesolver_blob_error, new Error().stack);
    }
    gameSolver = new Worker(window.URL.createObjectURL(gamesolver_blob)); gameSolverDbg = 3;
  }
  // gameSolver.addEventListener('error', onGameSolverError, false); gameSolverDbg = 4;
  gameSolver.onerror = onGameSolverError; gameSolverDbg = 4;
  Worker.onmessageerror = onGameSolverMessageError; gameSolverDbg = 5;
  gameSolver.onmessageerror = onGameSolverMessageError; gameSolverDbg = 6;
  // gameSolver.addEventListener('message', onGameSolverMsg, false); gameSolverDbg = 7;
  gameSolver.onmessage = onGameSolverMsg; gameSolverDbg = 7;
  // Send a message to the gameSolver worker to initialize it
  if (!sessionStorage.first_session_game) {
    sessionStorage.first_session_game = 1;
    first_session_game = true;
  }
  else {
    first_session_game = false;
  }
  if (localStorage.debug_mode) {
    debug_mode = localStorage.debug_mode;
  }

  gameSolverInitMsgContents = {'smm_buffer_messages': 'no', 'smm_req_type': 'INIT', 'nbColumns': nbColumns, 'nbColors': nbColors, 'nbMaxAttempts': nbMaxAttempts, 'nbMaxPossibleCodesShown': nbMaxPossibleCodesShown, 'first_session_game': first_session_game, 'beginner_mode': (!localStorage.gamesok) || (Number(localStorage.gamesok) < ((typeof min_gamesok_for_firstname !== 'undefined') ? min_gamesok_for_firstname : 5) - 1), 'game_id': game_cnt, 'debug_mode': debug_mode};
  gameSolverConfigDbg = JSON.stringify(gameSolverInitMsgContents);
  game_id_for_gameSolverConfig = game_cnt;
  setTimeout("postInitMessageToGameSolver(" + game_id_for_gameSolverConfig + ");", ((mobileMode && (game_cnt <= 2)) ? 1111 : 1111)); // delay number of possible codes display (better than a "blocking while loop" till time has elapsed)

  if (randomCodesHintToBeDisplayed) {
    setTimeout("displayRandomCodesHintIfNeeded();", 444);
  }
  gameSolverDbg = 8;

  if ((next_code1 != 0) && (next_code2 != 0) && (next_code3 == 0) && (next_scode != 0)) {
    throw new Error("unexpected null next_code3");
    // worst_mark_alert_already_displayed = true; // (avoid multiple alerts)
    // sCode = next_scode;
    // gameInv = next_gameinvid;
    // Impact of attempt inversion on game duration will be taken into at game end
    // setTimeout("playACodeAutomatically(" + next_code1 + ");playACodeAutomatically(" + next_code2 + ");updateAndStoreNbGamesStarted(-1);", 44);
  }
  else if ((next_code1 != 0) && (next_code2 != 0) && (next_code3 != 0) && (next_scode != 0)) {
    worst_mark_alert_already_displayed = true; // (avoid multiple alerts)
    sCode = next_scode;
    gameInv = next_gameinvid;
    // Impact of attempt inversion on game duration will be taken into at game end
    setTimeout("sCodeRevealed=" + next_scoderevealed + ";playACodeAutomatically(" + next_code1 + ");playACodeAutomatically(" + next_code2 + ");playACodeAutomatically(" + next_code3 + ");updateAndStoreNbGamesStarted(-1);", 44);
  }
  else {
    gameInv = 0;
  }
  next_code1 = 0; // (empty code)
  next_code2 = 0; // (empty code)
  next_code3 = 0; // (empty code)
  next_scode = 0; // (empty code)
  next_scoderevealed = 0; // (empty code)
  next_gameinvid = 0;

}

function checkArraySizes() {
  if (backgroundColorTable.length != foregroundColorTable.length) {displayGUIError("array sizes are inconsistent (0)", new Error().stack);}
  if (specialStrTable.length != specialColorTable.length) {displayGUIError("array sizes are inconsistent (1)", new Error().stack);}
  if (codesPlayed.length > nbMaxAttempts) {displayGUIError("array is wider than expected (2)", new Error().stack);}
  if (marks.length > nbMaxAttempts) {displayGUIError("array is wider than expected (3)", new Error().stack);}
  if (nbOfPossibleCodes.length > nbMaxAttempts){displayGUIError("array is wider than expected (4)", new Error().stack);}
  if (colorsFoundCodes.length > nbMaxAttempts){displayGUIError("array is wider than expected (5)", new Error().stack);}
  if (minNbColorsTables.length > nbMaxAttempts){displayGUIError("array is wider than expected (6)", new Error().stack);}
  for (let i = 0; i < nbMaxAttempts; i++) {
    if (minNbColorsTables[i].length > nbColors+1) {displayGUIError("array is wider than expected (7)", new Error().stack);}
  }
  if (maxNbColorsTables.length > nbMaxAttempts){displayGUIError("array is wider than expected (8)", new Error().stack);}
  for (let i = 0; i < nbMaxAttempts; i++) {
    if (maxNbColorsTables[i].length > nbColors+1){displayGUIError("array is wider than expected (9)", new Error().stack);}
  }
  if (obviouslyImpossibleColors.length > nbColors+1){displayGUIError("array is wider than expected (10)", new Error().stack);}
  if (relative_performances_of_codes_played.length > nbMaxAttempts){displayGUIError("array is wider than expected (11)", new Error().stack);}
  if (global_best_performances.length > nbMaxAttempts){displayGUIError("array is wider than expected (12)", new Error().stack);}
  if (relativePerformancesEvaluationDone.length > nbMaxAttempts){displayGUIError("array is wider than expected (13)", new Error().stack);}
  if (classicalUselessCode.length > nbMaxAttempts){displayGUIError("array is wider than expected (14)", new Error().stack);}
  if (performancesDisplayed.length > nbMaxAttempts){displayGUIError("array is wider than expected (15)", new Error().stack);}
  if (possibleCodesLists.length > nbMaxAttempts){displayGUIError("array is wider than expected (16)", new Error().stack);}
  if (globalPerformancesList.length > nbMaxAttempts){displayGUIError("array is wider than expected (17)", new Error().stack);}
  if (possibleCodesListsSizes.length > nbMaxAttempts){displayGUIError("array is wider than expected (18)", new Error().stack);}
  if (possibleCodesListsSubdivisions.length > nbMaxAttempts){displayGUIError("array is wider than expected (19)", new Error().stack);}
  if (equivalentPossibleCodes.length > nbMaxAttempts){displayGUIError("array is wider than expected (20)", new Error().stack);}
  for (let i = 0; i < nbMaxAttempts; i++) {
    if (possibleCodesLists[i].length > nbMaxPossibleCodesShown){displayGUIError("array is wider than expected (21)", new Error().stack);}
    if (globalPerformancesList[i].length > nbMaxPossibleCodesShown){displayGUIError("array is wider than expected (22)", new Error().stack);}
  }
}

gameOnGoing = function() { // (override temporary definition)
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("gameOnGoing skipped");
    return true;
  }
  return ((!gameWon) && (currentAttemptNumber <= nbMaxAttempts));
}

function allPerformancesFilled() {
  return ((!gameOnGoing()) && (currentAttemptNumber-1 == nbOfStatsFilled_Perfs) && (nbOfStatsFilled_Perfs >= 1) && (relative_performances_of_codes_played[nbOfStatsFilled_Perfs-1] != PerformanceNA));
}

function allPossibleCodesFilled() {
  return ( // game on-going and all stats filled
            (gameOnGoing() && (currentAttemptNumber == nbOfStatsFilled_NbPossibleCodes) && (nbOfStatsFilled_NbPossibleCodes >= 1) && (possibleCodesListsSizes[nbOfStatsFilled_NbPossibleCodes-1] > 0))
            ||
            // game over and all stats filled
            ((!gameOnGoing()) && (currentAttemptNumber-1 == nbOfStatsFilled_NbPossibleCodes) && (nbOfStatsFilled_NbPossibleCodes >= 1) && (possibleCodesListsSizes[nbOfStatsFilled_NbPossibleCodes-1] > 0)) );
}

// Check if a code played is possible
function isAttemptPossible(attempt_nb) { // (returns 0 if the attempt_nb th code is possible, returns the first attempt number with which there is a contradiction otherwise)
  if ( (attempt_nb <= 0) || (attempt_nb >= currentAttemptNumber) ) {
    displayGUIError("invalid attempt nb (" + attempt_nb + ")", new Error().stack);
    return 1;
  }
  let mark_tmp = {nbBlacks:0, nbWhites:0};
  for (let i = 1; i <= attempt_nb-1; i++) { // go through all codes previously played
    smmCodeHandler.fillMark(codesPlayed[attempt_nb-1], codesPlayed[i-1], mark_tmp);
    if (!smmCodeHandler.marksEqual(mark_tmp, marks[i-1])) {
      return i;
    }
  }
  return 0;
}

// ****************************
// Statistics related functions
// ****************************

// Number of possible codes
function writeNbOfPossibleCodes(nbOfPossibleCodes_p, colorsFoundCode_p, minNbColorsTable_p, maxNbColorsTable_p, attempt_nb, game_id) {
  if (game_id != game_cnt) { // ignore other threads
    console.log("writeNbOfPossibleCodes() call ignored: " + game_id + ", " + game_cnt);
    return false;
  }
  if ( (nbOfPossibleCodes_p <= 0)
       || (attempt_nb != nbOfStatsFilled_NbPossibleCodes + 1) // stats shall be filled consecutively
       || (attempt_nb <= 0) || (attempt_nb > nbMaxAttempts)
       || (nbOfPossibleCodes[attempt_nb-1] != 0 /* initial value */)
       || (!smmCodeHandler.isValid(colorsFoundCode_p)) ) {
    displayGUIError("invalid stats (" + nbOfPossibleCodes_p + ", " + attempt_nb + ", " + nbOfStatsFilled_NbPossibleCodes + ", " + nbOfPossibleCodes[attempt_nb-1] + ") (1)", new Error().stack);
    return false;
  }
  nbOfPossibleCodes[attempt_nb-1] = nbOfPossibleCodes_p;
  colorsFoundCodes[attempt_nb-1] = colorsFoundCode_p;
  let sum_max = 0;
  for (let color = 1; color <= nbColors; color++) {
    minNbColorsTables[attempt_nb-1][color] = minNbColorsTable_p[color];
    maxNbColorsTables[attempt_nb-1][color] = maxNbColorsTable_p[color];
    sum_max += maxNbColorsTables[attempt_nb-1][color];
  }
  if (sum_max < nbColumns) {
    displayGUIError("invalid stats (sum_max=" + sum_max + ") (2)", new Error().stack);
    return false;
  }
  nbOfStatsFilled_NbPossibleCodes = attempt_nb; // Assumption: the number of possible codes is assumed to be the first stat to be written among all stats

  main_graph_update_needed = true;
  draw_graphic();

  // [Likely] unknown performance at 3rd attempt of Super Master Mind game => invert some attempts
  // Game row inversion could allow to better evaluate performances asymmetrically
  // (Future improvement could make precalculations [more] symmetrical: not done to simplify)
  if ( (nbColumns == 5) && (attempt_nb == 4) && (currentAttemptNumber == 4) && gameOnGoing() && (nbOfPossibleCodes[2] >= 700) ) {
    let mark_tmp1 = {nbBlacks:0, nbWhites:0};
    let mark_tmp2a = {nbBlacks:0, nbWhites:0};
    let mark_tmp2b = {nbBlacks:0, nbWhites:0};
    smmCodeHandler.fillMark(codesPlayed[0], codesPlayed[1], mark_tmp1);
    smmCodeHandler.fillMark(codesPlayed[0], codesPlayed[2], mark_tmp2a);
    smmCodeHandler.fillMark(codesPlayed[1], codesPlayed[2], mark_tmp2b);
    if ( (!smmCodeHandler.marksEqual(mark_tmp2a, marks[0]) || !smmCodeHandler.marksEqual(mark_tmp2b, marks[1])) // Impossible 3rd code (possible codes are fully assessed)
         && !((mark_tmp1.nbBlacks == 4) && (mark_tmp2a.nbBlacks == 4) && (mark_tmp2b.nbBlacks == 4)) ) { // (such codes are fully assessed))
      if ( (smmCodeHandler.nbDifferentColors(codesPlayed[0]) > 2)
           && (smmCodeHandler.nbDifferentColors(codesPlayed[1]) <= 2)
           && (smmCodeHandler.nbDifferentColors(codesPlayed[2]) == 2) ) { // code at 3rd attempt has 2 colors (11111-like codes are fully assessed)
        if ( !((marks[1].nbBlacks == 0) && (marks[1].nbWhites == 0))
             || ((mark_tmp1.nbBlacks == 0) && (mark_tmp1.nbWhites == 0)) ) { // worst mark condition avoiding obviously impossible color replay
            console.log("invert game rows #1");
            next_code1 = codesPlayed[1];
            next_code2 = codesPlayed[0];
            next_code3 = codesPlayed[2];
            next_scode = sCode;
            next_scoderevealed = sCodeRevealed;
            next_gameinvid = 10;
            if (gameInv != 0) { // defense against loops
              displayGUIError("unexpected gameInv loop (1): " + gameInv, new Error().stack);
            }
            else {
              setTimeout("if (currentAttemptNumber == 4) {newGameButtonClick_delayed(false);}", 14);
            }
        }
        else if ( !((marks[2].nbBlacks == 0) && (marks[2].nbWhites == 0))
                  || ((mark_tmp2a.nbBlacks == 0) && (mark_tmp2a.nbWhites == 0) && (mark_tmp2b.nbBlacks == 0) && (mark_tmp2b.nbWhites == 0)) ) { // worst mark condition avoiding obviously impossible color replay
            console.log("invert game rows #2");
            next_code1 = codesPlayed[2];
            next_code2 = codesPlayed[0];
            next_code3 = codesPlayed[1];
            next_scode = sCode;
            next_scoderevealed = sCodeRevealed;
            next_gameinvid = 20;
            if (gameInv != 0) { // defense against loops
              displayGUIError("unexpected gameInv loop (2): " + gameInv, new Error().stack);
            }
            else {
              setTimeout("if (currentAttemptNumber == 4) {newGameButtonClick_delayed(false);}", 14);
            }
        }
      }
      else if ( (smmCodeHandler.nbDifferentColors(codesPlayed[0]) > 2)
                && (smmCodeHandler.nbDifferentColors(codesPlayed[1]) == 1)
                && (smmCodeHandler.nbDifferentColors(codesPlayed[2]) > 2) ) {
        if ( !((marks[2].nbBlacks == 0) && (marks[2].nbWhites == 0))
             || ((mark_tmp2b.nbBlacks == 0) && (mark_tmp2b.nbWhites == 0)) ) { // worst mark condition avoiding obviously impossible color replay
              console.log("invert game rows #3");
              next_code1 = codesPlayed[0];
              next_code2 = codesPlayed[2];
              next_code3 = codesPlayed[1];
              next_scode = sCode;
              next_scoderevealed = sCodeRevealed;
              next_gameinvid = 30;
              if (gameInv != 0) { // defense against loops
                displayGUIError("unexpected gameInv loop (3): " + gameInv, new Error().stack);
              }
              else {
                setTimeout("if (currentAttemptNumber == 4) {newGameButtonClick_delayed(false);}", 14);
              }
        }
      }
      else if ( (gameInv == 0)
                && ( ((smmCodeHandler.nbDifferentColors(codesPlayed[0]) >= 2)
                     && (smmCodeHandler.nbDifferentColors(codesPlayed[1]) > 2)
                     && (smmCodeHandler.nbDifferentColors(codesPlayed[2]) > 2))
                     ||
                     ((smmCodeHandler.nbDifferentColors(codesPlayed[0]) > 2)
                     && (smmCodeHandler.nbDifferentColors(codesPlayed[1]) >= 2)
                     && (smmCodeHandler.nbDifferentColors(codesPlayed[2]) > 2))
                     ||
                     ((smmCodeHandler.nbDifferentColors(codesPlayed[0]) > 2)
                     && (smmCodeHandler.nbDifferentColors(codesPlayed[1]) > 2)
                     && (smmCodeHandler.nbDifferentColors(codesPlayed[2]) >= 2)) )
                // classical simplistic ways of playing (involving the case where the same 5 colors are replayed in a different order): attempt inversion is acceptable/understandable
                && smmCodeHandler.sameColorsReused(codesPlayed[0], codesPlayed[1]) // (obviously strongly correlated codes + simplistic way of playing when codes are played in this order)
                && (nbOfPossibleCodes[2] > 2600) // inefficient way of playing + code nearly never assessed
                && ( ((mark_tmp1.nbBlacks + mark_tmp1.nbWhites == 5) && (mark_tmp2a.nbBlacks + mark_tmp2a.nbWhites == 5) && (3*marks[2].nbBlacks + marks[2].nbWhites >= 3*marks[1].nbBlacks + marks[1].nbWhites + 3))
                     || ((mark_tmp1.nbBlacks + mark_tmp1.nbWhites == 5) && !smmCodeHandler.sameColorsReused(codesPlayed[0], codesPlayed[2]))
                     || ((mark_tmp1.nbBlacks + mark_tmp1.nbWhites <= 4) && !smmCodeHandler.sameColorsReused(codesPlayed[0], codesPlayed[2])
                         && (marks[1].nbBlacks == 0) && (marks[1].nbWhites <= 2) && ((smmCodeHandler.nbDifferentColors(codesPlayed[1]) == 2) ||(marks[1].nbWhites > 0)) && (3*marks[2].nbBlacks + marks[2].nbWhites >= 3*marks[1].nbBlacks + marks[1].nbWhites + 2))
                   )
              ) {
        if ( !((marks[2].nbBlacks == 0) && (marks[2].nbWhites == 0))
             || ((mark_tmp2b.nbBlacks == 0) && (mark_tmp2b.nbWhites == 0)) ) { // worst mark condition avoiding obviously impossible color replay
              console.log("invert game rows #4");
              next_code1 = codesPlayed[0];
              next_code2 = codesPlayed[2];
              next_code3 = codesPlayed[1];
              next_scode = sCode;
              next_scoderevealed = sCodeRevealed;
              next_gameinvid = 40;
              if (gameInv != 0) { // defense against loops
                displayGUIError("unexpected gameInv loop (4): " + gameInv, new Error().stack);
              }
              else {
                setTimeout("if (currentAttemptNumber == 4) {newGameButtonClick_delayed(false);}", 14);
              }
        }
      }
    } // Impossible 3rd code & co
  }
  return true;
}

// Code performances
function writePerformanceOfCodePlayed(relative_perf_p, relative_perf_evaluation_done_p, classical_useless_code_p, best_global_performance_p, code_p, attempt_nb, game_id) {
  if (game_id != game_cnt) { // ignore other threads
    console.log("writePerformanceOfCodePlayed() call ignored: " + game_id + ", " + game_cnt);
    return false;
  }
  if ( ((relative_perf_p <= PerformanceMinValidValue) && (relative_perf_p != PerformanceUNKNOWN)) || (relative_perf_p >= PerformanceMaxValidValue) /* possible range of relative performances */
       || (relative_perf_p == PerformanceNA)
       || (relative_perf_evaluation_done_p && (relative_perf_p == PerformanceUNKNOWN))
       || (((relative_perf_p <= -1.00) && (relative_perf_p != PerformanceUNKNOWN)) /* useless code */ && (!relative_perf_evaluation_done_p))
       || (classical_useless_code_p && (relative_perf_p != -1.00))
       || ((best_global_performance_p <= 0.01) && (best_global_performance_p != PerformanceUNKNOWN))
       || (best_global_performance_p == PerformanceNA)
       || (code_p != codesPlayed[attempt_nb-1])
       || (attempt_nb != nbOfStatsFilled_Perfs + 1) // perfs shall be filled consecutively
       || (attempt_nb > nbOfStatsFilled_NbPossibleCodes) // performances shall be filled after numbers of possible codes
       || (attempt_nb <= 0) || (attempt_nb > nbMaxAttempts)
       || (relative_performances_of_codes_played[attempt_nb-1] != PerformanceNA /* initial value */)
       || (global_best_performances[attempt_nb-1] != PerformanceNA /* initial value */)
       || (relativePerformancesEvaluationDone[attempt_nb-1] /* initial value */)
       || (classicalUselessCode[attempt_nb-1] /* initial value */) ) {
    displayGUIError("invalid perfs (" + attempt_nb + ", " + nbOfStatsFilled_Perfs + ", " + nbOfStatsFilled_NbPossibleCodes + ", " + relative_perf_p + ", " + best_global_performance_p + ", " + relative_perf_evaluation_done_p + ", " + classical_useless_code_p + ", " + code_p + ", " + attempt_nb + ")", new Error().stack);
    return false;
  }
  relative_performances_of_codes_played[attempt_nb-1] = relative_perf_p; // may be known or unknown
  global_best_performances[attempt_nb-1] = best_global_performance_p; // may be PerformanceUNKNOWN

  if (relative_perf_p == PerformanceUNKNOWN) {
    nbUnknownPerfs++;
  }
  else {
    sumPerfs = sumPerfs + relative_perf_p;
  }
  if ((relative_perf_p <= -1.00) && (relative_perf_p != PerformanceUNKNOWN)) { // useless code
    at_least_one_useless_code_played = true;
  }
  relativePerformancesEvaluationDone[attempt_nb-1] = relative_perf_evaluation_done_p;
  classicalUselessCode[attempt_nb-1] = classical_useless_code_p;
  nbOfStatsFilled_Perfs = attempt_nb;

  main_graph_update_needed = true;
  draw_graphic();

  // ***************************************
  // Store player's info distantly if needed
  // ***************************************

  if (gameWon && allPerformancesFilled()) {
    if ((timeStr.length == 0) || (score < 0.0)) {
      displayGUIError("internal error at store_player_info call: " + timeStr.length + ", " + score, new Error().stack);
    }
    else { // (score > 0.0 because game won)
      let nbColorsRevealed = nbColumns - smmCodeHandler.nbEmptyColors(sCodeRevealed);

      let strGame = "";
      for (let i = 1; i < currentAttemptNumber; i++) {
        strGame = strGame + smmCodeHandler.markToString(marks[i-1]) + smmCodeHandler.codeToString(codesPlayed[i-1]).replace("[",",").replace("]",",") + nbOfPossibleCodes[i-1]
                          + "," + (Math.round(relative_performances_of_codes_played[i-1] * 100.0) / 100.0).toFixed(2) /* 0.01 precision */ + (i < currentAttemptNumber-1 ? "|" : "");
      }
      // strGame = strGame + "SCODE " + smmCodeHandler.codeToString(smmCodeHandler.convert(sCode));
      strGame = strGame.trim();

      store_player_info(game_cnt, nbColumns, score, currentAttemptNumber-1, timeStr, (Math.round(sumPerfs * 100.0) / 100.0).toFixed(2) /* 0.01 precision */, nbUnknownPerfs, (nbColorsRevealed > 0), (((nbColorsRevealed > 0) || (nb_random_codes_played == 0)) ? nbColorsRevealed + 'x' : Math.min(nb_random_codes_played,9) + 'ra'), strGame, wasGameShort);
    }
  }

  return true;
}

// List of possible codes
function writePossibleCodes(possibleCodesList_p, nb_possible_codes_listed, possible_codes_subdivision, equivalent_possible_code, globalPerformancesList_p, attempt_nb, game_id) {
  if (game_id != game_cnt) { // ignore other threads
    console.log("writePossibleCodes() call ignored: " + game_id + ", " + game_cnt);
    return false;
  }
  if ( (nb_possible_codes_listed <= 0) || (possibleCodesList_p.length < nb_possible_codes_listed) || (globalPerformancesList_p.length < nb_possible_codes_listed)
        || (attempt_nb != nbOfStatsFilled_ListsOfPossibleCodes + 1) // lists of possible codes shall be filled consecutively
        || (attempt_nb > nbOfStatsFilled_NbPossibleCodes) // lists of possible codes shall be filled after numbers of possible codes
        || (attempt_nb <= 0) || (attempt_nb > nbMaxAttempts)
        || (possibleCodesListsSizes[attempt_nb-1] != 0 /* initial value */)
        || (possibleCodesListsSubdivisions[attempt_nb-1] != -1 /* initial value */)
        || (equivalentPossibleCodes[attempt_nb-1] != 0 /* initial value */)
        || (nb_possible_codes_listed > nbOfPossibleCodes[attempt_nb-1])
        || ((nbOfPossibleCodes[attempt_nb-1] <= nbMaxPossibleCodesShown) && (nb_possible_codes_listed != nbOfPossibleCodes[attempt_nb-1])) // (cf. above assumption on stats writing)
        || ((nbOfPossibleCodes[attempt_nb-1] > nbMaxPossibleCodesShown) && (nb_possible_codes_listed != nbMaxPossibleCodesShown)) ) { // (cf. above assumption on stats writing)
    displayGUIError("invalid stats (" + attempt_nb + ", " + nbOfStatsFilled_NbPossibleCodes + ", " + nbOfPossibleCodes[attempt_nb-1] + ", " + nb_possible_codes_listed + ") (3)", new Error().stack);
    return false;
  }
  for (let i = 0; i < nb_possible_codes_listed; i++) {
    let code = possibleCodesList_p[i];
    let global_perf = globalPerformancesList_p[i];
    if (!smmCodeHandler.isFullAndValid(code)) {
      displayGUIError("invalid stats (" + attempt_nb + ", " + nbOfStatsFilled_NbPossibleCodes + ", " + i + ", " + code + ") (4)", new Error().stack);
      return false;
    }
   if ( ((global_perf <= 0.01) && (global_perf != PerformanceUNKNOWN))
        || (global_perf == PerformanceNA) ) {
      displayGUIError("invalid stats (unknown code performance(s) after evaluation) (5)", new Error().stack);
      return false;
    }
    possibleCodesLists[attempt_nb-1][i] = code;
    globalPerformancesList[attempt_nb-1][i] = global_perf; // may be PerformanceUNKNOWN
  }
  possibleCodesListsSizes[attempt_nb-1] = nb_possible_codes_listed;
  possibleCodesListsSubdivisions[attempt_nb-1] = possible_codes_subdivision;
  equivalentPossibleCodes[attempt_nb-1] = equivalent_possible_code;
  nbOfStatsFilled_ListsOfPossibleCodes = attempt_nb;

  main_graph_update_needed = true;
  draw_graphic();
  return true;
}

// *****************************************
// Complete precalculated games "on the fly"
// *****************************************

function new2DArray(x, y) {
  var my_array = new Array(x);
  for (let i = 0; i < x; i++) {
    my_array[i] = new Array(y);
  }
  return my_array;
}

let table_tmp = new2DArray(2, 9); // (9 is the highest number standing on one char)
let are_there_5_identical_colors = new Array(2);
let are_there_4_identical_colors = new Array(2);
let is_there_triple = new Array(2);
let nb_doubles = new Array(2);
let one_double_color = new Array(2);
let output_str = new Array(2);
function determine_smm_jscriptname(code_str_1, mark_str_1, code_str_2, mark_str_2, code_1, code_2) {

  // ***** CODE DUPLICATED IN extractPrecalculatedPerfs.java ******

  // Handle each couple (code, mark)
  // *******************************

  for (let code_idx = 0; code_idx < 2; code_idx++) {

    let code_str;
    let mark_str;
    switch (code_idx) {
      case 0:
        code_str = code_str_1;
        mark_str = mark_str_1;
        break;
      case 1:
        code_str = code_str_2;
        mark_str = mark_str_2;
        break;
      default:
        throw new Error("determine_smm_jscriptname: internal error (code_idx)");
    }

    if (code_str.length != 5) {
      throw new Error("determine_smm_jscriptname: invalid code_str: " + code_str);
    }
    if ((mark_str.length != 4) || (mark_str.indexOf("B") == -1) || (mark_str.indexOf("W") == -1)) {
      throw new Error("determine_smm_jscriptname: invalid mark_str: " + mark_str);
    }

    for (let color = 0; color < table_tmp[code_idx].length; color++) {
      table_tmp[code_idx][color] = 0;
    }
    for (let column = 0; column < 5; column++) {
      let color = code_str.charAt(column); // - 48;
      if ((color < 1) || (color >= 9)) {
        throw new Error("determine_smm_jscriptname: internal error (out of range color: " + color + ")");
      }
      table_tmp[code_idx][color]++;
    }

    are_there_5_identical_colors[code_idx] = false;
    are_there_4_identical_colors[code_idx] = false;
    is_there_triple[code_idx] = false;
    nb_doubles[code_idx] = 0;
    one_double_color[code_idx] = 0;

    for (let color = 0; color < table_tmp[code_idx].length; color++) {
      if (table_tmp[code_idx][color] == 5) {
        are_there_5_identical_colors[code_idx] = true;
        break;
      }
      else if (table_tmp[code_idx][color] == 4) {
        are_there_4_identical_colors[code_idx] = true;
        break;
      }
      else if (table_tmp[code_idx][color] == 3) {
        is_there_triple[code_idx] = true;
      }
      else if (table_tmp[code_idx][color] == 2) {
        nb_doubles[code_idx]++;
        one_double_color[code_idx] = color;
      }
    }

    output_str[code_idx] = "";
    if (are_there_5_identical_colors[code_idx]) {
      output_str[code_idx] = "5";
    }
    else if (are_there_4_identical_colors[code_idx]) {
      output_str[code_idx] = "4+1";
    }
    else if (is_there_triple[code_idx]) {
      if (nb_doubles[code_idx] == 0) {
        output_str[code_idx] = "3+1+1";
      }
      else if (nb_doubles[code_idx] == 1) {
        output_str[code_idx] = "3+2";
      }
      else {
        throw new Error("determine_smm_jscriptname: internal error: triple with several doubles");
      }
    }
    else {
      if (nb_doubles[code_idx] == 0) {
        output_str[code_idx] = "1+1+1+1+1";
      }
      else if (nb_doubles[code_idx] == 1) {
        output_str[code_idx] = "2+1+1+1";
      }
      else if (nb_doubles[code_idx] == 2) {
        output_str[code_idx] = "2+2+1";
      }
      else {
        throw new Error("determine_smm_jscriptname: internal error: invalid number of doubles");
      }
    }
    output_str[code_idx] = output_str[code_idx] + "_" + mark_str;

  } // end for code_idx

  // Determine output filename
  // *************************

  let suffix = "_" + smmCodeHandler.getSMMGameIdAfter2Attempts(code_1, code_2);

  // Return filename
  // ***************

  return output_str[0] + "_" + output_str[1] + suffix + ".js";

}

function get_and_check_extra_precalculated_str() {
  let res = "";
  if ( (extra_precalculated_str == undefined)
       || (extra_precalculated_str == null)
       || (extra_precalculated_str == "") ) {
    console.log("(empty extra_precalculated_str)");
    res = "";
  }
  else {
    if (!extra_precalculated_str.endsWith(".")) { // invalid extra_precalculated_str string
      console.log("(invalid extra_precalculated_str)");
      res = "";
    }
    else {
      console.log("(valid extra_precalculated_str)");
      res = extra_precalculated_str;
    }
  }
  extra_precalculated_str = ""; // (do not send it twice)
  return res;
}

function completePrecalculatedGamesOnTheFly(code_str_1, mark_str_1, code_str_2, mark_str_2, code_1, code_2) {

  let ontheflytimeout = 30000;
  if (gamesolver_buffered_msg_status == 0) {
    gamesolver_buffered_msg_status = 1;
    // Defensive behaviour (should never be entered): always trigger debuffering after a certain time to avoid any game blockage
    gamesolver_buffered_msg_action_str = "if ((game_cnt == " + game_cnt + ") && (gamesolver_buffered_msg_status != 2)) {try{ let precalculated_games = get_and_check_extra_precalculated_str(); if (gameSolver !== undefined) {gameSolver.postMessage({'smm_buffer_messages': 'no', 'smm_req_type': 'DEBUFFER', 'precalculated_games': precalculated_games, 'game_id': " + game_cnt + "});}} catch(err){} gamesolver_buffered_msg_status = 2;}";
    setTimeout(gamesolver_buffered_msg_action_str, Math.floor(ontheflytimeout*1.1));
  }

  let precalculated_games_jsscriptname = determine_smm_jscriptname(code_str_1, mark_str_1, code_str_2, mark_str_2, code_1, code_2);
  console.log("(fetch precalculated games in " + precalculated_games_jsscriptname + ")");
  debug_game_state = 69.1;
  jQuery.ajax({
    crossDomain: true,
    url: "precalculated_games/" + precalculated_games_jsscriptname, // => if this .js script exists, extra_precalculated_str will be updated by it
    method: "GET",
    dataType: "jsonp",
    timeout: ontheflytimeout
  })
  .done(function(location) { // seems never entered
    debug_game_state = 69.15;
    // Trigger debuffering immediately
    setTimeout(gamesolver_buffered_msg_action_str, 44); // (as shifted in time, may be run in a next game with a different game_id, which will have no effect as game_id is checked)
  })
  .fail(function(jqxhr, textStatus, error) { // (jqxhr: XMLHTTPRequest)
    debug_game_state = 69.2;
    if (typeof precalculatedFileFetched !== 'undefined') {precalculatedFileFetched = jqxhr.status;}
    // Trigger debuffering immediately
    setTimeout(gamesolver_buffered_msg_action_str, 44); // (as shifted in time, may be run in a next game with a different game_id, which will have no effect as game_id is checked)
    if (jqxhr.status != 200) { // Note: covers the 404 status which corresponds to the error "Loading failed for the <script> with source https://..."
      debug_game_state = 69.3;
      console.log(("precalculated games fetch failure: " + textStatus + " " + error + " " + str_from_jqxhr(jqxhr)).trim());
    }
    else { // else: systematic parse error (with 200 status) is ignored
      debug_game_state = 69.4;
    }
  });

}

// ****************
// Storage function
// ****************

function updateAndStoreNbGamesStarted(offset) {
  try {
    switch (nbColumns) {
      case 3:
        if (localStorage.nbgamesstarted3) {
          localStorage.nbgamesstarted3 = Number(localStorage.nbgamesstarted3) + offset;
        }
        break;
      case 4:
        if (localStorage.nbgamesstarted4) {
          localStorage.nbgamesstarted4 = Number(localStorage.nbgamesstarted4) + offset;
        }
        break;
      case 5:
        if (localStorage.nbgamesstarted5) {
          localStorage.nbgamesstarted5 = Number(localStorage.nbgamesstarted5) + offset;
        }
        break;
      case 6:
        if (localStorage.nbgamesstarted6) {
          localStorage.nbgamesstarted6 = Number(localStorage.nbgamesstarted6) + offset;
        }
        break;
      case 7:
        if (localStorage.nbgamesstarted7) {
          localStorage.nbgamesstarted7 = Number(localStorage.nbgamesstarted7) + offset;
        }
        break;
      default:
        throw new Error("updateAndStoreNbGamesStarted(): invalid number of columns: " + nbColumns);
    }
  }
  catch (err) {
    displayGUIError("error while storing nbgamesstarted: " + err, new Error().stack);
  }
}

// **************************************
// Translate coordinates from/into pixels
// **************************************

function updateAttributesWidthAndHeightValues(width, height) {
  main_graph_update_needed = true;

  current_width = Math.max(width, 1);
  current_height = Math.max(height, 1);
  width_shift = (current_width * left_border_margin_x) / 100.0;
  reduced_width = (current_width * (100.0 - left_border_margin_x - right_border_margin_x)) / 100.0;
  height_shift = (current_height * top_border_margin_y) / 100.0;
  x_axis_height = 0; // Fixed x axis height
  reduced_height = (current_height * (100.0 - top_border_margin_y - bottom_border_margin_y)) / 100.0 - x_axis_height;
}

function get_x_pixel(x) {
  if ( (x < x_min - 0.0000001) || (x > x_max + 0.0000001) ) {
    displayGUIError("out of range x value: " + x, new Error().stack);
    if (x < x_min) x = x_min;
    if (x > x_max) x = x_max;
  }
  let res = Math.round(width_shift + ((x - x_min) * reduced_width) / (x_max - x_min));
  if ( (res < 0) || (res > current_width - 1) ) {
    if (res < 0) return 0;
    if (res > current_width - 1) return current_width - 1;
  }
  return res;
}

// function get_x_coordinate(x_pixel) {
  // let res;
  // if ( (x_pixel < 0) || (x_pixel > current_width - 1) ) {
    // displayGUIError("out of range x pixel value: " + x_pixel, new Error().stack);
    // if (x_pixel < 0) x_pixel = 0;
    // if (x_pixel > current_width - 1) x_pixel = current_width - 1;
  // }
  // x_pixel_bis = x_pixel;
  // if (x_pixel < width_shift) x_pixel_bis = width_shift;
  // res = x_min + (((x_pixel_bis - width_shift) * (x_max - x_min)) / reduced_width);
  // if (res < x_min) res = x_min;
  // if (res > x_max) res = x_max;
  // return res;
// }

function get_y_pixel(y, ignoreRanges = false) {
  if ( (!ignoreRanges) && ((y < y_min - 0.0000001) || (y > y_max + 0.0000001)) ) {
    displayGUIError("out of range y value: " + y + ", " + y_min + ", " + y_max + ", " + y_step + ", " + showPossibleCodesMode, new Error().stack);
    if (y < y_min) y = y_min;
    if (y > y_max) y = y_max;
  }
  let res = Math.floor(height_shift + reduced_height - ((y - (y_min + 1.0)) * reduced_height) / (y_max - (y_min + 1.0))); // Math.round leads to centering issues
  if ( (res < 0) || (res > current_height - 1) ) {
    if (res < 0) return 0;
    if (res > current_height - 1) return current_height - 1;
  }
  return res;
}

// function get_y_coordinate(y_pixel) {
  // let res;
  // if ( (y_pixel < 0) || (y_pixel > current_height - 1) ) {
    // displayGUIError("out of range y pixel value: " + y_pixel, new Error().stack);
    // if (y_pixel < 0) y_pixel = 0;
    // if (y_pixel > current_height - 1) y_pixel = current_height - 1;
  // }
  // if (y_pixel > height_shift + reduced_height + x_axis_height) {
    // res = y_min;
  // }
  // else if (y_pixel < height_shift) {
    // res = y_max;
  // }
  // /* else if ( (y_pixel > height_shift + reduced_height) && (y_pixel <= height_shift + reduced_height + x_axis_height) ) { // x axis height
    // res = y_min + (height_shift + reduced_height + x_axis_height - y_pixel) / x_axis_height;
  // } */
  // else {
    // res = (y_min + 1.0) + ((height_shift + reduced_height - y_pixel) * (y_max - (y_min + 1.0))) / reduced_height;
  // }
  // if (res < y_min) res = y_min;
  // if (res > y_max) res = y_max;
  // return res;
// }

// ************
// Draw graphic
// ************

// Draw horizontal or vertical lines
function drawLine(ctx, x_0, y_0, x_1, y_1) {
  let linewidth = getGridLineWidth(window.innerHeight);
  if (x_0 == x_1) {
    ctx.fillRect(x_0,y_0,linewidth,y_1-y_0);
  }
  else {
    ctx.fillRect(x_0,y_0,x_1-x_0,linewidth);
  }
}

/* More general functions to draw lines, but non-integer linewidth is not supported by Chrome) */
function drawLineWithPath(ctx, x_0, y_0, x_1, y_1) {
  let lineWidthIni = ctx.lineWidth;
  ctx.lineWidth = getGridLineWidth(window.innerHeight);
  ctx.beginPath();
  ctx.moveTo(x_0+0.5,y_0+0.5);
  ctx.lineTo(x_1+0.5,y_1+0.5);
  ctx.stroke();
  ctx.lineWidth = lineWidthIni;
}

function drawRoundedRect(ctx, x, y, width, height, radius, fill, stroke) {
  if (typeof stroke === 'undefined') {
    stroke = true;
  }
  if (typeof radius === 'undefined') {
    radius = 5;
  }
  if (typeof radius === 'number') {
    radius = {tl: radius, tr: radius, br: radius, bl: radius};
  }
  else {
    var defaultRadius = {tl: 0, tr: 0, br: 0, bl: 0};
    for (var side in defaultRadius) {
      radius[side] = radius[side] || defaultRadius[side];
    }
  }
  ctx.beginPath();
  ctx.moveTo(x + radius.tl, y);
  ctx.lineTo(x + width - radius.tr, y);
  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
  ctx.lineTo(x + width, y + height - radius.br);
  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
  ctx.lineTo(x + radius.bl, y + height);
  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
  ctx.lineTo(x, y + radius.tl);
  ctx.quadraticCurveTo(x, y, x + radius.tl, y);
  ctx.closePath();
  if (fill) {
    ctx.fill();
  }
  if (stroke) {
    ctx.stroke();
  }
}

function draw_graphic() {
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("draw_graphic skipped");
    return;
  }
  let gameOnGoingIni = gameOnGoing();
  let currentAttemptNumberIni = currentAttemptNumber;
  draw_graphic_bis();
  if ( (gameOnGoingIni != gameOnGoing()) || (currentAttemptNumber != currentAttemptNumberIni) ) {
   updateGameSizes();
   draw_graphic_bis();
  }
}

var main_ctx = null;
function draw_graphic_bis() {
  if ((gamesolver_blob == null) || !scriptsFullyLoaded) {
    console.log("draw_graphic_bis skipped");
    return;
  }
  var main_ctx_was_null = false;
  if (main_ctx == null) {
    main_ctx = canvas.getContext("2d", { willReadFrequently: true });
    main_ctx_was_null = true;
  }
  let ctx = main_ctx;

  let res;
  let draw_exception = false;

  let last_but_one_attempt_event = false;

  try {

    ctx.imageSmoothingEnabled = true;
    ctx.globalAlpha = 1;
    ctx.setTransform(1,0,0,1,0,0); // resets the canvas current transform to the identity matrix

    let nbColumnsSelected = getNbColumnsSelected();
    if ( (nbColumnsSelected < 0) || (nbColumnsSelected > nbMaxColumns) ) { // (error case)
      displayGUIError("inconsistent number of columns selected: " + nbColumnsSelected, new Error().stack);
      nbColumnsSelected = defaultNbColumns;
    }

    let lineWidth = getLineWidth(window.innerHeight, 1);
    refLineWidth = getLineWidth(window.innerHeight, 1);
    if ( main_ctx_was_null // first drawing
         || (Math.abs(current_innerWidth - window.innerWidth) > 1) || (Math.abs(current_innerHeight - window.innerHeight) > 1) ) { // resize detected with +/-1 pixel tolerance margin
      var newCompressedDisplayMode;
      if (window.innerHeight >= window.innerWidth * 0.77) {
          newCompressedDisplayMode = true;
      }
      else {
          newCompressedDisplayMode = false;
      }

      if (window.innerWidth <= 1000) {
          newCompressedDisplayMode = true;
      }

      if (mobileMode) {
        newCompressedDisplayMode = true;
      }

      var CompressedDisplayModeHasChanged = false;
      if (newCompressedDisplayMode != CompressedDisplayMode) {
        CompressedDisplayMode = newCompressedDisplayMode;
        CompressedDisplayModeHasChanged = true;
        updateGameSizes();
      }

      let borderWidth1 = (CompressedDisplayMode ? 0 : lineWidth);
      let borderStr1 = borderWidth1 + (modernDisplay ? "px solid " + modernBaseColor : "px solid black");
      let borderStr2 = lineWidth + (modernDisplay ? "px solid " + modernBaseColor: "px solid black");

      if (mobileMode && androidMode) {  // It is not possible to change the \u2714 and \u2716 character color on Android/Chrome
        tickChar = "\u2713"; /* (check mark/tick) */
        crossChar = "\u2715"; /* (cross) */
      }
      else {
        tickChar = "\u2714"; /* (check mark/tick) */
        crossChar = "\u2716"; /* (cross) */
      }

      if (!htmlObjectsAlreadySet || CompressedDisplayModeHasChanged) {

          for (let i = 0; i < allRadioButtons.length; i++) {
            allRadioButtons[i].textContent = nbMinColumns + i;
          }

          if (CompressedDisplayMode) {
            resetCurrentCodeButtonObject.value = "\u2718";
            playRandomCodeButtonObject.value = "\uD83C\uDFB2";
            revealSecretColorButtonObject.value = "?";
            showPossibleCodesButtonObject.value = showPossibleCodesButtonCompressedName;
            myTableObject.style.width = "100%";
            myTableObject.style.height = "100%";
            myTableObject.style.left = "0";
            myTableObject.style.top = "0";
            if (android_appli) { // (no transition)
              myTableObject.style.minWidth = "100%";
              myTableObject.style.minHeight = "100%";
            }

            try { // (try/catch because optional pictures)
              img1Object.style.display = 'none';
              img2Object.style.display = 'none';
            }
            catch (err) {}

            buttonsTdObject.style.padding = "0 0 0.3vh 0"; /* top right bottom left */

            left_border_margin_x = 0.00;   // Left border margin for x axis in %
            right_border_margin_x = 0.00;  // Right border margin for x axis in %
            bottom_border_margin_y = 1.30 // Bottom border margin for y axis in % (value set like this to simplify)
            top_border_margin_y = 0.00;    // Top border margin for y axis in %
          }
          else {
            resetCurrentCodeButtonObject.value = resetCurrentCodeButtonIniName;
            playRandomCodeButtonObject.value = playRandomCodeButtonIniName;
            revealSecretColorButtonObject.value = revealSecretColorButtonIniName;
            showPossibleCodesButtonObject.value = showPossibleCodesButtonIniName;
            myTableObject.style.width = "75%";
            myTableObject.style.height = "90%";
            myTableObject.style.left = "12.5%"; // (100% - 75%) / 2
            myTableObject.style.top = "2%";

            try { // (try/catch because optional pictures)
              img1Object.style.display = 'inline';
              img2Object.style.display = 'inline';
            }
            catch (err) {}

            buttonsTdObject.style.padding = "2.0vh 0 2.0vh 0"; /* top right bottom left */

            left_border_margin_x = 5.0;   // Left border margin for x axis in %
            right_border_margin_x = 5.0;  // Right border margin for x axis in %
            bottom_border_margin_y = 2.5; // Bottom border margin for y axis in %
            top_border_margin_y = 2.5;    // Top border margin for y axis in %
          }
          htmlObjectsAlreadySet = true;

      }

      canvas_cell.style.border = borderStr1;
      for (let i = 0; i < allButtons.length; i++) {
        allButtons[i].style.border = borderStr2;
      }
      for (let i = 0; i < allButtons.length; i++) {
        allButtons[i].style.fontSize = (CompressedDisplayMode ? "3.2vh" : "2.7vh"); // proportional to viewport height
      }
      for (let i = 0; i < allRadioButtons.length; i++) {
        allRadioButtons[i].style.fontSize = (CompressedDisplayMode ? "3.8vh" : "3.5vh"); // proportional to viewport height
      }

      current_innerWidth = window.innerWidth;
      current_innerHeight = window.innerHeight;
      refLineWidth = getLineWidth(window.innerHeight, 1);

      // Set canvas size
      let width = canvas_cell.clientWidth - Math.ceil(borderWidth1);
      let height = canvas_cell.clientHeight - Math.ceil(borderWidth1);
      updateAttributesWidthAndHeightValues(width, height);
      canvas.width = width;
      canvas.height = height;
    } // resize detected

    for (let i = 0; i < allRadioButtons.length; i++) {
      if (nbColumnsSelected == nbMinColumns+i) {
        let radioColor;
        switch (i) {
          case 0:
            radioColor = blueColor;
            break;
          case 1:
            radioColor = greenColor;
            break;
          case 2:
            radioColor = "orange";
            break;
          case 3:
            radioColor = purpleColor;
            break;
          case 4:
            radioColor = cyanColor;
            break;
          default:
            radioColor = "orange";
        }
        let borderStr3 = lineWidth + "px solid " + radioColor;
        allRadioButtons[i].style.color = radioColor;
        allRadioButtons[i].style.border = borderStr3;
        // previous version for not compressed mode:
        // allRadioButtons[i].style.color = (modernDisplay ? modernBaseColor : "orange");
        // allRadioButtons[i].style.border = 'none';
      }
      else {
        allRadioButtons[i].style.color = "black";
        allRadioButtons[i].style.border = 'none';
      }
    }

    // Set adaptative widths => possible improvement: use mathematical formulas
    if (window.innerWidth < 0.57*window.innerHeight) {
      generalTableWidthStr = "100%";
      rulesTableWidthStr = "100%";
      scoresTableWidthStr = "100%";
      scoresFontSizeStr = "1.4vh";
      abbreviateScores = true;
    }
    else if (window.innerWidth < 0.70*window.innerHeight) {
      generalTableWidthStr = "100%";
      rulesTableWidthStr = "85%";
      scoresTableWidthStr = "100%";
      scoresFontSizeStr = "1.4vh";
      abbreviateScores = true;
    }
    else if (window.innerWidth < 0.82*window.innerHeight) {
      generalTableWidthStr = "70%";
      rulesTableWidthStr = "70%";
      scoresTableWidthStr = "100%";
      scoresFontSizeStr = "1.4vh";
      abbreviateScores = true;
    }
    else if (window.innerWidth < 1.0*window.innerHeight) {
      generalTableWidthStr = "70%";
      rulesTableWidthStr = "60%";
      scoresTableWidthStr = "100%";
      scoresFontSizeStr = "1.4vh";
      abbreviateScores = true;
    }
    else if (window.innerWidth > 2.6*window.innerHeight) {
      generalTableWidthStr = "22%";
      rulesTableWidthStr = "13%";
      scoresTableWidthStr = "45%";
      scoresFontSizeStr = "1.4vh";
      abbreviateScores = false;
    }
    else if (window.innerWidth > 2*window.innerHeight) {
      generalTableWidthStr = "30%";
      rulesTableWidthStr = "20%";
      scoresTableWidthStr = "60%";
      scoresFontSizeStr = "1.4vh";
      abbreviateScores = false;
    }
    else if(window.innerWidth > 1.8*window.innerHeight){
      generalTableWidthStr="34%";
      rulesTableWidthStr="25%";
      scoresTableWidthStr="70%";
      scoresFontSizeStr="1.4vh";
      abbreviateScores=false;
    }
    else if(window.innerWidth > 1.7*window.innerHeight){
      generalTableWidthStr="40%";
      rulesTableWidthStr="30%";
      scoresTableWidthStr="85%";
      scoresFontSizeStr="1.4vh";
      abbreviateScores=false;
    }
    else if (window.innerWidth > 1.5*window.innerHeight) {
      generalTableWidthStr = "44%";
      rulesTableWidthStr = "35%";
      scoresTableWidthStr = "95%";
      scoresFontSizeStr = "1.4vh";
      abbreviateScores = false;
    }
    else if (window.innerWidth > 1.3*window.innerHeight) {
      generalTableWidthStr = "44%";
      rulesTableWidthStr = "40%";
      scoresTableWidthStr = "95%";
      scoresFontSizeStr = "1.4vh";
      abbreviateScores = false;
    }
    else if (window.innerWidth > 1.1*window.innerHeight) {
      generalTableWidthStr = "53%";
      rulesTableWidthStr = "45%";
      scoresTableWidthStr = "100%";
      scoresFontSizeStr = "1.4vh";
      abbreviateScores = true;
    }
    else { // (window ratio factor between 1.0 and 1.1)
      generalTableWidthStr = "53%";
      rulesTableWidthStr = "53%";
      scoresTableWidthStr = "100%";
      scoresFontSizeStr = "1.4vh";
      abbreviateScores = true;
    }

    if ( newGameEvent
         || (nbColumns != nbColumnsSelected) ) { // Check event "column number change"
      resetGameAttributes(nbColumnsSelected);
    }
    if (smmCodeHandler.getNbColumns() != nbColumns) {
      throw new Error("invalid nbColumns handling");
    }

    if ((currentAttemptNumber <= 0) || (currentAttemptNumber > nbMaxAttempts+1)) { // Defensive check that currentAttemptNumber is valid
      displayGUIError("inconsistent currentAttemptNumber value: " + currentAttemptNumber, new Error().stack);
    }
    else {
      if ( gameOnGoing() // playing phase
           && smmCodeHandler.isFullAndValid(currentCode) ) { // New code submitted

        if ((currentAttemptNumber == 2) && (nbColumns >= 4)) {
          setTimeout("attempt_HTML_geolocation_if_needed();", 222);
        }

        nbCodesPlayed++;

        if (1 == currentAttemptNumber) {
          startTime = (new Date()).getTime(); // time in milliseconds
          stopTime = startTime;
          updateAndStoreNbGamesStarted(+1);
        }
        codesPlayed[currentAttemptNumber-1] = currentCode;
        let sCodeConv = smmCodeHandler.convert(sCode);
        if (!smmCodeHandler.isFullAndValid(sCodeConv)) {
          throw new Error("inconsistent code (" + sCodeConv + ")");
        }
        smmCodeHandler.fillMark(sCodeConv, currentCode, marks[currentAttemptNumber-1]);

        if ((marks[currentAttemptNumber-1].nbBlacks == 0) && (marks[currentAttemptNumber-1].nbWhites == 0)) { // worst mark
          for (let col = 0; col < nbColumns; col++) {
            obviouslyImpossibleColors[smmCodeHandler.getColor(currentCode, col+1)] = true;
          }
        }
        if (marks[currentAttemptNumber-1].nbBlacks == nbColumns) { // game over (game won)
          stopTime = (new Date()).getTime(); // time in milliseconds
          currentAttemptNumber++;
          currentCode = -1;
          gameWon = true;
          nbGamesPlayed++;
          nbGamesPlayedAndWon++;
          setLightGray(); // clearer stats
          switch (nbColumns) {
            case 3:
              if (localStorage.nbgamesstarted3_ref) {
                localStorage.nbgamesstarted3_ref = Number(localStorage.nbgamesstarted3_ref) + 1;
              }
              break;
            case 4:
              if (localStorage.nbgamesstarted4_ref) {
                localStorage.nbgamesstarted4_ref = Number(localStorage.nbgamesstarted4_ref) + 1;
              }
              break;
            case 5:
              if (localStorage.nbgamesstarted5_ref) {
                localStorage.nbgamesstarted5_ref = Number(localStorage.nbgamesstarted5_ref) + 1;
              }
              break;
            case 6:
              if (localStorage.nbgamesstarted6_ref) {
                localStorage.nbgamesstarted6_ref = Number(localStorage.nbgamesstarted6_ref) + 1;
              }
              break;
            case 7:
              if (localStorage.nbgamesstarted7_ref) {
                localStorage.nbgamesstarted7_ref = Number(localStorage.nbgamesstarted7_ref) + 1;
              }
              break;
            default:
              throw new Error("inconsistent nbColumns value: " + nbColumns);
          }
        }
        else {
          currentAttemptNumber++;
          if (currentAttemptNumber == nbMaxAttempts+1) { // game over (game lost)
            currentCode = -1;
            stopTime = (new Date()).getTime(); // time in milliseconds
            nbGamesPlayed++;
            setLightGray(); // clearer stats
          }
          else {
            last_but_one_attempt_event = (currentAttemptNumber == nbMaxAttempts-1); /* (last but one attempt) */
            currentCode = sCodeRevealed;
          }
        }
        updateGameSizes();
        main_graph_update_needed = true;

        // Send a message to the gameSolver worker for the new code submitted
        let nbMaxAttemptsForEndOfGame;
        if (gameWon) {
          nbMaxAttemptsForEndOfGame = currentAttemptNumber-1;
        }
        else {
          nbMaxAttemptsForEndOfGame = nbMaxAttempts;
        }

        if (game_id_for_gameSolverConfig != game_cnt) { // ignore other threads
          console.log("next attempt ignored: " + game_id_for_gameSolverConfig + ", " + game_cnt);
        }
        else {
          if (game_id_for_initGameSolver == -1) { // 'INIT' message was not posted yet
            console.log("(anticipated 'INIT' message)");
            postInitMessageToGameSolver(game_id_for_gameSolverConfig);
          }
          if (game_id_for_initGameSolver == game_cnt) {
            if (gameSolver !== undefined) {
              gameSolverDbg++;
              let precalculated_games = "";
              if (nbColumns == 5) {
                if (currentAttemptNumber == 2) { // first NEW_ATTEMPT message posted
                  precalculated_games = precalculated_games_5columns_1st_level[marks[currentAttemptNumber-2].nbBlacks][marks[currentAttemptNumber-2].nbWhites];
                }
                if (precalculated_games == undefined) {
                  precalculated_games = "";
                }
              }
              gameSolver.postMessage({'smm_buffer_messages': ((gamesolver_buffered_msg_status == 1) ? 'yes' : 'no'), 'smm_req_type': 'NEW_ATTEMPT', 'curAttemptNumber': currentAttemptNumber-1, 'nbMaxAttemptsForEndOfGame': nbMaxAttemptsForEndOfGame, 'code': codesPlayed[currentAttemptNumber-2], 'mark_nbBlacks': marks[currentAttemptNumber-2].nbBlacks, 'mark_nbWhites': marks[currentAttemptNumber-2].nbWhites, 'precalculated_games': precalculated_games, 'game_id': game_cnt});
              gameSolverDbg++;

              // Try to complete precalculated games "on the fly" from second attempt of 5 columns games
              if ((nbColumns == 5) && (currentAttemptNumber == 3)) {
                completePrecalculatedGamesOnTheFly(smmCodeHandler.compressCodeToString(codesPlayed[0]), smmCodeHandler.markToString(marks[0]),
                                                   smmCodeHandler.compressCodeToString(codesPlayed[1]), smmCodeHandler.markToString(marks[1]),
                                                   codesPlayed[0], codesPlayed[1]);
              }
            }
            else {
              throw new Error("undefined gameSolver (" + currentAttemptNumber + ")");
            }
          }
          else {
            throw new Error("invalid game_id_for_initGameSolver value at next attempt: " + game_id_for_initGameSolver);
          }
        }

      }
    }

    // ***************
    // Full repainting
    // ***************

    let nbMaxAttemptsToDisplay = ((!showPossibleCodesMode) ? nbMaxAttempts-nb_attempts_not_displayed-(skip_last_attempt_display?1:0) : currentAttemptNumber-1);

    if (main_graph_update_needed) { // Note: no double buffering is needed in javascript (canvas contents do not need to be refilled as during Java's repaint())

      let x_0, y_0, x_1, y_1;

      if (modernDisplay) {
        ctx.fillStyle = (mobileMode ? "#FFFFFF" : myTableObject.style.backgroundColor);
        ctx.fillRect(0, 0, current_width, current_height);
      }
      else {
        let x_attempts_0;
        let x_attempts_1;
        x_attempts_0 = get_x_pixel(x_min);
        if (attempt_nb_width > 0) {
          x_attempts_1 = get_x_pixel(x_min+x_step*attempt_nb_width);
        }
        else {
          x_attempts_1 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100));
        }
        let lineaire = ctx.createLinearGradient(x_attempts_0, 25, x_attempts_1, 25);
        lineaire.addColorStop(0, legacy_backgroundColor_base_color);
        lineaire.addColorStop(0.5, ((gameWon || (currentAttemptNumber == 1)) ? '#BB7702' : legacy_backgroundColor_base_color)); // orange // '#885000' '#996602'
        lineaire.addColorStop(1, legacy_backgroundColor_base_color);
        ctx.fillStyle = lineaire;
        ctx.fillRect(0, 0, current_width, current_height);
      }

      // ***************
      // Adapt font size
      // ***************

      let x_cell_delta = get_x_pixel(x_min+x_step) - get_x_pixel(x_min);
      let y_cell_delta = get_y_pixel(y_min) - get_y_pixel(y_min+y_step);

      font_size = min_font_size;
      let last_valid_font_size = font_size;
      let font_tmp = "bold " + font_size + "px " + fontFamily;
      ctx.font = font_tmp;
      let font_width_1char = ctx.measureText("X").width;
      let font_height = font_size;
      while ((font_height <= Math.min(y_cell_delta-4,y_cell_delta*80.0/100.0) /* (margin + char height imprecision) */) && (font_size <= max_font_size) && (font_width_1char <= x_cell_delta-3)) {
        last_valid_font_size = font_size;
        font_size = font_size + 1;
        font_tmp = "bold " + font_size + "px " + fontFamily;
        ctx.font = font_tmp;
        font_width_1char = ctx.measureText("X").width;
        font_height = font_size;
      }
      font_size = last_valid_font_size;

      star_font_size = min_font_size;
      let last_valid_star_font_size = star_font_size;
      let star_font_tmp = "bold " + star_font_size + "px " + fontFamily;
      ctx.font = star_font_tmp;
      let star_font_width_1char = ctx.measureText("\u2B50").width; // star
      let star_font_height = star_font_size;
      while ((star_font_height <= Math.min(y_cell_delta-6,y_cell_delta*85.0/100.0) /* (margin + char height imprecision) */) && (star_font_size <= max_font_size) && (star_font_width_1char <= x_cell_delta-3)) {
        last_valid_star_font_size = star_font_size;
        star_font_size = star_font_size + 1;
        star_font_tmp = "bold " + star_font_size + "px " + fontFamily;
        ctx.font = star_font_tmp;
        star_font_width_1char = ctx.measureText("\u2B50").width; // star
        star_font_height = star_font_size;
      }
      star_font_size = Math.min(last_valid_star_font_size, font_size);

      font_array__str_height = null;
      font_array__empty_space_before_str = null;
      font_array__str_height = new Array(0);
      font_array__empty_space_before_str = new Array(0);

      basic_bold_font = "bold " + font_size + "px " + fontFamily;
      measurePreciseTextHeight("0", basic_bold_font, str_meas_out);
      font_array__str_height[basic_bold_font] = str_meas_out.str_height;
      font_array__empty_space_before_str[basic_bold_font] = str_meas_out.empty_space_before_str;

      small_bold_font = "bold " + Math.max(Math.floor(font_size/1.4), min_font_size) + "px " + fontFamily;
      measurePreciseTextHeight("0", small_bold_font, str_meas_out);
      font_array__str_height[small_bold_font] = str_meas_out.str_height;
      font_array__empty_space_before_str[small_bold_font] = str_meas_out.empty_space_before_str;

      medium_bold_font = "bold " + Math.max(Math.floor(font_size/1.55), min_font_size) + "px " + fontFamily;
      measurePreciseTextHeight("0", medium_bold_font, str_meas_out);
      font_array__str_height[medium_bold_font] = str_meas_out.str_height;
      font_array__empty_space_before_str[medium_bold_font] = str_meas_out.empty_space_before_str;

      if (!showPossibleCodesMode) {
        stats_bold_font = "bold " + Math.max(Math.floor(font_size/1.55), min_font_size) + "px " + fontFamily;
      }
      else {
        stats_bold_font = "bold " + Math.max(Math.floor(star_font_size), min_font_size) + "px " + fontFamily;
      }
      measurePreciseTextHeight("0", stats_bold_font, str_meas_out);
      font_array__str_height[stats_bold_font] = str_meas_out.str_height;
      font_array__empty_space_before_str[stats_bold_font] = str_meas_out.empty_space_before_str;

      // Draw main game table
      // ********************

      x_0 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100));
      y_0 = get_y_pixel(y_min+y_step*nbMaxAttemptsToDisplay);
      x_1 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2));
      y_1 = get_y_pixel(y_min);
      if (modernDisplay) {
        ctx.fillStyle = (mobileMode ? "#EEEEEE" : "#D0D0D0");
        ctx.fillRect(x_0, y_0, x_1-x_0, y_1-y_0);
      }

      ctx.font = basic_bold_font;
      for (let attempt = 0; attempt < nbMaxAttemptsToDisplay; attempt++) {
        let backgroundColor = "";
        if (attempt+1 == currentPossibleCodeShown) {
          backgroundColor = highlightColor;
        }
        let str_width;
        if (attempt_nb_width == 0) {
          if (attempt+1 <= currentAttemptNumber-1) { // a mark will be displayed at this place
            continue;
          }
          str_width = (70*(nbColumns+1))/100;
        }
        else {
          str_width = attempt_nb_width;
        }
        let attempt_nb_to_display = -1;
        if ((!showPossibleCodesMode) && (nb_attempts_not_displayed > 0) && (!skip_last_attempt_display) && (attempt+1 == nbMaxAttemptsToDisplay)) {
          attempt_nb_to_display = nbMaxAttempts;
        }
        else {
          attempt_nb_to_display = attempt+1;
        }
        let attempt_nb_str_to_display = String(attempt_nb_to_display);
        if (gameWon) {
          if (attempt_nb_to_display == currentAttemptNumber-1) {
            displayString(attempt_nb_str_to_display, 0, attempt, str_width,
                          (modernDisplay ? darkGray : "orange"), backgroundColor, ctx, false, true, 0, true, 0);
          }
          else {
            displayString(attempt_nb_str_to_display, 0, attempt, str_width,
                          lightGray, backgroundColor, ctx, false, true, 0, true, 0);
          }
        }
        else if (attempt_nb_to_display == currentAttemptNumber) {
          if (attempt_nb_to_display == nbMaxAttempts) {
            displayString(attempt_nb_str_to_display, 0, attempt, str_width,
                          redColor, backgroundColor, ctx, false, true, 0, true, 0);
          }
          else if (attempt_nb_to_display+1 == nbMaxAttempts) { // last but one attempt
            displayString(attempt_nb_str_to_display, 0, attempt, str_width,
                          redColor, backgroundColor, ctx, false, true, 0, true, 0);
          }
          else {
            displayString(attempt_nb_str_to_display, 0, attempt, str_width,
                          (modernDisplay ? modernBaseColor : "orange"), backgroundColor, ctx, false, true, 0, true, 0);
          }
        }
        else {
          displayString(attempt_nb_str_to_display, 0, attempt, str_width,
                        (((currentAttemptNumber == 1) && !modernDisplay) ? darkGray : lightGray), backgroundColor, ctx, false, true, 0, true, 0);
        }
      }

      ctx.fillStyle = darkGray;
      x_0 = get_x_pixel(x_min+x_step*attempt_nb_width);
      y_0 = get_y_pixel(y_min);
      x_1 = get_x_pixel(x_min+x_step*attempt_nb_width);
      y_1 = get_y_pixel(y_min+y_step*nbMaxAttemptsToDisplay);
      if (x_0 != get_x_pixel(x_min)) {
        drawLine(ctx, x_0, y_0, x_1, y_1);
      }

      for (let col = 0; col <= nbColumns; col++) {
        x_0 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+col*2));
        y_0 = get_y_pixel(y_min);
        x_1 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+col*2));
        y_1 = get_y_pixel(y_min+y_step*nbMaxAttemptsToDisplay);
        if ((col == 0) || (col == nbColumns)) {
          drawLine(ctx, x_0, y_0, x_1, y_1);
        }
      }

      x_0 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width));
      y_0 = get_y_pixel(y_min);
      x_1 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width));
      y_1 = get_y_pixel(y_min+y_step*nbMaxAttemptsToDisplay);
      if (x_1 != get_x_pixel(x_max)) {
        drawLine(ctx, x_0, y_0, x_1, y_1);
      }

      x_0 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width));
      y_0 = get_y_pixel(y_min);
      x_1 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width));
      y_1 = get_y_pixel(y_min+y_step*nbMaxAttemptsToDisplay);
      if (x_1 != get_x_pixel(x_max)) {
        drawLine(ctx, x_0, y_0, x_1, y_1);
      }

      x_0 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width+tick_width));
      y_0 = get_y_pixel(y_min);
      x_1 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width+tick_width));
      y_1 = get_y_pixel(y_min+y_step*nbMaxAttemptsToDisplay);
      if (x_1 != get_x_pixel(x_max)) {
        drawLine(ctx, x_0, y_0, x_1, y_1);
      }

      // Draw codes played and associated marks
      // **************************************

      ctx.font = basic_bold_font;
      for (let i = 1; i < currentAttemptNumber; i++) {

        displayCode(codesPlayed[i-1], i-1, ctx, false, gameOnGoing());

        let backgroundColor = "";
        if (i == currentPossibleCodeShown) {
          backgroundColor = highlightColor;
        }
        displayMark(marks[i-1], i-1, backgroundColor, ctx);

      }

      // Draw stats
      // **********

      ctx.font = stats_bold_font;
      let nbMaxHintsDisplayed = 2;

      for (let i = 0; i < nbMaxAttempts; i++) {
        // performancesDisplayed[i] = false; -> mechanism disabled -> always set to true
        performancesDisplayed[i] = true;
      }

      for (let i = 1 ; i <= nbOfStatsFilled_Perfs; i++) {
        let backgroundColor = "";
        if (i == currentPossibleCodeShown) {
          backgroundColor = highlightColor;
        }

        if (i < currentAttemptNumber) {
          // Relative performance was filled and may be known or unknown
          displayPerf(relative_performances_of_codes_played[i-1], i-1, backgroundColor, isAttemptPossible(i), showPossibleCodesMode, false, PerformanceNA, ctx, false, false, classicalUselessCode[i-1]);
          if ( relativePerformancesEvaluationDone[i-1]
               && (relative_performances_of_codes_played[i-1] != PerformanceUNKNOWN)
               && (relative_performances_of_codes_played[i-1] <= PerformanceLOW) ) {
            performancesDisplayed[i-1] = true;
          } // else: allow overwriting
        }
      }

      let clockStr;
      if (gameWon && !allPerformancesFilled()) {
        clockStr = "\u231B"; // hourglass
      }
      else {
        clockStr = "\u301C"; // wave
      }

      if (optimal_width > 0) { // (the below x_cell values are only valid for (optimal_width > 0), as in displayPerf())
        if (nbOfStatsFilled_NbPossibleCodes > nbOfStatsFilled_Perfs+1) {
          displayString(clockStr, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width, nbOfStatsFilled_Perfs+1-1, optimal_width,
                        lightGray, "", ctx, false);
        }
        else if (!gameOnGoing() && (nbOfStatsFilled_NbPossibleCodes > nbOfStatsFilled_Perfs)) {
          displayString(clockStr, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width, nbOfStatsFilled_Perfs+1-1, optimal_width,
                        lightGray, "", ctx, false);
        }
        else if (gameOnGoing() && (currentAttemptNumber > nbOfStatsFilled_NbPossibleCodes)) {
          displayString(clockStr, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbOfStatsFilled_NbPossibleCodes+1-1, nb_possible_codes_width,
                        lightGray, "", ctx, false);
          if (nbOfStatsFilled_NbPossibleCodes > nbOfStatsFilled_Perfs) {
            displayString(clockStr, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width, nbOfStatsFilled_Perfs+1-1, optimal_width,
                          lightGray, "", ctx, false);
          }
        }
      }
      else {
        if (nbOfStatsFilled_NbPossibleCodes > nbOfStatsFilled_Perfs+1) {
          displayString(clockStr, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbOfStatsFilled_Perfs+1-1, nb_possible_codes_width,
                        lightGray, "", ctx, false);
        }
        else if (!gameOnGoing() && (nbOfStatsFilled_NbPossibleCodes > nbOfStatsFilled_Perfs)) {
          displayString(clockStr, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbOfStatsFilled_Perfs+1-1, nb_possible_codes_width,
                        lightGray, "", ctx, false);
        }
        else if (gameOnGoing() && (currentAttemptNumber > nbOfStatsFilled_NbPossibleCodes)) {
          displayString(clockStr, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbOfStatsFilled_NbPossibleCodes+1-1, nb_possible_codes_width,
                        lightGray, "", ctx, false);
          if (nbOfStatsFilled_NbPossibleCodes > nbOfStatsFilled_Perfs) {
            displayString(clockStr, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbOfStatsFilled_Perfs+1-1, nb_possible_codes_width,
                          lightGray, "", ctx, false);
          }
        }
      }

      for (let i = 1 ; i <= nbOfStatsFilled_NbPossibleCodes; i++) {
        let backgroundColor = "";
        if (i == currentPossibleCodeShown) {
          backgroundColor = highlightColor;
        }

        if ((optimal_width > 0) || (i == currentAttemptNumber) || ((i == nbOfStatsFilled_NbPossibleCodes) && (nbOfStatsFilled_NbPossibleCodes > nbOfStatsFilled_Perfs+1)) || (!performancesDisplayed[i-1]) /* (nb of possible codes <-> perf switch) */) {
          let statsColor;

          if (currentAttemptNumber == 1) {
            statsColor = (modernDisplay ? modernBaseColor : "orange");
          }
          else if (gameWon && (i == currentAttemptNumber-1)) {
            statsColor = (modernDisplay ? darkGray : lightGray);
          }
          else if (i == currentAttemptNumber) {
            statsColor = (modernDisplay ? darkGray : "orange");
          }
          else {
            statsColor = lightGray;
          }
          if (!displayString("\u2009" /* (thin space) */ + nbOfPossibleCodes[i-1] + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, i-1, nb_possible_codes_width,
                             statsColor, backgroundColor, ctx, false, true, 0, true, 0)) {
            displayString(String(nbOfPossibleCodes[i-1].toExponential(1)).replace("e+","e"), attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, i-1, nb_possible_codes_width,
                          statsColor, backgroundColor, ctx, false);
          }
        }
      }

      // Draw whether codes are possible or not
      // **************************************

      if (tick_width > 0) {
        ctx.font = basic_bold_font;
        for (let i = 1 ; i < currentAttemptNumber; i++) {

          let backgroundColor = "";
          if (i == currentPossibleCodeShown) {
            backgroundColor = highlightColor;
          }

          let isPossible = isAttemptPossible(i);
          if ( gameOnGoing() && (i > nbMaxHintsDisplayed)
               && ((relative_performances_of_codes_played[i-1] > -0.9999) || (relative_performances_of_codes_played[i-1] == PerformanceUNKNOWN) || (relative_performances_of_codes_played[i-1] == PerformanceNA)) // not a useless code (simplified test)
               && (nbColumns >= nominalGameNbColumns) ) { // not easy games
            ctx.font = stats_bold_font;
            displayString("\u2234" /* tick hidden */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, i-1, tick_width,
                          lightGray, backgroundColor, ctx, false);
            ctx.font = basic_bold_font;
          }
          else if (0 == isPossible) { // code is possible
            if (!displayString(tickChar, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, i-1, tick_width,
                               greenColor, backgroundColor, ctx, false, true, 0, true, 0)) {
              displayString("Y", attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, i-1, tick_width,
                           greenColor, backgroundColor, ctx, false, true, 0, true, 0); // (may be thinner than tickChar)
            }
          }
          else { // code is not possible
            if (i <= 2) {
              if (!displayString(crossChar, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, i-1, tick_width,
                                 redColor, backgroundColor, ctx, false, true, 0, true, 0)) {
                displayString("N", attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, i-1, tick_width,
                              redColor, backgroundColor, ctx, false, true, 0, true, 0); // (may be thinner than crossChar)
              }
            }
            else {
              if (!displayString("\u2009" /* (thin space) */ + crossChar + "\u2009" /* (thin space) */ + isPossible + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, i-1, tick_width,
                                 redColor, backgroundColor, ctx, false, true, 0, true, 0)) {
                if ((nbColumns <= 4) || !displayString(isPossible, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, i-1, tick_width,
                                                       redColor, backgroundColor, ctx, false, true, 0, true, 0)) {
                  if (!displayString(crossChar, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, i-1, tick_width,
                                     redColor, backgroundColor, ctx, false, true, 0, true, 0)) {
                    displayString("N", attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, i-1, tick_width,
                                  redColor, backgroundColor, ctx, false, true, 0, true, 0); // (may be thinner than crossChar)
                  }
                }
              }
            }
          }

        }
      }

      let lineWidthIni = ctx.lineWidth;
      ctx.lineWidth = getLineWidth(window.innerHeight, 1); // getGridLineWidth(window.innerHeight);
      ctx.strokeStyle = darkGray;
      x_0 = get_x_pixel(x_min) + refLineWidth + 1;
      y_0 = get_y_pixel(y_min+y_step*nbMaxAttemptsToDisplay);
      x_1 = get_x_pixel(x_max) - refLineWidth + 1;
      y_1 = get_y_pixel(y_min);
      let radius = Math.min(x_1 - x_0, y_1 - y_0)/(CompressedDisplayMode ? 40.0 : 40.0);
      drawRoundedRect(ctx, x_0, y_0, x_1 - x_0, y_1 - y_0, {
        tl: radius,
        tr: radius,
        bl: radius,
        br: radius
      }, false, true);
      ctx.lineWidth = lineWidthIni;

      let HintsThreshold = 5;
      if (!showPossibleCodesMode) {

        // Display column headers
        // **********************

        ctx.font = medium_bold_font;
        if ((!gameOnGoing()) && allPerformancesFilled()) {
          let str1, str1bis, str2;
          let sum_rounded = Math.round(sumPerfs * 100.0) / 100.0; // 0.01 precision
          str1 = ":";
          str1bis = "";
          /* if (nbUnknownPerfs == 0) {
            str1 = ":";
            str1bis = "";
          }
          else {
            str1 = "";
            str1bis = "\u2248 ";
          } */
          if (sum_rounded > 0.0) {
            str2 = "+" + sum_rounded.toFixed(2) + "!"; // 2 decimal figures
          }
          else {
            str2 = sum_rounded.toFixed(2); // 2 decimal figures
          }
          let res_header1 = false;
          let res_header2 = false;
          if ((optimal_width == 0) || !display2Strings("number", "   " + "of codes" + "   ", attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay, nb_possible_codes_width,
                                                       lightGray, "", ctx, 0, true)) {
            if ((optimal_width == 0) || !displayString("\u2009" /* (thin space) */ + "codes" + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay, nb_possible_codes_width,
                                                       lightGray, "", ctx, false, true, 0, true, 1)) {
              if ((tick_width > 0) && displayString("\u2009" /* (thin space) */ + "#" + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay, nb_possible_codes_width,
                                                    lightGray, "", ctx, false, true, 0, true, 1)) {
                res_header1 = true;
              }
            }
            else {
              res_header1 = true;
            }
          }
          else {
            res_header1 = true;
          }
          if (res_header1 && (optimal_width > 0)) {
            if (!display2Strings("perf" + str1, str1bis + str2, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width, nbMaxAttemptsToDisplay, optimal_width,
                                 lightGray, "", ctx, 0, true)) {
              res_header2 = display2Strings("\u03A3" /* (capital sigma) */, str1bis + str2, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width, nbMaxAttemptsToDisplay, optimal_width,
                                            lightGray, "", ctx, 0, false); // (always display sum => res_header2 will be true)
            }
            else {
              res_header2 = true;
            }
          }
          if (res_header1 && (res_header2 || (optimal_width <= 0)) && (tick_width > 0)) {
            if (!displayString("\u2009" /* (thin space) */ + tickChar + "\u2009" /* (thin space) */ + "/" + "\u2009" /* (thin space) */ + crossChar + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, nbMaxAttemptsToDisplay, tick_width,
                               lightGray, "", ctx, false, true, 0, true, 1)) {
              displayString(tickChar, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, nbMaxAttemptsToDisplay, tick_width,
                            lightGray, "", ctx, false, true, 0, true, 1);
            }
          }

          if ( (!gameOnGoing()) && allPossibleCodesFilled()
               && (gameSolver !== undefined) ) {
            // (code duplicated:)
            isWorkerAlive = -1.5;
            gameSolverDbg = 1.5;
            workerTerminationTime = (new Date()).getTime();
            gameSolver.terminate(); gameSolverDbg = 2.5;
            gameSolver = undefined;
          }

        }
        else {
          let res_header1 = false;
          let res_header2 = false;
          if ((optimal_width == 0) || !display2Strings("number", "   " + "of codes" + "   ", attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay, nb_possible_codes_width,
                               lightGray, "", ctx, 0, true)) {
            if ((optimal_width == 0) || !displayString("\u2009" /* (thin space) */ + "codes" + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay, nb_possible_codes_width,
                               lightGray, "", ctx, false, true, 0, true, 1)) {
              if ((tick_width > 0) && displayString("\u2009" /* (thin space) */ + "#" + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay, nb_possible_codes_width,
                                                    lightGray, "", ctx, false, true, 0, true, 1)) {
                res_header1 = true;
              }
            }
            else {
              res_header1 = true;
            }
          }
          else {
            res_header1 = true;
          }
          if (res_header1 && (optimal_width > 0)) {
            if (!display2Strings("0: optimal", "-1: useless", attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width, nbMaxAttemptsToDisplay, optimal_width,
                                 lightGray, "", ctx, 0, true)) {
              if (displayString("perf", attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width, nbMaxAttemptsToDisplay, optimal_width,
                                lightGray, "", ctx, false, true, 0, true, 1)) {
                res_header2 = true;
              }
            }
            else {
              res_header2 = true;
            }
          }
          if (res_header1 && (res_header2 || (optimal_width <= 0)) && (tick_width > 0)) {
            if (!displayString("\u2009" /* (thin space) */ + tickChar + "\u2009" /* (thin space) */ + "/" + "\u2009" /* (thin space) */ + crossChar + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, nbMaxAttemptsToDisplay, tick_width,
                               lightGray, "", ctx, false, true, 0, true, 1)) {
              displayString(tickChar, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, nbMaxAttemptsToDisplay, tick_width,
                            lightGray, "", ctx, false, true, 0, true, 1);
            }
          }
        }

        // Draw secret code
        // ****************

        ctx.fillStyle = darkGray;
        if (scode_height > 0) {
          ctx.font = basic_bold_font;
          if (!displayString("Secret code " + "\u2009" /* (thin space) */, 0, nbMaxAttemptsToDisplay+transition_height, attempt_nb_width+(70*(nbColumns+1))/100,
                             (modernDisplay || (currentAttemptNumber == 1) ? darkGray : (gameOnGoing() ? "orange" : "orange")), "", ctx, false, true, 2, true, 0)) {
            if (!displayString("\u2009Code\u2009", attempt_nb_width, nbMaxAttemptsToDisplay+transition_height, (70*(nbColumns+1))/100,
                               (modernDisplay || (currentAttemptNumber == 1) ? darkGray : (gameOnGoing() ? "orange" : "orange")), "", ctx, false, true, 0, true, 0)) {
              displayString("\u2009\u2B50\u2009" /* star */, attempt_nb_width, nbMaxAttemptsToDisplay+transition_height, (70*(nbColumns+1))/100,
                           (modernDisplay || (currentAttemptNumber == 1) ? darkGray : (gameOnGoing() ? "orange" : "orange")), "", ctx, false, true, 0, true, 0);
            }
          }
          if (gameOnGoing()) {
            if (!dsCode) {
              displayCode(sCodeRevealed, nbMaxAttemptsToDisplay+transition_height, ctx, true, false);
            }
            else {
              displayCode(smmCodeHandler.convert(sCode), nbMaxAttemptsToDisplay+transition_height, ctx);
            }
          }
          else { // game over
            displayCode(smmCodeHandler.convert(sCode), nbMaxAttemptsToDisplay+transition_height, ctx);
          }
        }

        // Display game over status
        // ************************

        if (!gameOnGoing()) {

          let totalTimeInMilliSeconds = stopTime - startTime
                                        + ((gameInv != 0) ? 1000 : 0); // make duration realistic after attempt inversion - actual last-game duration ignored to compensate for the disturbance: constant extra 1 second always considered
          let totalTimeInSeconds = Math.floor(totalTimeInMilliSeconds/1000);

          let timeInHours = Math.floor(totalTimeInSeconds/3600);
          let timeInSecondsWithinHour = (totalTimeInSeconds - timeInHours*3600); // (range: [0;3599]
          let timeInMinutes = Math.floor(timeInSecondsWithinHour/60);
          let timeInSeconds = timeInSecondsWithinHour - timeInMinutes*60; // (range: [0;59])

          if (timeInHours >= 24) {
            timeStr = "> 1 day";
          }
          else if (timeInHours >= 3) {
            timeStr = "> " + timeInHours + "h";
          }
          else if (timeInHours > 0) {
            if (timeInMinutes > 0) {
              if (timeInMinutes < 10) {
                timeStr = timeInHours + "h 0" + timeInMinutes;
              }
              else {
                timeStr = timeInHours + "h " + timeInMinutes;
              }
            }
            else {
              timeStr = timeInHours + "h";
            }
          }
          else if (timeInMinutes != 0) {
            timeInSeconds = Math.floor(timeInSeconds/10.0)*10;
            if (timeInMinutes >= 10) {
              timeStr = timeInMinutes + " min";
            }
            else if (timeInSeconds != 0) {
              timeStr = timeInMinutes + " min " + timeInSeconds;
            }
            else {
              timeStr = timeInMinutes + " min";
            }
          }
          else {
            timeStr = timeInSeconds + " s";
          }
          wasGameShort = (totalTimeInSeconds < ((nbColumns <= 4) ? 25 : 60));

          if (gameWon) { // game won
            let victoryStr;
            let victoryStr2;
            let victoryStr3;
            let nb_attempts_for_max_score;
            let time_in_seconds_for_max_score = -1;
            let time_in_seconds_corresponding_to_one_attempt_in_score;
            let multiply_factor;
            switch (nbColumns) {
              case 3:
                nb_attempts_for_max_score = 3; // (estimate: <=3 attempts: 33% of the games, below 3 would not be relevant)
                if (currentAttemptNumber-1 /* number of attempts */ <= nb_attempts_for_max_score) {
                  time_in_seconds_for_max_score = 3+5; // +5 due to time to make attempts + very low multiply_factor granularity
                }
                else {
                  time_in_seconds_for_max_score = 3+7; // +7 due to time to make attempts + very low multiply_factor granularity
                }
                time_in_seconds_corresponding_to_one_attempt_in_score = 20; // (1 attempt <=> 20 sec)
                multiply_factor = 0.20;
                break;
              case 4:
                nb_attempts_for_max_score = 4; // (estimate: <=3 attempts: 8% of the games, <=4 attempts: 28% of the games)
                if (currentAttemptNumber-1 /* number of attempts */ <= nb_attempts_for_max_score) {
                  time_in_seconds_for_max_score = 15+0; // +0 due to time to make attempts
                }
                else {
                  time_in_seconds_for_max_score = 15+10; // +10 due to time to make attempts
                }
                time_in_seconds_corresponding_to_one_attempt_in_score = 65; // (1 attempt <=> 1 min 5 sec)
                multiply_factor = 0.50;
                break;
              case 5:
                nb_attempts_for_max_score = 5; // (estimate: <=4 attempts: 5% of the games, <=5 attempts: 13% of the games)
                time_in_seconds_for_max_score = 40;
                time_in_seconds_corresponding_to_one_attempt_in_score = 140; // (1 attempt <=> 2 min 20 sec)
                multiply_factor = 1.0;
                break;
              case 6:
                nb_attempts_for_max_score = 6; // (estimate: <=6 attempts: 17% of the games, <=7 attempts: 34% of the games)
                time_in_seconds_for_max_score = 60;
                time_in_seconds_corresponding_to_one_attempt_in_score = 240; // (1 attempt <=> 4 min)
                multiply_factor = 1.5;
                break;
              case 7:
                nb_attempts_for_max_score = 7; // (estimate: <=7 attempts: 11% of the games, <=8 attempts: 30% of the games)
                time_in_seconds_for_max_score = 90;
                time_in_seconds_corresponding_to_one_attempt_in_score = 330; // (1 attempt <=> 5 min 30 sec)
                multiply_factor = 2.0;
                break;
              default:
                throw new Error("invalid number of columns in score calculation: " + nbColumns);
            }

            // Score from number of attempts
            let max_score = 100.0 * multiply_factor;
            let score_from_nb_attempts;
            if (currentAttemptNumber-1 /* number of attempts */ <= nb_attempts_for_max_score) { // (all the very low numbers of attempts ("lucky games") are scored the same way)
              score_from_nb_attempts = max_score;
            }
            else {
              score_from_nb_attempts = max_score - ((currentAttemptNumber-1) /* number of attempts */ - nb_attempts_for_max_score)*10.0*multiply_factor;
            }

            // Score from game duration
            let time_delta_score;
            let max_time_in_seconds_for_nominal_slope = time_in_seconds_for_max_score + 2*time_in_seconds_corresponding_to_one_attempt_in_score;
            if (totalTimeInMilliSeconds < time_in_seconds_for_max_score*1000+1000) { // <=> totalTimeInSeconds <= time_in_seconds_for_max_score
              // 0 -> 0, time_in_seconds_for_max_score*1000+1000 -> 0.5000001
              time_delta_score = 0.5000001 * totalTimeInMilliSeconds / (time_in_seconds_for_max_score*1000+1000);
            }
            else if (totalTimeInMilliSeconds <= max_time_in_seconds_for_nominal_slope*1000+1000) {
              // slope: time_in_seconds_corresponding_to_one_attempt_in_score -> 10*multiply_factor
              let slope = 10*multiply_factor / (time_in_seconds_corresponding_to_one_attempt_in_score*1000);
              time_delta_score = slope * (totalTimeInMilliSeconds - (time_in_seconds_for_max_score*1000+1000)) + 0.5000001;
            }
            else {
              // half slope is applied
              let slope = 10*multiply_factor / (2*time_in_seconds_corresponding_to_one_attempt_in_score*1000);
              time_delta_score = slope * (totalTimeInMilliSeconds - (max_time_in_seconds_for_nominal_slope*1000+1000)) + 0.5000001 + 2*10*multiply_factor;
            }

            // Final score
            score = score_from_nb_attempts - time_delta_score;
            let min_score = 1;
            if (score <= min_score + 10 * multiply_factor) { // proper sorting of very low scores in [min_score, min_score + 10 * multiply_factor]
              let delta_score = min_score + 10 * multiply_factor - score;
              let delta_score_factor = 1 / (delta_score/10 + 1); // in ]0, 1]
              score = min_score + 10 * multiply_factor * delta_score_factor;
              if (score < min_score) {
                score = min_score;
              }
            }

            // Check if the player was helped
            if (smmCodeHandler.nbEmptyColors(sCodeRevealed) < nbColumns) {
              victoryStr = "\u2009You won with help\u2009";
              victoryStr2 = "\u2009Win with help\u2009";
              victoryStr3 = "Win";
              score = min_score;
            }
            else {
              victoryStr = "\u2009You won!\u2009";
              victoryStr2 = "\u2009Win!\u2009";
              victoryStr3 = "Win!";
            }

            // (code duplicated:)
            displayString("\u{1F3C6}" /* trophy */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2+1, nb_possible_codes_width+optimal_width+tick_width,
                          "orange", "", ctx, false, true, 0, true, 0);
            if (!displayString(victoryStr, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2, nb_possible_codes_width+optimal_width+tick_width,
                               greenColor, "", ctx, false, true, 0, true, 0)) {
              if (!displayString(victoryStr2, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2, nb_possible_codes_width+optimal_width+tick_width,
                                 greenColor, "", ctx, false, true, 0, true, 0)) {
                displayString(victoryStr3, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2, nb_possible_codes_width+optimal_width+tick_width,
                              greenColor, "", ctx, false, true, 0, false, 0);
              }
            }
            if (allPerformancesFilled()) {
              if (!displayString("\u2009" /* (thin space) */ + "\u23F0\u2009" /* (alarm clock) */ + timeStr + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-1, nb_possible_codes_width+optimal_width+tick_width,
                                 darkGray, "", ctx, false, true, 0, true, 0)) {
                if (!displayString("\u2009" /* (thin space) */ + "\u23F0\u200A" /* (alarm clock) */ + timeStr.replaceAll(" min","m").replaceAll(" s","s").replaceAll(" ","\u200A" /* (hair space) */) + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-1, nb_possible_codes_width+optimal_width+tick_width,
                                   darkGray, "", ctx, false, true, 0, true, 0)) {
                  if (!displayString("\u2009" /* (thin space) */ + timeStr + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-1, nb_possible_codes_width+optimal_width+tick_width,
                                     darkGray, "", ctx, false, true, 0, true, 0)) {
                    if (!displayString("\u2009" /* (thin space) */ + timeStr.replaceAll(" min","m").replaceAll(" s","s").replaceAll(" ","\u200A" /* (hair space) */) + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-1, nb_possible_codes_width+optimal_width+tick_width,
                                       darkGray, "", ctx, false, true, 0, true, 0)) {
                      displayString(timeStr.replaceAll("min","m").replaceAll("s","").replaceAll(" ",""), attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-1, nb_possible_codes_width+optimal_width+tick_width,
                                    darkGray, "", ctx, false, true, 0, false, 0);
                    }
                  }
                }
              }
              let rounded_score = Math.round(score);
              let ptsStr;
              if (rounded_score > 1) {
                ptsStr = "pts";
              }
              else {
                ptsStr = "pt";
              }
              if (!displayString("\u2009" /* (thin space) */ + rounded_score + "\u2009" /* (thin space) */ + ptsStr + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-2, nb_possible_codes_width+optimal_width+tick_width,
                                 darkGray, "", ctx, false, true, 0, true, 0)) {
                displayString(rounded_score + ptsStr, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-2, nb_possible_codes_width+optimal_width+tick_width,
                              darkGray, "", ctx, false, true, 0, false, 0);
              }
            }
            else {
              if (!displayString("\u2009" /* (thin space) */ + "Please wait..." + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-1, nb_possible_codes_width+optimal_width+tick_width,
                                 lightGray, "", ctx, false, true, 0, true, 0)) {
                displayString("\u231B" /* hourglass */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-1, nb_possible_codes_width+optimal_width+tick_width,
                              lightGray, "", ctx, false, true, 0, false, 0);
              }
            }
          }
          else if (currentAttemptNumber == nbMaxAttemptsToDisplay+1) { // game lost
            score = 0.0;
            // (code duplicated:)
            if (!displayString("\u2009You lost!\u2009", attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2, nb_possible_codes_width+optimal_width+tick_width,
                               redColor, "", ctx, false, true, 0, true, 0)) {
              displayString("Lost", attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2, nb_possible_codes_width+optimal_width+tick_width,
                            redColor, "", ctx, false, true, 0, false, 0);
            }
            if (!displayString("\u2009" /* (thin space) */ + "\u23F0\u2009" /* (alarm clock) */ + timeStr + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-1, nb_possible_codes_width+optimal_width+tick_width,
                               darkGray, "", ctx, false, true, 0, true, 0)) {
              if (!displayString("\u2009" /* (thin space) */ + "\u23F0\u200A" /* (alarm clock) */ + timeStr.replaceAll(" min","m").replaceAll(" s","s").replaceAll(" ","\u200A" /* (hair space) */) + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-1, nb_possible_codes_width+optimal_width+tick_width,
                                 darkGray, "", ctx, false, true, 0, true, 0)) {
                if (!displayString("\u2009" /* (thin space) */ + timeStr + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-1, nb_possible_codes_width+optimal_width+tick_width,
                                   darkGray, "", ctx, false, true, 0, true, 0)) {
                  if (!displayString("\u2009" /* (thin space) */ + timeStr.replaceAll(" min","m").replaceAll(" s","s").replaceAll(" ","\u200A" /* (hair space) */) + "\u2009" /* (thin space) */, attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-1, nb_possible_codes_width+optimal_width+tick_width,
                                     darkGray, "", ctx, false, true, 0, true, 0)) {
                    displayString(timeStr.replaceAll("min","m").replaceAll("s","").replaceAll(" ",""), attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+nbColors/2-1, nb_possible_codes_width+optimal_width+tick_width,
                                                     darkGray, "", ctx, false, true, 0, false, 0);
                  }
                }
              }
            }
          }
          else {
            displayGUIError("game over inconsistency", new Error().stack);
          }

        }

        // Draw color selection 1/2
        // ************************

        ctx.font = basic_bold_font;
        ctx.fillStyle = darkGray;

        try {
          ctx.font = medium_bold_font;
          if ( (nbGamesPlayedAndWon == 0) && gameOnGoing() && ((currentAttemptNumber <= 1) || (nbColorSelections < nbColumns)) && (nbOfStatsFilled_NbPossibleCodes >= 1) ) {
            let x_delta = 0.80;
            if (!displayString("Select colors here!", attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+1.35*x_delta, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+Math.floor(nbColors/2)-0.5, +nb_possible_codes_width+optimal_width+tick_width-2.70*x_delta,
                               (modernDisplay ? modernBaseColor : "orange"), "", ctx, false, true, 1, true, 0, false, true, true /* bottom-right bubble */)) {
              if (!displayString("Select colors!", attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+1.35*x_delta, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+Math.floor(nbColors/2)-0.5, +nb_possible_codes_width+optimal_width+tick_width-2.70*x_delta,
                                 (modernDisplay ? modernBaseColor : "orange"), "", ctx, false, true, 1, true, 0, false, true, true /* bottom-right bubble */)) {
                if (!displayString("Select me!", x_delta*0.90, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+Math.floor(nbColors/2)-0.5, attempt_nb_width+(70*(nbColumns+1))/100-2.00*x_delta,
                                   (modernDisplay ? modernBaseColor : "orange"), "", ctx, false, true, 2, true, 0, false, true, false /* bottom-left bubble */)) {
                  if (mobileMode) {
                    if ((nbColumns >= 4) && (nbColumns <= 7) && (currentAttemptNumber == 1)) {
                      displayString("TAP!", x_delta*0.25, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+Math.floor(nbColors/2)-0.5, attempt_nb_width+(70*(nbColumns+1))/100-0.35*x_delta,
                                    (modernDisplay ? modernBaseColor : "orange"), "", ctx, false, true, 0, true, 0, false, true, false /* bottom-left bubble */);
                    }
                  }
                  else {
                    displayString("Click!", x_delta*0.80, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+Math.floor(nbColors/2)-0.5, attempt_nb_width+(70*(nbColumns+1))/100-2.00*x_delta,
                                  (modernDisplay ? modernBaseColor : "orange"), "", ctx, false, true, 2, true, 0, false, true, false /* bottom-left bubble */);
                  }
                }
              }
            }
          }
        }
        catch (err_help) {}

      }

      else { // showPossibleCodesMode is true

        // Display text related to possible codes
        // **************************************

        let nbOfCodes = nbOfPossibleCodes[currentPossibleCodeShown-1];
        let nbOfCodesListed;
        let code_list_offset;
        if ((!showPossibleCodesOffsetMode) || (nbOfCodes <= nbPossibleCodesShown)) { // (first half display)
          nbOfCodesListed = Math.min(nbOfCodes,nbPossibleCodesShown);
          code_list_offset = 0;
        }
        else { // (second half display)
          nbOfCodesListed = Math.min(nbOfCodes-nbPossibleCodesShown,nbPossibleCodesShown);
          code_list_offset = nbPossibleCodesShown;
        }
        if ( (currentPossibleCodeShown >= 1) && (currentPossibleCodeShown <= nbMaxAttempts) && (nbOfCodes>=1) ) {

          ctx.font = basic_bold_font;
          if (nbOfCodes == 1) {
            res = displayString("1 possible code ", 0, nbMaxAttemptsToDisplay+transition_height+nbPossibleCodesShown-1, attempt_nb_width+(70*(nbColumns+1))/100,
                                darkGray, "", ctx, false, true, 0, true, 0);
            if (!res) {
              res = displayString("1\u2009code ", 0, nbMaxAttemptsToDisplay+transition_height+nbPossibleCodesShown-1, attempt_nb_width+(70*(nbColumns+1))/100,
                                  darkGray, "", ctx, false, true, 0, true, 0);
              if (!res) {
                res = displayString("1", 0, nbMaxAttemptsToDisplay+transition_height+nbPossibleCodesShown-1, attempt_nb_width+(70*(nbColumns+1))/100,
                                    darkGray, "", ctx, false, true, 0, true, 0);
              }
            }
          }
          else {
            res = displayString(nbOfCodes + " possible codes ", 0, nbMaxAttemptsToDisplay+transition_height+nbPossibleCodesShown-1, attempt_nb_width+(70*(nbColumns+1))/100,
                                darkGray, "", ctx, false, true, 0, true, 0);
            if (!res) {
              res = displayString(nbOfCodes + "\u2009codes ", 0, nbMaxAttemptsToDisplay+transition_height+nbPossibleCodesShown-1, attempt_nb_width+(70*(nbColumns+1))/100,
                                  darkGray, "", ctx, false, true, 0, true, 0);
              if (!res) {
                res = displayString(String(nbOfCodes), 0, nbMaxAttemptsToDisplay+transition_height+nbPossibleCodesShown-1, attempt_nb_width+(70*(nbColumns+1))/100,
                                    darkGray, "", ctx, false, true, 0, true, 0);
              }
            }
          }
          let currentPossibleCodeShownStr;
          switch (currentPossibleCodeShown) {
            case 1:
              currentPossibleCodeShownStr = "1st";
              break;
            case 2:
              currentPossibleCodeShownStr = "2nd";
              break;
            case 3:
              currentPossibleCodeShownStr = "3rd";
              break;
            default:
              currentPossibleCodeShownStr = currentPossibleCodeShown + "th";
          }
          if (res) {
            displayString("at " + currentPossibleCodeShownStr + " attempt  ", 0, nbMaxAttemptsToDisplay+transition_height+nbPossibleCodesShown-2, attempt_nb_width+(70*(nbColumns+1))/100,
                          darkGray, "", ctx, false, true, 0, true, 0);
            if (nbOfCodesListed < nbOfCodes) {
              ctx.font = basic_bold_font;
              let offset_str;
              if (!showPossibleCodesOffsetMode) {
                offset_str = "\u25bc";
              }
              else {
                offset_str = "\u25b2";
              }
              if (nbOfCodes-nbOfCodesListed == 1) {
                if (!displayString("+ 1 other code\u2009" + offset_str + " ", 0, nbMaxAttemptsToDisplay+transition_height, attempt_nb_width+(70*(nbColumns+1))/100,
                                   darkGray, "", ctx, false, true, 0, true, 0)) {
                  if (!displayString("+\u2009" + "1" + "\u2009code\u2009" + offset_str + "\u2009", 0, nbMaxAttemptsToDisplay+transition_height, attempt_nb_width+(70*(nbColumns+1))/100,
                                     darkGray, "", ctx, false, true, 0, true, 0)) {
                    if (!displayString("+\u2009" + "1" + "\u2009" + offset_str + "\u2009", 0, nbMaxAttemptsToDisplay+transition_height, attempt_nb_width+(70*(nbColumns+1))/100,
                                       darkGray, "", ctx, false, true, 0, true, 0)) {
                      displayString("\u2009" + "1" + "\u2009" + offset_str + "\u2009", 0, nbMaxAttemptsToDisplay+transition_height, attempt_nb_width+(70*(nbColumns+1))/100,
                                    darkGray, "", ctx, false, true, 0, true, 0);
                    }
                  }
                }
              }
              else {
                if(!displayString("+ " + (nbOfCodes-nbOfCodesListed) + " other codes\u2009" + offset_str + " ", 0, nbMaxAttemptsToDisplay+transition_height, attempt_nb_width+(70*(nbColumns+1))/100,
                                  darkGray, "", ctx, false, true, 0, true, 0)) {
                  if (!displayString("+\u2009" + (nbOfCodes-nbOfCodesListed) + "\u2009codes\u2009" + offset_str + "\u2009", 0, nbMaxAttemptsToDisplay+transition_height, attempt_nb_width+(70*(nbColumns+1))/100,
                                     darkGray, "", ctx, false, true, 0, true, 0)) {
                    if (!displayString("+\u2009" + (nbOfCodes-nbOfCodesListed) + "\u2009" + offset_str + "\u2009", 0, nbMaxAttemptsToDisplay+transition_height, attempt_nb_width+(70*(nbColumns+1))/100,
                                       darkGray, "", ctx, false, true, 0, true, 0)) {
                      if(!displayString("\u2009" + (nbOfCodes-nbOfCodesListed) + "\u2009" + offset_str + "\u2009", 0, nbMaxAttemptsToDisplay+transition_height, attempt_nb_width+(70*(nbColumns+1))/100,
                                        darkGray, "", ctx, false, true, 0, true, 0)) {
                        displayString(offset_str, 0, nbMaxAttemptsToDisplay+transition_height, attempt_nb_width+(70*(nbColumns+1))/100,
                                      darkGray, "", ctx, false, true, 0, true, 0);
                      }
                    }
                  }
                }
              }

              // Display hint to see other codes
              if ((!atLeastOneAttemptSelection) && (!CompressedDisplayMode) && (transition_height >= 1)) {
                ctx.font = small_bold_font;
                displayString("\u2009Click to select!\u2009", 0, nbMaxAttemptsToDisplay, attempt_nb_width+(70*(nbColumns+1))/100,
                              (modernDisplay ? "#4B0082" /* purple */ : "orange"), "", ctx, false, true, 0, true, 0);
              }
            }
          } // (res)

        }
        else {
          displayGUIError("invalid currentPossibleCodeShown: " + currentPossibleCodeShown, new Error().stack);
        }

        // Draw always present and impossible colors
        // *****************************************

        ctx.font = basic_bold_font;
        for (let col = 0; col < nbColumns; col++) {
          if (smmCodeHandler.getColor(colorsFoundCodes[currentPossibleCodeShown-1], col+1) != emptyColor) {
            displayString(tickChar, attempt_nb_width+(70*(nbColumns+1))/100+col*2, nbMaxAttemptsToDisplay+transition_height+nbPossibleCodesShown, 2,
                          greenColor, "", ctx, false, true, 0, true, 1, true /* (ignoreRanges) */);
          }
        }

        ctx.font = basic_bold_font;
        let colors_cnt = 0;
        for (let color = 1; color <= nbColors; color++) {
          if (minNbColorsTables[currentPossibleCodeShown-1][color] > 0) { // always present color
            for (let i = 0; i < minNbColorsTables[currentPossibleCodeShown-1][color]; i++) {
              displayColor(color, Math.max(attempt_nb_width+(70*(nbColumns+1))/100-3,0), nbMaxAttemptsToDisplay+transition_height+nbPossibleCodesShown-4-colors_cnt, ctx, false, true);
              colors_cnt++;
            }
          }
        }
        if (colors_cnt > 0) {
          colors_cnt++;
        }
        for (let color = 1; color <= nbColors; color++) {
          if (maxNbColorsTables[currentPossibleCodeShown-1][color] == 0) { // impossible color
            displayColor(color, Math.max(attempt_nb_width+(70*(nbColumns+1))/100-3,0), nbMaxAttemptsToDisplay+transition_height+nbPossibleCodesShown-4-colors_cnt, ctx, false, false);
            colors_cnt++;
          }
        }

        // Draw possible codes & their stats
        // *********************************

        ctx.fillStyle = darkGray;
        for (let codeidx = 0; codeidx <= nbPossibleCodesShown; codeidx++) {
          x_0 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100));
          y_0 = get_y_pixel(y_min+y_step*(nbMaxAttemptsToDisplay+transition_height+codeidx));
          x_1 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2));
          y_1 = get_y_pixel(y_min+y_step*(nbMaxAttemptsToDisplay+transition_height+codeidx));
          drawLine(ctx, x_0, y_0, x_1, y_1);
        }

        for (let col = 0; col <= nbColumns; col++) {
          x_0 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+col*2));
          y_0 = get_y_pixel(y_min+y_step*(nbMaxAttemptsToDisplay+transition_height));
          x_1 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+col*2));
          y_1 = get_y_pixel(y_min+y_step*(nbMaxAttemptsToDisplay+transition_height+nbPossibleCodesShown));
          drawLine(ctx, x_0, y_0, x_1, y_1);
        }

        let best_global_perf = global_best_performances[currentPossibleCodeShown-1];
        let valid_best_global_perf = ((best_global_perf != PerformanceUNKNOWN) && (best_global_perf > 0.01)); // valid global_best_performances value

        let code_ratio = 1.0;
        if ( (2*nbPossibleCodesShown < possibleCodesListsSizes[currentPossibleCodeShown-1]) // all codes cannot be displayed with 2x half display
             && (possibleCodesListsSubdivisions[currentPossibleCodeShown-1] == -1) // no subdivision to be displayed
             && (currentPossibleCodeShown > 1) // codes shall always be listed in sequence for first attempt
             && valid_best_global_perf ) { // no need to apply a ratio if no valid performance
          code_ratio = possibleCodesListsSizes[currentPossibleCodeShown-1] / (2*nbPossibleCodesShown); // (> 1.0)
        }

        for (let codeidx = 0; codeidx < nbOfCodesListed; codeidx++) {

          let codeidx_with_ratio = Math.floor((codeidx+code_list_offset) * code_ratio);
          if (codeidx_with_ratio >= possibleCodesListsSizes[currentPossibleCodeShown-1]) {
            displayGUIError("invalid codeidx_with_ratio; " + codeidx_with_ratio + ", " + possibleCodesListsSizes[currentPossibleCodeShown-1], new Error().stack);
          }

          // Display code
          let code = possibleCodesLists[currentPossibleCodeShown-1][codeidx_with_ratio];
          let y_cell = nbMaxAttemptsToDisplay+transition_height+nbPossibleCodesShown-1-codeidx;
          ctx.font = basic_bold_font;
          displayCode(code, y_cell, ctx);

          // Display performances
          let global_perf = PerformanceUNKNOWN;
          let relative_perf = PerformanceUNKNOWN;
          if ( valid_best_global_perf
               && (globalPerformancesList[currentPossibleCodeShown-1][codeidx_with_ratio] != PerformanceUNKNOWN) && (globalPerformancesList[currentPossibleCodeShown-1][codeidx_with_ratio] > 0.01) ) { // valid globalPerformancesList value
            global_perf = globalPerformancesList[currentPossibleCodeShown-1][codeidx_with_ratio];
            relative_perf = best_global_perf - global_perf;
          }
          ctx.font = stats_bold_font;
          let backgroundColor = "";
          displayPerf(relative_perf, y_cell, backgroundColor, 0, true, false /* valid_best_global_perf && (currentPossibleCodeShown <= 1) */, PerformanceNA /* best_global_perf */, ctx, (code == codesPlayed[currentPossibleCodeShown-1]), (code == equivalentPossibleCodes[currentPossibleCodeShown-1]), false);

          // Display subdivision
          if ( (possibleCodesListsSubdivisions[currentPossibleCodeShown-1] != -1)
               && (possibleCodesListsSubdivisions[currentPossibleCodeShown-1] == codeidx+code_list_offset+1) ) {
            if (code_ratio != 1.0) {
              displayGUIError("invalid code_ratio: " + code_ratio, new Error().stack);
            }
            x_0 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width));
            y_0 = get_y_pixel(y_min+y_step*y_cell);
            x_1 = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width));
            y_1 = get_y_pixel(y_min+y_step*y_cell);
            let currentColor = ctx.strokeStyle;
            ctx.strokeStyle = lightGray;
            drawLineWithPath(ctx, x_0, y_0, x_1, y_1);
            ctx.strokeStyle = currentColor;
          }

        }

      }

      // Enable or disable GUI controls
      // ******************************

      if (gameWon && !allPerformancesFilled()) {
        newGameButtonObject.disabled = true;
        newGameButtonObject.className  = "button disabled";
        if (CompressedDisplayMode) {
          newGameButtonObject.value = "\u231B"; /* hourglass */
        }
        else {
          newGameButtonObject.value = "WAIT... \u231B"; /* hourglass */
        }
      }
      else {
        newGameButtonObject.disabled = false;
        newGameButtonObject.className  = "button";
        if (CompressedDisplayMode) {
          newGameButtonObject.value = "+";
        }
        else {
          newGameButtonObject.value = newGameButtonIniName;
        }
      }
      settingsButtonObject.disabled = false;
      settingsButtonObject.className  = "button";

      if (currentAttemptNumber > 1) {
        for (let i = 0; i < allRadioButtons.length; i++) {
            allRadioButtons[i].className = "radio disabled";
        }
        for (let i = 0; i < nbColumnsRadioObjects.length; i++) {
            nbColumnsRadioObjects[i].disabled = true;
        }
      }
      else {
        for (let i = 0; i < allRadioButtons.length; i++) {
            allRadioButtons[i].className = "radio";
        }
        for (let i = 0; i < nbColumnsRadioObjects.length; i++) {
            nbColumnsRadioObjects[i].disabled = false;
        }
      }

      playRandomCodeButtonObject.disabled = (!gameOnGoing() || (currentAttemptNumber >= nbMaxAttempts-1)); // from last but one attempt
      if (playRandomCodeButtonObject.disabled) {
        playRandomCodeButtonObject.className = "button disabled";
      }
      else {
        playRandomCodeButtonObject.className = "button";
      }

      let nbColorsRevealed = nbColumns - smmCodeHandler.nbEmptyColors(sCodeRevealed);
      let revealSecretColorButtonObjectIniState = revealSecretColorButtonObject.disabled;
      revealSecretColorButtonObject.disabled = !(gameOnGoing() && (nbColumns >= 4) && (currentAttemptNumber >= 3) && (nbColorsRevealed < nbColumns-2));
      if (revealSecretColorButtonObject.disabled != revealSecretColorButtonObjectIniState) { // transition
        if (revealSecretColorButtonObject.disabled) {
          revealSecretColorButtonObject.className = "button disabled";
        }
        else {
          revealSecretColorButtonObject.className = "button";
        }
      }

      let showPossibleCodesButtonObjectIniState = showPossibleCodesButtonObject.disabled;
      showPossibleCodesButtonObject.disabled = !((!gameOnGoing()) && allPossibleCodesFilled());
      if (showPossibleCodesButtonObject.disabled != showPossibleCodesButtonObjectIniState) { // transition
        if (showPossibleCodesButtonObject.disabled) {
          showPossibleCodesButtonObject.className = "button disabled";
        }
        else {
          if (showPossibleCodesButtonAlreadyBlinked) {
            showPossibleCodesButtonObject.className = "button";
          }
          else {
            showPossibleCodesButtonAlreadyBlinked = true;
            showPossibleCodesButtonObject.className = (androidMode ? "button fast_blinking" + (modernDisplay ? "_brown" : "_orange") : "button blinking" + (modernDisplay ? "_brown" : "_orange"));
          }
        }
      }

      if (CompressedDisplayMode) {
        if (showPossibleCodesMode) {
          showPossibleCodesButtonObject.value = showPossibleCodesButtonBackToGameCompressedName;
        }
        else {
          showPossibleCodesButtonObject.value = showPossibleCodesButtonCompressedName;
        }
      }
      else {
        if (showPossibleCodesMode) {
          showPossibleCodesButtonObject.value = showPossibleCodesButtonBackToGameName;
        }
        else {
          showPossibleCodesButtonObject.value = showPossibleCodesButtonIniName;
        }
      }

      checkArraySizes();

      main_graph_update_needed = false;

    }

    // ******************
    // Partial repainting
    // ******************

    // Draw color selection 2/2
    // ************************

    if (!showPossibleCodesMode) {
      // Done even if main_graph_update_needed is false, to highlight selected text

      if (font_size != min_font_size) {
        ctx.fillStyle = darkGray;
      }
      else {
        ctx.fillStyle = "";
      }

      ctx.font = basic_bold_font;
      for (let color = 0; color < nbColors; color++) {
        for (let col = 0; col < nbColumns; col++) {
          color_selection_code = smmCodeHandler.setColor(color_selection_code, color+1, col+1);
        }
        displayCode(color_selection_code, nbMaxAttemptsToDisplay+transition_height+scode_height+transition_height+color, ctx, false, gameOnGoing(), true);
      }
    }

    // Display current code and remaining settings
    // *******************************************

    if (gameOnGoing()) { // playing phase
      ctx.font = basic_bold_font;
      currentCodeColorMode = -1;
      if (currentAttemptNumber > 1) { // (redraws first code on top of drawRoundedRect pixels)
        displayCode(codesPlayed[0], 0, ctx, false, true);
      }
      if ((currentAttemptNumber == 1) && (nbOfStatsFilled_NbPossibleCodes == 0) && (currentCode == 0)) {
        currentCodeColorMode = 1;
      }
      else if ((currentAttemptNumber == 1) && (nbOfStatsFilled_NbPossibleCodes >= 1)) {
        currentCodeColorMode = 2;
      }
      else if (!modernDisplay) {
        if (currentCode == 0) {
          currentCodeColorMode = 2;
        }
        else {
          currentCodeColorMode = 3;
        }
      }
      else {
        currentCodeColorMode = 1;
      }
      displayCode(currentCode, currentAttemptNumber-1, ctx, false, true);
      currentCodeColorMode = -1;

      // Reveal secret color button blinking
      if ( (!revealSecretColorButtonAlreadyBlinked)
           && gameOnGoing() && (currentAttemptNumber > 1) // (Note: full condition duplicated at several places in this file)
           && !(revealSecretColorButtonObject.disabled)
           && (sCodeRevealed == 0)
           && ( (((new Date()).getTime() - startTime)/1000 > ((nbColumns <= 5) ? 480 /* 8 min */ : 720 /* 12 min */))
                || (currentAttemptNumber == nbMaxAttempts-1) /* (last but one attempt) */
                || at_least_one_useless_code_played ) ) { /* (useless attempt(s)) */
            revealSecretColorButtonAlreadyBlinked = true;
            revealSecretColorButtonObject.className = (androidMode ? "button fast_blinking" + (modernDisplay ? "_brown" : "_orange") : "button blinking" + (modernDisplay ? "_brown" : "_orange"));
      }
    }

    resetCurrentCodeButtonObject.disabled  = !(gameOnGoing() && (currentCode != sCodeRevealed));
    if (resetCurrentCodeButtonObject.disabled) {
      resetCurrentCodeButtonObject.className = "button disabled";
    }
    else {
      resetCurrentCodeButtonObject.className = "button";
    }

    if ( last_but_one_attempt_event
         && (nbGamesPlayedAndWon <= 2)
         && (gameOnGoing())
         && !(revealSecretColorButtonObject.disabled)
         && (sCodeRevealed == 0) ) {
      setTimeout("displayRevealSecretColorHintIfNeeded();", 44);
    }

  }
  catch (err) {
    draw_exception = true;
    displayGUIError("draw error: " + err, err.stack);
  }

}

function fillTextWithColors(str, x_pixel, y_pixel, foregroundColor, ctx, str_width, str_height) {
  ctx.textAlign = "start"; // horizontal alignment
  ctx.textBaseline = "top"; // vertical alignment

  for (let i = 0; i < specialStrTable.length; i++) {
    let special_str_index = str.indexOf(specialStrTable[i]);
    if (special_str_index != -1) {
      ctx.fillStyle = specialColorTable[i];
      let prefix_str = str.substring(0, special_str_index+1);
      ctx.fillText(prefix_str, x_pixel, y_pixel);
      ctx.fillStyle = foregroundColor;
      ctx.fillText(str.substring(special_str_index+1), x_pixel + ctx.measureText(prefix_str).width, y_pixel);
      return; // only one special string is handled
    }
  }

  // No special string
  ctx.fillStyle = foregroundColor;
  if ( (str == "\u{1F3C6}" /* trophy */)
       && (typeof trophy_image_loaded !== 'undefined') && trophy_image_loaded && (trophy_image_width != -1) && (trophy_image_height != -1) ) {
     // Replace trophy unicode character by an image
     var reduction_factor = 1.0;
     var new_str_width = str_width * reduction_factor;
     var new_str_height = new_str_width * trophy_image_height / trophy_image_width;
     ctx.drawImage(trophy_image, x_pixel + (str_width - new_str_width)/2, y_pixel - (new_str_height - str_height) / 2, new_str_width, new_str_height);
  }
  else {
    ctx.fillText(str, x_pixel, y_pixel);
  }
}

function array_to_string(array_p) {
  let arrayAsString = "";
  for (const key in array_p) {
    if (array_p.hasOwnProperty(key)) {
      arrayAsString += String(key) + ":" + array_p[key] + " ";
    }
  }
  return "{" + arrayAsString.trim() + "}";
}

var str_meas_out = {str_height:0, empty_space_before_str:0};
const fontSizeRegex = /(\d+)px/;
var tmp_canvas = document.createElement('canvas');
function measurePreciseTextHeight(char_p, font, out) { // (see https://stackoverflow.com/questions/16816071/calculate-exact-character-string-height-in-javascript)

    // Get font size
    var char = String(char_p);
    var matches = font.match(fontSizeRegex);
    if (!matches) {
      throw new Error("measurePreciseTextHeight error: invalid font: " + font);
    }
    let font_size = parseInt(matches[1]);

    // Create a temporary canvas
    var height = font_size;
    var width = height*2;
    tmp_canvas.width = width;
    tmp_canvas.height = height;
    var tmp_ctx = tmp_canvas.getContext("2d");

    // Draw char in the canvas
    tmp_ctx.font = font;
    tmp_ctx.textAlign = "start"; // horizontal alignment
    tmp_ctx.textBaseline = "top"; // vertical alignment
    tmp_ctx.clearRect(0, 0, width, height); // fill canvas with transparent color
    tmp_ctx.fillText(char, 0, 0);

    // Get the pixel data from the canvas
    var imageData = tmp_ctx.getImageData(0, 0 , width, height).data;
    tmp_ctx = null;

    if (imageData.length != height * width * 4) {
      throw new Error("measurePreciseTextHeight error: " + imageData.length + ", " + height * width * 4);
    }

    // Find the first line with a non-transparent pixel
    var x, y, line_found;
    var y_step = Math.max(Math.round(height/200), 1);

    line_found = false;
    var first_non_transparent_line = -1;
    for (y = 0; y < height; y = y + y_step) {
      let y_index_offset = y * width;
      for (x = 0; x < width; x++) {
        let pixel_index = (x + y_index_offset) * 4; // [0]: Red, [1]: Green, [2]: Blue, [3]: Alpha
        if (imageData[pixel_index + 3] != 0) {
          first_non_transparent_line = y;
          line_found = true;
          break;
        }
      }
      if (line_found) {
        break;
      }
    }
    if (first_non_transparent_line == -1) {
      throw new Error("measurePreciseTextHeight error: first_non_transparent_line not found");
    }

    line_found = false;
    var last_non_transparent_line = -1;
    for (y = height-1; y >= 0; y = y - y_step) {
      let y_index_offset = y * width;
      for (x = 0; x < width; x++) {
        let pixel_index = (x + y_index_offset) * 4; // [0]: Red, [1]: Green, [2]: Blue, [3]: Alpha
        if (imageData[pixel_index + 3] != 0) {
          last_non_transparent_line = y;
          line_found = true;
          break;
        }
      }
      if (line_found) {
        break;
      }
    }
    if (last_non_transparent_line == -1) {
      throw new Error("measurePreciseTextHeight error: last_non_transparent_line not found");
    }

    // Free memory as soon as possible
    tmp_canvas.width = 0;
    tmp_canvas.height = 0;
    imageData = null;

    out.str_height = (last_non_transparent_line - first_non_transparent_line + 1);
    out.empty_space_before_str = first_non_transparent_line;
}

function displayString(str_p, x_cell, y_cell, x_cell_width,
                       foregroundColor, backgroundColor,
                       ctx,
                       fillRoundedRectangle,
                       displayColorMode = true, // true = nominal display, false = strikethrough mode
                       justify = 0 /* 0 = centered, 1 = left, 2 = right */,
                       displayIfEnoughRoom = false,
                       halfLine = 0 /* 0 = full line, 1 = bottom half line, 2 = top half line */,
                       ignoreRanges = false,
                       drawInBubble = false, bottomRightBubble = true) {

  let str = String(str_p);
  let x_0 = get_x_pixel(x_min+x_step*x_cell);
  let x_0_for_drawBubble;
  let x_0_next = get_x_pixel(x_min+x_step*(x_cell+x_cell_width));
  let y_0;
  let y_0_next;
  let str_width = ctx.measureText(str).width;
  let ctx_font_str = ctx.font;
  let str_height = font_array__str_height[ctx_font_str];
  if (str_height == undefined) {
    if ((safariMode || ((!android_appli) && mobileMode && (!androidMode))) && (ctx_font_str.indexOf("bold") == -1)) { // Known Safari bug: "bold" prefix may disappear
      ctx_font_str = "bold " + ctx_font_str.trim(); // add "bold" prefix manually
      str_height = font_array__str_height[ctx_font_str];
    }
    if (str_height == undefined) {
      displayGUIError("displayString: str_height not found for font: " + ctx_font_str + "/" + ctx.font + " inside array: " + array_to_string(font_array__str_height), new Error().stack);
      str_height = parseInt(ctx.font.match(/\d+/)[0]) * 0.83; // (defense)
    }
  }
  let empty_space_before_str = font_array__empty_space_before_str[ctx_font_str];
  if (empty_space_before_str == undefined) {
    displayGUIError("displayString: empty_space_before_str not found for font: " + ctx_font_str + "/" + ctx.font + " inside array: " + array_to_string(font_array__empty_space_before_str), new Error().stack);
    empty_space_before_str = 0; // (defense)
  }
  let font_width_1char = ctx.measureText("X").width;

  let lineWidthIni = ctx.lineWidth;
  ctx.lineWidth = getLineWidth(window.innerHeight, 0.25);

  if (0 == halfLine) {
    y_0 = get_y_pixel(y_min+y_step*y_cell);
    y_0_next = get_y_pixel(y_min+y_step*(y_cell+1), ignoreRanges);
  }
  else if (1 == halfLine) { // bottom half line
    y_0 = Math.max(get_y_pixel(y_min+y_step*y_cell) - Math.round(str_height/1.3), 0);
    y_0_next = Math.max(y_0 - str_height, 0);
  }
  else { // top half line
    y_0 = Math.max(get_y_pixel(y_min+y_step*y_cell) - str_height * 1.6 - Math.round(str_height/1.3), 0);
    y_0_next = Math.max(y_0 - str_height, 0);
  }
  // let y_pixel = Math.round(y_0 + (y_0_next - y_0 - str_height)/2);
  let y_pixel = Math.max(Math.round(y_0_next + (y_0 - y_0_next - str_height)/2 - empty_space_before_str), 0);

  if ( (!displayIfEnoughRoom) || (x_0_next - x_0 - str_width >= 0) ) {
    if (!ignoreRanges) {
      if (backgroundColor != "") { // not N.A. background
        ctx.fillStyle = backgroundColor;
        if (fillRoundedRectangle) {
          if (currentCodeColorMode == 1) {
            ctx.strokeStyle = ((modernDisplay || !CompressedDisplayMode) ? lightGray : darkGray);
          }
          else if (currentCodeColorMode == 2) {
            ctx.strokeStyle = (modernDisplay ? modernBaseColor : "orange");
          }
          else if (currentCodeColorMode == 3) {
            ctx.strokeStyle = darkGray;
          }
          else if (currentCodeColorMode == 4) {
            ctx.strokeStyle = averageColor(darkGray, myTableObject.style.backgroundColor, 0.20);
          }
          else {
            ctx.strokeStyle = darkGray;
          }
          if ((!modernDisplay) && (legacyDisplayVariant == 1)) { // legacy display variant 1
            let radius = Math.min(x_0_next - x_0, y_0 - y_0_next)/2.5;
            ctx.beginPath();
            ctx.arc(Math.floor((x_0 + x_0_next + 1)/2), // center x
                    Math.floor((y_0 + y_0_next + 1)/2), // center y
                    radius, // radius
                    0, 2 * Math.PI, false); // starting and ending angles + clockwise
            ctx.fill();
            ctx.stroke();
          }
          else {
            let radius = Math.min(x_0_next - x_0 - 1, y_0 - y_0_next - 1)/(CompressedDisplayMode ? 2.6 : 2.6);
            drawRoundedRect(ctx, x_0 + 1, y_0_next + 1, x_0_next - x_0 - 1, y_0 - y_0_next - 1, {
              tl: radius,
              tr: radius,
              bl: radius,
              br: radius
            }, true, true);
          }
        }
        else {
          ctx.fillRect(x_0 + 1, y_0_next + 1, x_0_next - x_0 - 1, y_0 - y_0_next - 1);
        }
      }
    }

    if (justify == 0) { // centered
      if (!displayColorMode) { // To simplify, strikethrough mode is only handled in centered case
        if (backgroundColor == "") { // N.A. background
          displayGUIError("displayString error: N.A. background #1", new Error().stack);
        }
        let redC = parseInt(backgroundColor.substring(1,3), 16);
        let greenC = parseInt(backgroundColor.substring(3,5), 16);
        let blueC = parseInt(backgroundColor.substring(5,7), 16);
        if (Math.max(Math.max(redC, greenC), blueC) < 50) {
          ctx.strokeStyle = "white";
        }
        else {
          ctx.strokeStyle = "black";
        }
        ctx.beginPath();
        ctx.moveTo(x_0 + 2, y_0 - 2);
        ctx.lineTo(x_0_next - 2, y_0_next + 2);
        ctx.moveTo(x_0 + 2, y_0_next + 2);
        ctx.lineTo(x_0_next - 2, y_0 - 2);
        ctx.stroke();  // Draw it

        if (!((!modernDisplay) && (legacyDisplayVariant == 1))) { // NOT legacy display variant 1
            if (backgroundColor == "") { // N.A. background
              displayGUIError("displayString error: N.A. background #2", new Error().stack);
            }
            ctx.fillStyle = backgroundColor;
            let half_hidding_rect_width = Math.max(8*(x_0_next - x_0)/100, str_width/2+2);
            ctx.fillRect(x_0 + (x_0_next - x_0)/2 - half_hidding_rect_width, y_0_next + 3, 2*half_hidding_rect_width+2, y_0 - y_0_next - 4);
        }
      }
      fillTextWithColors(str, x_0 + (x_0_next - x_0 - str_width)/2, y_pixel, foregroundColor, ctx, str_width, str_height);
      x_0_for_drawBubble = Math.max((x_0 + x_0_next)/2 - str_width/2, 0);
    }
    else if (justify == 2) { // right
      fillTextWithColors(str, x_0_next - str_width, y_pixel, foregroundColor, ctx, str_width, str_height);
      x_0_for_drawBubble = Math.max(x_0_next - str_width, 0);
    }
    else { // left
      fillTextWithColors(str, x_0, y_pixel, foregroundColor, ctx, str_width, str_height);
      x_0_for_drawBubble = x_0;
    }

    if (drawInBubble) {
      let delta_x = font_width_1char*0.50;
      let delta_y = 3;
      drawBubble(ctx, x_0_for_drawBubble - delta_x, y_0_next - delta_y, str_width + 2*delta_x, y_0 - y_0_next + 2*delta_y, Math.floor(str_height/1.5), foregroundColor, getLineWidth(window.innerHeight, 1), bottomRightBubble);
    }

    ctx.lineWidth = lineWidthIni;
    return true;
  }
  ctx.lineWidth = lineWidthIni;
  return false;

}

function display2Strings(str1, str2, x_cell, y_cell, x_cell_width,
                        foregroundColor, backgroundColor, ctx,
                        justify /* 0 = centered, 1 = left, 2 = right */, displayIfEnoughRoom) {
  let res;
  if (ctx.measureText(str1).width <= ctx.measureText(str2).width) {
    res = displayString(str2, x_cell, y_cell, x_cell_width,
                        foregroundColor, backgroundColor, ctx, false, true, justify, displayIfEnoughRoom, 1);
    if (res) {
      displayString(str1, x_cell, y_cell, x_cell_width,
                    foregroundColor, backgroundColor, ctx, false, true, justify, displayIfEnoughRoom, 2);
    }
  }
  else {
    res = displayString(str1, x_cell, y_cell, x_cell_width,
                        foregroundColor, backgroundColor, ctx, false, true, justify, displayIfEnoughRoom, 2);
    if (res) {
      displayString(str2, x_cell, y_cell, x_cell_width,
                      foregroundColor, backgroundColor, ctx, false, true, justify, displayIfEnoughRoom, 1);
    }
  }
  return res;
}

function averageColor(color1_p, color2_p, color1Coef) {

  let color1 = color1_p.toLowerCase().trim();
  let color2 = color2_p.toLowerCase().trim();
  let r1;
  let g1;
  let b1;
  let r2;
  let g2;
  let b2;

  if ((color1Coef < 0.0) || (color1Coef > 1.0)) {
    displayGUIError("error in averageColor (1): " + color1 + ", " + color2 + ", " + color1Coef, new Error().stack);
    return color1_p;
  }

  // Get color1's rgb values
  if ((color1.indexOf("#") == 0) && (color1.length == 7)) { // "#FFFFFF" color format
    r1 = Number("0x" + color1.substring(1,3)); // (hexa number parsing)
    g1 = Number("0x" + color1.substring(3,5));
    b1 = Number("0x" + color1.substring(5,7));
  }
  else if (color1.indexOf("rgb") == 0) { // "rgb(255, 255, 255)" color format
    let rgb = color1.match(/\d+/g);
    r1 = rgb[0];
    g1 = rgb[1];
    b1 = rgb[2];
  }
  else {
    displayGUIError("error in averageColor (2): " + color1 + ", " + color2 + ", " + color1Coef, new Error().stack);
    return color1_p;
  }

  // Get color2's rgb values
  if ((color2.indexOf("#") == 0) && (color2.length == 7)) { // "#FFFFFF" color format
    r2 = Number("0x" + color2.substring(1,3)); // (hexa number parsing)
    g2 = Number("0x" + color2.substring(3,5));
    b2 = Number("0x" + color2.substring(5,7));
  }
  else if (color2.indexOf("rgb") == 0) { // "rgb(255, 255, 255)" color format
    let rgb = color2.match(/\d+/g);
    r2 = rgb[0];
    g2 = rgb[1];
    b2 = rgb[2];
  }
  else {
    displayGUIError("error in averageColor (3): " + color1 + ", " + color2 + ", " + color1Coef, new Error().stack);
    return color1_p;
  }

  // Compute color average
  let newr = Math.round(r1*color1Coef + r2*(1-color1Coef));
  let newg = Math.round(g1*color1Coef + g2*(1-color1Coef));
  let newb = Math.round(b1*color1Coef + b2*(1-color1Coef));
  if ( isNaN(newr) || (newr < 0) || (newr > 255)
       || isNaN(newg) || (newg < 0) || (newg > 255)
       || isNaN(newb) || (newb < 0) || (newb > 255) ) {
    displayGUIError("error in averageColor (4): " + color1 + ", " + color2 + ", " + color1Coef + " / " + newr + ", " + newg + ", " + newb, new Error().stack);
    return color1_p;
  }
  return "rgb(" + newr + "," + newg + "," + newb + ")";

}

function getColorToDisplay(color) {
  if ((!modernDisplay) && (legacyDisplayVariant == 1)) { // legacy display variant 1
    return "";
  }
  return color;
}

function displayColor(color, x_cell, y_cell, ctx, secretCodeCase, displayColorMode, disabledColor = false) {
  let handleCurrentCodeColorMode = false;
  if ((currentCodeColorMode == -1) && disabledColor) {
    currentCodeColorMode = 1;
    handleCurrentCodeColorMode = true;
  }
  if (color != emptyColor) {
    let foregroundColor = foregroundColorTable[color-1];
    let backgroundColor = backgroundColorTable[color-1];
    if (disabledColor) {
      if ((!modernDisplay) && (legacyDisplayVariant == 0)) { // legacy display variant 0
        foregroundColor = averageColor(foregroundColor, myTableObject.style.backgroundColor, 0.15);
        backgroundColor = averageColor(backgroundColor, myTableObject.style.backgroundColor, 0.15);
        currentCodeColorMode = 4;
        handleCurrentCodeColorMode = true;
      }
      else if ((!modernDisplay) && (legacyDisplayVariant == 1)) { // legacy display variant 1
        foregroundColor = averageColor(foregroundColor, myTableObject.style.backgroundColor, 0.10);
        backgroundColor = averageColor(backgroundColor, myTableObject.style.backgroundColor, 0.10);
        currentCodeColorMode = 4;
        handleCurrentCodeColorMode = true;
      }
      else {
        foregroundColor = averageColor(foregroundColor, myTableObject.style.backgroundColor, 0.15);
        backgroundColor = averageColor(backgroundColor, myTableObject.style.backgroundColor, 0.15);
      }
    }
    if (highlight_selected_text) {
      if (!modernDisplay) {
        backgroundColor = averageColor(backgroundColor, myTableObject.style.backgroundColor, 0.25);
      }
      else {
        backgroundColor = averageColor(backgroundColor, modernBaseColor2, 0.25);
      }
    }
    if (color < 10) {
      displayString(getColorToDisplay(color), x_cell, y_cell, 2,
                    foregroundColor, backgroundColor, ctx, true, displayColorMode, 0, false, 0);
    }
    else {
      let res = displayString(getColorToDisplay(color), x_cell, y_cell, 2,
                              foregroundColor, backgroundColor, ctx, true, displayColorMode, 0, true, 0);
      if (!res) {
        displayString(getColorToDisplay(color-10), x_cell, y_cell, 2,
                      foregroundColor, backgroundColor, ctx, true, displayColorMode, 0, false, 0);
      }
    }
  }
  else {
    if (secretCodeCase) {
      let foregd_color = (modernDisplay ? darkGray : lightGray);
      if (currentAttemptNumber <= 1) { // a little fun
        if (color_cnt >= nbColors) {
          color_cnt = 0;
        }
        foregd_color = backgroundColorTable[color_cnt];
        color_cnt++;
        if (color_cnt == 5) {
          color_cnt = 7;
        }
      }
      if (modernDisplay) {
        displayString(getColorToDisplay("?"), x_cell, y_cell, 2,
                      foregd_color, (mobileMode ? "#EEEEEE" : "#D0D0D0"), ctx, true, displayColorMode, 0, false, 0);
      }
      else {
        currentCodeColorMode = ((currentAttemptNumber <= 1) ? 3 : 1);
        displayString(getColorToDisplay("?"), x_cell, y_cell, 2,
                      foregd_color, legacy_backgroundColor_base_color, ctx, true, displayColorMode, 0, false, 0);
        currentCodeColorMode = -1;
      }
    }
    else {
      displayString(getColorToDisplay(""), x_cell, y_cell, 2,
                    darkGray, (modernDisplay ? (mobileMode ? "#EEEEEE" : "#D0D0D0") : averageColor(legacy_backgroundColor_base_color, "#FFFFFF", 0.95)), ctx, true, displayColorMode, 0, false, 0);
    }
  }
  if (handleCurrentCodeColorMode) {
    currentCodeColorMode = -1;
  }
}

function displayCode(code, y_cell, ctx, secretCodeCase = false, checkDisabledColors = false, check_highlight_text = false) {
  for (let col = 0; col < nbColumns; col++) {
    let color = smmCodeHandler.getColor(code, col+1);
    highlight_selected_text = (check_highlight_text && (color == color_being_selected) && (col+1 == column_of_color_being_selected));
    displayColor(color, attempt_nb_width+(70*(nbColumns+1))/100+col*2, y_cell, ctx, secretCodeCase, true, (checkDisabledColors ? obviouslyImpossibleColors[color] : false));
    highlight_selected_text = false;
  }
}

function displayMark(mark, y_cell, backgroundColor, ctx) {

  let x_0 = get_x_pixel(x_min+x_step*attempt_nb_width);
  let x_0_next = get_x_pixel(x_min+x_step*(attempt_nb_width+(70*(nbColumns+1))/100));
  let circle_width = (2.0*(x_0_next - x_0 - 2)) / (3.0 * nbColumns + 1);
  let circle_width_applied = Math.floor(circle_width);
  if ((circle_width_applied % 2) == 1) circle_width_applied++; // makes marks larger and even values avoid Java displaying issues when drawOval is run
  let y_0 = get_y_pixel(y_min+y_step*y_cell);
  let y_0_next = get_y_pixel(y_min+y_step*(y_cell+1));
  let constant_y_cell_delta = get_y_pixel(y_min) - get_y_pixel(y_min+y_step);
  while (circle_width_applied > Math.floor((55*constant_y_cell_delta)/100)) {
    circle_width_applied = circle_width_applied - 2; // (keeps even)
  }
  if (circle_width_applied < 2) {
    circle_width_applied = 2;
  }

  // Space between marks whose circle's diameter is circle_width_applied
  let space_btw_marks = ((x_0_next - x_0 - 2.0) - (nbColumns*(circle_width_applied+1.0))) / (nbColumns+1.0);

  if (backgroundColor != "") { // N.A. background
    ctx.fillStyle = backgroundColor;
    ctx.fillRect(x_0 + refLineWidth, y_0_next + 1, x_0_next - x_0 - refLineWidth, y_0 - y_0_next - 1);
  }

  ctx.fillStyle = "black";

  let x_0_pos;
  let left_space = 1 + Math.floor(space_btw_marks);
  let right_space = Math.floor(Math.max(0, (x_0_next - x_0) - (1 + Math.floor(space_btw_marks) + (nbColumns-1.0)*(circle_width_applied+1.0+Math.floor(space_btw_marks)) + circle_width_applied)));
  let x_0_pos_offset = Math.max(0, Math.floor((left_space + right_space)/2) - left_space);

  let circleBorderWidth = 1.25;
  let whiteBckg = "#FCFCFC";
  let radius = Math.floor(circle_width_applied/2);
  if (radius <= 3) { // radius
    circleBorderWidth = 0.6;
    whiteBckg = "#FFFFFF";
  }
  let lineWidthRatio = getLineWidth(window.innerHeight, 0.5);
  circleBorderWidth = circleBorderWidth * lineWidthRatio;

  for (let i = 0; i < mark.nbBlacks; i++) {
    x_0_pos = Math.round(x_0 + 1.0 + Math.floor(space_btw_marks) + i*(circle_width_applied+1.0+Math.floor(space_btw_marks))); // Math.floor(space_btw_marks) instead of space_btw_marks to have constant spacing between all circles

    ctx.beginPath();
    ctx.arc(x_0_pos + x_0_pos_offset + radius, // center x
            Math.floor((y_0 + y_0_next + 1)/2), // center y
            radius, // radius
            0, 2 * Math.PI, false); // starting and ending angles + clockwise
    ctx.fillStyle = "black";
    ctx.fill();
    let lineWidthIni = ctx.lineWidth;
    ctx.lineWidth = circleBorderWidth;
    ctx.strokeStyle = "black";
    ctx.stroke();
    ctx.lineWidth = lineWidthIni;
  }

  for (let i = mark.nbBlacks; i < mark.nbBlacks + mark.nbWhites; i++) {
    x_0_pos = Math.round(x_0 + 1.0 + Math.floor(space_btw_marks) + i*(circle_width_applied+1.0+Math.floor(space_btw_marks))); // (int)space_btw_marks instead of space_btw_marks to have constant spacing between all circles

    ctx.beginPath();
    ctx.arc(x_0_pos + x_0_pos_offset + radius, // center x
            Math.floor((y_0 + y_0_next + 1)/2), // center y
            radius, // radius
            0, 2 * Math.PI, false); // starting and ending angles + clockwise
    ctx.fillStyle = whiteBckg;
    ctx.fill();
    let lineWidthIni = ctx.lineWidth;
    ctx.lineWidth = circleBorderWidth;
    ctx.strokeStyle = (modernDisplay ? "black" : whiteBckg);
    ctx.stroke();
    ctx.lineWidth = lineWidthIni;
  }

  if (nbColumns >= 4) {
    for (let i = mark.nbBlacks + mark.nbWhites; i < nbColumns; i++) {
      x_0_pos = Math.round(x_0 + 1.0 + Math.floor(space_btw_marks) + i*(circle_width_applied+1.0+Math.floor(space_btw_marks))); // (int)space_btw_marks instead of space_btw_marks to have constant spacing between all circles

      ctx.beginPath();
      ctx.arc(x_0_pos + x_0_pos_offset + radius, // center x
              Math.floor((y_0 + y_0_next + 1)/2), // center y
              radius, // radius
              0, 2 * Math.PI, false); // starting and ending angles + clockwise
      ctx.fillStyle = myTableObject.style.backgroundColor;
      // ctx.fill();
      let lineWidthIni = ctx.lineWidth;
      ctx.lineWidth = circleBorderWidth;
      ctx.strokeStyle = averageColor((modernDisplay ? "#000000" : "#FFFFFF"), myTableObject.style.backgroundColor, (modernDisplay ? 0.20 : 0.20));
      ctx.stroke();
      ctx.lineWidth = lineWidthIni;
    }
  }

  if (mark.nbBlacks + mark.nbWhites == 0) { // worst mark
    ctx.strokeStyle = lightGray;
    let cross_height = (0.33*(y_0 - y_0_next) + 0.66*2*radius);
    let y_0_bis = Math.floor((y_0 + y_0_next + 1)/2) + cross_height/2;
    let y_0_next_bis = Math.floor((y_0 + y_0_next + 1)/2) - cross_height/2;
    drawLineWithPath(ctx, x_0, y_0_bis, x_0_next, y_0_next_bis);
    drawLineWithPath(ctx, x_0, y_0_next_bis, x_0_next, y_0_bis);
  }

  if ((mark.nbBlacks + mark.nbWhites == 0) && ((!localStorage.gamesok) || (Number(localStorage.gamesok) <= 30)) && (!worst_mark_alert_already_displayed) && (nb_worst_mark_alert_displayed<= 2)) {
    worst_mark_alert_already_displayed = true;
    nb_worst_mark_alert_displayed++;
    setTimeout("alert('You got no black and white pegs for this code, which means none of its colors are in the secret code. Those colors were therefore grayed.');", 111);
  }

}

function drawBubble(ctx, x, y, w, h, radius, foregroundColor, lineWidth, bottomRightBubble)
{
  let r = x + w;
  let b = y + h;
  if (bottomRightBubble) { // bottom-right bubble
    ctx.beginPath();
    ctx.strokeStyle = foregroundColor;
    let lineWidthIni = ctx.lineWidth;
    ctx.lineWidth = lineWidth;
    ctx.moveTo(x+radius, y);
    ctx.lineTo(x+radius/2, y-1.0*radius);
    ctx.lineTo(x+radius*2, y);
    ctx.lineTo(r-radius, y);
    ctx.quadraticCurveTo(r, y, r, y+radius);
    ctx.lineTo(r, y+h-radius);
    ctx.quadraticCurveTo(r, b, r-radius, b);
    ctx.lineTo(x+radius, b);
    ctx.quadraticCurveTo(x, b, x, b-radius);
    ctx.lineTo(x, y+radius);
    ctx.quadraticCurveTo(x, y, x+radius, y);
    ctx.stroke();
    ctx.lineWidth = lineWidthIni;
  }
  else { // bottom-left bubble
    ctx.beginPath();
    ctx.strokeStyle = foregroundColor;
    let lineWidthIni = ctx.lineWidth;
    ctx.lineWidth = lineWidth;
    ctx.moveTo(r-radius*2, y);
    ctx.lineTo(r-radius/2, y-1.0*radius);
    ctx.lineTo(r-radius, y);
    ctx.quadraticCurveTo(r, y, r, y+radius);
    ctx.lineTo(r, y+h-radius);
    ctx.quadraticCurveTo(r, b, r-radius, b);
    ctx.lineTo(x+radius, b);
    ctx.quadraticCurveTo(x, b, x, b-radius);
    ctx.lineTo(x, y+radius);
    ctx.quadraticCurveTo(x, y, x+radius, y);
    ctx.lineTo(r-radius*2, y);
    ctx.stroke();
    ctx.lineWidth = lineWidthIni;
  }
}

function displayPerf(perf, y_cell, backgroundColor, isPossible, starDisplayIfOptimal, globalPerfDisplayIfOptimal, optimalGlobalPerf, ctx, ideaFlag, equivalentIdeaFlag, isClassicalUselessCode) {

  let performance = Math.round(perf * 100.0) / 100.0; // 0.01 precision
  let optimalglobalperformance = Math.round(optimalGlobalPerf * 100.0) / 100.0; // 0.01 precision

  let x_cell;
  let cell_width;
  let extra_x_space = 0;
  if (optimal_width > 0) {
    x_cell = attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width;
    cell_width = optimal_width;
    extra_x_space = 0.75*tick_width;
  }
  else { /* (nb of possible codes <-> perf switch) */
    x_cell = attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2;
    cell_width = nb_possible_codes_width;
  }

  let isPossible_str;
  if (tick_width > 0) {
    isPossible_str = "";
  }
  else {
    if (0 == isPossible) { // code is possible
      isPossible_str = "";
    }
    else { // code is not possible
      isPossible_str = "\u2009(" + isPossible + ")";
    }
  }

  if (performance == PerformanceUNKNOWN) {
    displayString("\u2234", x_cell, y_cell, cell_width,
                  lightGray, backgroundColor, ctx, false);
  }
  else if (performance != PerformanceNA) {
    if (performance <= -1.00) { // "classical" useless code (number of possible codes unchanged after the attempt) or "pseudo-useless/more-than-useless" code
      let color;
      let nb_of_decimals;
      if (isClassicalUselessCode) { // "classical" useless code
        if ((performance != -1.00) || (perf != -1.00)) {
          throw new Error("internal error in displayPerf (1): " + performance + ', ' + perf + ', ' + isClassicalUselessCode);
        }
        color = redColor;
        nb_of_decimals = 1; // no need of more decimals to display exact value -1.0 / display is clearer with 1 decimal only
      }
      else { // "pseudo-useless/more-than-useless" code
        color = "#4B0082"; // purple to highlight those very particular cases
        nb_of_decimals = 2;
      }
      if (!(isClassicalUselessCode && displayString(" useless" + isPossible_str + " ", x_cell, y_cell, cell_width,
                                                    color, backgroundColor, ctx, false, true, 0, true, 0))) {
        if (!displayString("\u2009" + performance.toFixed(nb_of_decimals).replaceAll(",",".") + isPossible_str + "\u2009", x_cell, y_cell, cell_width,
                           color, backgroundColor, ctx, false, true, 0, true, 0)) {
          if (!(isClassicalUselessCode && displayString(" useless ", x_cell, y_cell, cell_width,
                                                        color, backgroundColor, ctx, false, true, 0, true, 0))) {
            if (!displayString("\u200A" + performance.toFixed(nb_of_decimals).replaceAll(",",".") + "\u200A", x_cell, y_cell, cell_width,
                               color, backgroundColor, ctx, false, true, 0, true, 0)) {
              displayString(performance.toFixed(1).replaceAll(",","."), x_cell, y_cell, cell_width,
                            color, backgroundColor, ctx, false);
            }
          }
        }
      }
    }
    else if (performance <= PerformanceVERYLOW) {
      if (!displayString("\u200A" + performance.toFixed(2).replaceAll(",",".") + "\u200A", x_cell, y_cell, cell_width,
                         redColor, backgroundColor, ctx, false, true, 0, true, 0)) {
        displayString(performance.toFixed(1).replaceAll(",","."), x_cell, y_cell, cell_width,
                      redColor, backgroundColor, ctx, false);
      }
    }
    else if (performance <= PerformanceLOW) {
      if (!displayString("\u200A" + performance.toFixed(2).replaceAll(",",".") + "\u200A", x_cell, y_cell, cell_width,
                         orangeColor, backgroundColor, ctx, false, true, 0, true, 0)) {
        displayString(performance.toFixed(1).replaceAll(",","."), x_cell, y_cell, cell_width,
                      orangeColor, backgroundColor, ctx, false);
      }
    }
    else if (performance < 0.00) {
      if (!displayString("\u200A" + performance.toFixed(2).replaceAll(",",".") + "\u200A", x_cell, y_cell, cell_width,
                         lightGray, backgroundColor, ctx, false, true, 0, true, 0)) {
        displayString(performance.toFixed(1).replaceAll(",","."), x_cell, y_cell, cell_width,
                      lightGray, backgroundColor, ctx, false);
      }
    }
    else if (performance == 0.00) { // optimal code (perf with +/-0.005 precision is considered for optimality)
      let starStr = "";
      let starStr2 = "";
      if (starDisplayIfOptimal) {
        starStr = "\u2B50\u2009"; // star
        starStr2 = "\u2B50\u200A"; // star with hair space (condition duplicated)
      }
      if ( (!globalPerfDisplayIfOptimal)
           || (!displayString(starStr + "optimal/" + optimalglobalperformance.toFixed(2).replaceAll(",","."), x_cell-extra_x_space, y_cell, cell_width+2*extra_x_space,
                              lightGray, backgroundColor, ctx, false, true, 0, true, 0)) ) {
        if (!displayString(" " + starStr + "optimal ", x_cell, y_cell, cell_width,
                           lightGray, backgroundColor, ctx, false, true, 0, true, 0)) {
          if (!displayString("\u200A\u200A" + starStr2 + performance.toFixed(/*2*/1).replaceAll(",",".") + "\u200A\u200A", x_cell, y_cell, cell_width,
                             lightGray, backgroundColor, ctx, false, true, 0, true, 0)) {
            if (!displayString("\u200A\u200A" + starStr2 + performance.toFixed(1).replaceAll(",",".") + "\u200A\u200A", x_cell, y_cell, cell_width,
                               lightGray, backgroundColor, ctx, false, true, 0, true, 0)) {
              displayString(starStr2 + performance.toFixed(0).replaceAll(",","."), x_cell, y_cell, cell_width,
                            lightGray, backgroundColor, ctx, false);
            }
          }
        }
      }
    }
    else { // > 0.00: an illogical code can be better than the optimal logical code(s)
      if (performance <= 0.00) {
        throw new Error("internal error in displayPerf (2): " + performance);
      }
      if (!displayString("\u200A" + "+" + performance.toFixed(2).replaceAll(",",".") + "!" + "\u200A", x_cell, y_cell, cell_width,
                         greenColor, backgroundColor, ctx, false, true, 0, true, 0)) {
        if (!displayString("\u200A" + "+" + performance.toFixed(2).replaceAll(",",".") + "\u200A", x_cell, y_cell, cell_width,
                           greenColor, backgroundColor, ctx, false, true, 0, true, 0)) {
          displayString("+" + performance.toFixed(1).replaceAll(",","."), x_cell, y_cell, cell_width,
                        greenColor, backgroundColor, ctx, false);
        }
      }
    }
  }
  else {
    // Nothing is displayed in case of PerformanceNA (but the background is updated if needed)
    displayString("NA", x_cell, y_cell, cell_width,
                  lightGray, backgroundColor, ctx, false);
  }

  if (ideaFlag && (tick_width > 0) && (!globalPerfDisplayIfOptimal)) {
    displayString("\uD83D\uDCA1", attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, y_cell, tick_width, // idea/bulb
                  "#FFBF00", backgroundColor, ctx, false);
  }
  else if (equivalentIdeaFlag && (tick_width > 0) && (!globalPerfDisplayIfOptimal)) {
    displayString("\uD83D\uDCA1", attempt_nb_width+(70*(nbColumns+1))/100+nbColumns*2+nb_possible_codes_width+optimal_width, y_cell+(android_appli ? 0 : 0.065), tick_width, // previous character: \u2190 = left arrow with vertical compensation
                  "#FFBF00", backgroundColor, ctx, false);
  }

}

function fullObjToString(obj) {
  try {
    let str = '{';
    for (let p in obj) {
      // if (obj.hasOwnProperty(p)) { // Note: this condition can be commented for (plenty of) more fields
        str += p + ':' + obj[p] + '\n';
      // }
    }
    str = str.trim().replaceAll("\n", "|") + "}";
    return str;
  }
  catch (exc) {
    return "?";
  }
}

// *************************************************************************
// Draw graphic
// *************************************************************************

debug_game_state = 68.5;
scriptsFullyLoaded = true;

draw_graphic();
updateThemeAttributes();

canvas.addEventListener("touchstart", touchStart, { passive: true }); // { passive: true } tells the browser that the event handler won't call preventDefault() to disable scrolling, allowing the browser to handle scrolling more efficiently
canvas.addEventListener("touchend", touchEnd, false);
canvas.addEventListener("mousedown", mouseDown, false);
canvas.addEventListener("mouseup", mouseUp, false);
canvas.addEventListener("mousemove", mouseMove, false);

// Welcome message at very first game on android app
// Note: not done for web games because index.html is supposed to have been seen and because cookies may be reset at each browser exit
if ((!localStorage.gamesok) || (Number(localStorage.gamesok) <= 5)) { // recent player
  let welcome_str =
    "<center><table style='width:" + generalTableWidthStr + ";'><tr style='text-align:center;'><td>\
    <img alt='welcome!' src='img/" + (android_appli ? "Welcome_android_app.png" : "Welcome_browser.png") + "' style='width:100%;margin-top:1.5vh;margin-bottom:1.0vh;'>\
    </td></tr></table></center>";
  try {
    modal_mode = 5;
    // set modal content
    modal.setContent("<div style='-webkit-touch-callout: none; /* iOS Safari */ -webkit-user-select: none; /* Safari */ -khtml-user-select: none; /* Konqueror HTML */ -moz-user-select: none; /* Firefox */ -ms-user-select: none; /* Internet Explorer/Edge */ user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */'>"
                     + welcome_str
                     + "</div>");
    // open modal
    modal.open();
  }
  catch (exc) {
    throw new Error("modal error (" + modal_mode + "):" + exc + ": " + exc.stack);
  }
}
else {
  askLocationPermissionsIfNeeded();
}
debug_game_state = 69;
debug_smm_state = 100;